{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/baidu_verify_8YfOCXx3UC.html","hash":"6f37a97ccd0b0e62f068200f5d7f48f76e780560","modified":1518268172000},{"_id":"source/robots.txt","hash":"f65db751ccf9ba3dda2279a6cc5042ac655d0305","modified":1519452005000},{"_id":"source/.DS_Store","hash":"aeb77959987c5e70d5d39e35e3b2cc9c96c504e3","modified":1521871949000},{"_id":"themes/next/.DS_Store","hash":"177fefc99b846ded29b19c3335c7748eb26fb039","modified":1521873366000},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1517285597000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1517285597000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1517285597000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1517285597000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1517285597000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1517285597000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1517285597000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1517285597000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1517285597000},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1517285597000},{"_id":"themes/next/README.md","hash":"04451e616a5656f4fe1b17b06e0c3a1ae0b110f3","modified":1517285597000},{"_id":"themes/next/_config.yml","hash":"9f472cf8e71794cf26807a7c5712bf79c6b24879","modified":1518405154000},{"_id":"themes/next/bower.json","hash":"3d3870b07762bb8246766180e68480267b204331","modified":1517285597000},{"_id":"themes/next/crowdin.yml","hash":"fe22a450cc1272b7ac5476e6b33a999f8b8a2034","modified":1517285597000},{"_id":"themes/next/package.json","hash":"9d4007c3c002cc7293541a245b97eb0ed07e593e","modified":1517285597000},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1517285597000},{"_id":"source/_posts/Hexo博客Next主题配置.md","hash":"b51a5072774f4dcb72b4d2e664eda571d9f07154","modified":1519096962000},{"_id":"source/_posts/.DS_Store","hash":"bb90d0474e973cecbae84dbadb69c2bce71dd2d5","modified":1521872856000},{"_id":"source/_posts/如何让谷歌和百度搜索到自己的博客.md","hash":"40b55d3573eb482d16eee7e27defb40cc31f6c78","modified":1520689400000},{"_id":"source/_posts/搭建临时邮箱.md","hash":"1e7e53f4f2d3e50cb20f93d17a5521e6db16f612","modified":1521853111000},{"_id":"source/_posts/个人博客Hexo搭建.md","hash":"5bc627cd2f9fbd5bd1b616dac3bec25407323ff2","modified":1520689411000},{"_id":"source/_posts/修改Github项目的语言分类.md","hash":"c904f3542998099ed2d141c1dae50cb844eb83f7","modified":1519096879000},{"_id":"source/_posts/博客自启动.md","hash":"838dbdabef6b049238c250e2bf751d7d78723bff","modified":1519483145000},{"_id":"source/about/index.md","hash":"9ef0eb444c794d82216906668390207d9bcb713a","modified":1521853168000},{"_id":"source/_posts/给自己的网站加上HTTPS.md","hash":"312db0d55618b2c51048c21e24ff43b5e3908eab","modified":1519096980000},{"_id":"source/_posts/自动将更新部署到VPS.md","hash":"9138961fd734586a4241ae5e4121d4114935091b","modified":1520689388000},{"_id":"source/categories/index.md","hash":"c9f17fe882b641f38846778cdfb10687e8c58ddb","modified":1517752401000},{"_id":"source/tags/index.md","hash":"7e3269b449b91de061baff0a77765ddf7067b6eb","modified":1517752245000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"dc6bcc75f2d790aa291cdf54ae127a4a10bc75a5","modified":1517285597000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"792b4e3c3544d51164e8a414219dc1b388dc65dc","modified":1517285597000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1517285597000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1517285597000},{"_id":"themes/next/.github/stale.yml","hash":"1bbdd20d025010ec57225712be82988a26485836","modified":1517285597000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"4c8267e33fe7ffc524f936ee0099f5f695dbb2d1","modified":1517285597000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1517285597000},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1517285597000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1517285597000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1517285597000},{"_id":"themes/next/docs/MATH.md","hash":"63b8d1ecf7bd67d1e83f0ff3ef6c9de9fea971d3","modified":1517285597000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1517285597000},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1517285597000},{"_id":"themes/next/languages/_en.yml","hash":"285370f53786c536e8a21a396a59d7b5fb506bbf","modified":1517285597000},{"_id":"themes/next/languages/fr.yml","hash":"d3795a581c4d699a1ec1744bbcd053e203003f54","modified":1517285597000},{"_id":"themes/next/languages/de.yml","hash":"dbf375a056b235f56b4c717c093596e4099f8061","modified":1517285597000},{"_id":"themes/next/languages/ja.yml","hash":"efc71eb17e54d6bfa828fd8219a13b971d15905a","modified":1517285597000},{"_id":"themes/next/languages/it.yml","hash":"76e6e2eb47256452c9ba59fd6d7209515724e36c","modified":1517285597000},{"_id":"themes/next/languages/ko.yml","hash":"a799b84d4dfb0ac9559208676a30879fcb2c20d3","modified":1517285597000},{"_id":"themes/next/languages/pt-BR.yml","hash":"e5d19c4ddffe9c770d106a4e0ffc2dc643e7f6d2","modified":1517285597000},{"_id":"themes/next/languages/nl.yml","hash":"f05bb96a919e109a865ca5e1a3ac94db96a5db60","modified":1517285597000},{"_id":"themes/next/languages/pt.yml","hash":"272815bea0de47d2d7f77e0846cee05fe3569423","modified":1517285597000},{"_id":"themes/next/languages/ru.yml","hash":"063bc77639364f5f2f0bfb4e46d7db1256663c27","modified":1517285597000},{"_id":"themes/next/languages/zh-HK.yml","hash":"9a51892c195d5139a0144baca34d3375d66f23a3","modified":1517285597000},{"_id":"themes/next/languages/zh-CN.yml","hash":"dce2ffd1cca39451a9bad8ed234f065e2141e13f","modified":1517285597000},{"_id":"themes/next/languages/vi.yml","hash":"61048c4d4c50bf7c1af59f3100b4736c7012f95a","modified":1517285597000},{"_id":"themes/next/languages/zh-TW.yml","hash":"382f8a7b99a8e765cf000d3c7dcb6b5d5aaea69a","modified":1517285597000},{"_id":"themes/next/layout/_layout.swig","hash":"2688b61f5bd83fa2b8e92bb5000391e450aab976","modified":1517285597000},{"_id":"themes/next/layout/.DS_Store","hash":"7c34563a14353f63079e139cbe2221b92dd3f702","modified":1521873366000},{"_id":"themes/next/layout/archive.swig","hash":"833a2213d31be45a12b8e4e5e609073978bd251b","modified":1517285597000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1517285597000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1517285597000},{"_id":"themes/next/layout/page.swig","hash":"e17757096eb878f1e9c34c567d7898a37305c302","modified":1517285597000},{"_id":"themes/next/layout/post.swig","hash":"8e2d079b46076996cc9343213d5bf7da8178d32d","modified":1517285597000},{"_id":"themes/next/scripts/merge-configs.js","hash":"ca9845dc76f5710b4c6fba5fe25ff0d2fcf0adaa","modified":1517285597000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1517285597000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1517285597000},{"_id":"themes/next/languages/id.yml","hash":"b1ac9b0268067f3399a12d15ffca99d35a21dea3","modified":1517285597000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1517285597000},{"_id":"themes/next/scripts/.DS_Store","hash":"a4082bf1634e81844128758c32d1b526cd67739d","modified":1518404034000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1517285597000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1517285597000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1517285597000},{"_id":"source/images/avatar.png","hash":"761e604588581a21f45281797092c7b0f56628a5","modified":1517751628000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517285597000},{"_id":"source/_posts/wiki/博客自启动.md","hash":"838dbdabef6b049238c250e2bf751d7d78723bff","modified":1519483145000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1517285597000},{"_id":"themes/next/docs/ru/README.md","hash":"ce63302a8c224ea845fd078fc6323f65c9c9ebce","modified":1517285597000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1517285597000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1517285597000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1517285597000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"72ec33dc26372fbc038c2465b259537034cc0c17","modified":1517285597000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"d6a6efdee5f830515c21423465646d06bef84375","modified":1517285597000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1517285597000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1517285597000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1517285597000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"af873cf9f8dae09324d556322af37452087b238a","modified":1517285597000},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1517285597000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1517285597000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"83b0242c0e2cf20959aa2845b1a14de757cd765f","modified":1517760540000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1517285597000},{"_id":"themes/next/layout/_macro/post.swig","hash":"966d73147af417ab2bfe6cf979c3939f3a45e3ba","modified":1517761026000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"aa620c582143f43ba1cb1a5e59240041a911185b","modified":1517285597000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5aa5b1cf32eadf79e36941cdf6f527a6181a0a97","modified":1521873986000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"fea45ab314b9ea23edab25c2b8620f909d856b1d","modified":1517285597000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"45717e43a1025affc6e77ebe98fd4dd5b19bb6e4","modified":1517795487000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ab12994e20edeed75b277f3e3dbba69375e52005","modified":1517285597000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1517285597000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1517285597000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1517285597000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1517285597000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1517285597000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1517285597000},{"_id":"themes/next/layout/_scripts/.DS_Store","hash":"9d462dbf84ea6230e8e25946ac7d345fbe4f5e38","modified":1518404051000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1517285597000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1517285597000},{"_id":"themes/next/layout/_third-party/.DS_Store","hash":"4c032bf2f76d0fdb9c1347b581bfdcaeb48108d3","modified":1518404718000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1517285597000},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"9db8c42369f7374ce90cfa72a84b445ccbc85c73","modified":1517285597000},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"4d0253223a10d2c6823deacc6622387f7f1e7dcc","modified":1517285597000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1517285597000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1517285597000},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1517285597000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1517285597000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1517285597000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1517285597000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1517285597000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1517285597000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1517285597000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1517285597000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1517285597000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1517285597000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1517285597000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1517285597000},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1517285597000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1517285597000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1517285597000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1517285597000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1517285597000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1517285597000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1517285597000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1517285597000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1517285597000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1517285597000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1517285597000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1517285597000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1517285597000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1517285597000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1517285597000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1517285597000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1517285597000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1517285597000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1517285597000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517285597000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517285597000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517285597000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517285597000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517285597000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517285597000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517285597000},{"_id":"themes/next/source/images/favicon.png","hash":"761e604588581a21f45281797092c7b0f56628a5","modified":1517754626000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"b8e84eb0e961a89d3f662081c7511a5b8da3aabf","modified":1517285597000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1517285597000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"73bc6d683f0e0203e24e388930f5abbdc6a64a41","modified":1517285597000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1517285597000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1517285597000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1517285597000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1517285597000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1517285597000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1517285597000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1517285597000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1517285597000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1517285597000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1517285597000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1517285597000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1517285597000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1517285597000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1517285597000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1517285597000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1517285597000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1517285597000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1517285597000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1517285597000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1517285597000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1517285597000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1517285597000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1517285597000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1517285597000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"2fbee33a4ccd7c8217c73e85a9a1488170e05629","modified":1517285597000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1517285597000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1517285597000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1517285597000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1517285597000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1517285597000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1517285597000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1517285597000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1517285597000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"011ae6303afacddabc4ddf570fe3dd227569cd4f","modified":1517285597000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1517285597000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1517285597000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"e72ee2d03e991a6229cabe92a09f88ca780551e8","modified":1518404812000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1517285597000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1517285597000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1517285597000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1517285597000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1517285597000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1517285597000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1517285597000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"32392d213f5d05bc26b2dc452f2fc6fea9d44f6d","modified":1517285597000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"2a479f5ed8350e0155948130aeabd83b88886a61","modified":1517285597000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1517285597000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1517285597000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"531cdedd7fbe8cb1dab2e4328774a9f6b15b59da","modified":1517285597000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1517285597000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1517285597000},{"_id":"themes/next/source/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1517285597000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1517285597000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1517285597000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1517285597000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1517285597000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1517285597000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1517285597000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1517285597000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1517285597000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1517285597000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1517285597000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1517285597000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1517285597000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1517285597000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1517285597000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1517285597000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1517285597000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1517285597000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1517285597000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1517285597000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1517285597000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1517285597000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"dbff05af5e3a7c4f0889cdcc9027f882a246aa68","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1517285597000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1517285597000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1517285597000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1517285597000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1517285597000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1517285597000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1517285597000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1517285597000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1517285597000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ce77b4ff598c10aca5687e9a65387ae74684632e","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"381fcdefb6493978d18618afdd7322e0a39decdc","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"316789385aaac5cc9d7f66816874454a601aba65","modified":1517757063000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"5d15cc8bbefe44c77a9b9f96bf04a6033a4b35b8","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"72f7b47e55323eee056dc64f292888f1df9ecbc6","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"96326454eb7c7a3ec38d20294c94c4cc63f16ebe","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1517285597000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1517285597000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1517285597000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1517285597000},{"_id":"source/_posts/Git/修改Github项目的语言分类.md","hash":"c904f3542998099ed2d141c1dae50cb844eb83f7","modified":1521872292000},{"_id":"source/_posts/Hexo博客/Hexo博客Next主题配置.md","hash":"b51a5072774f4dcb72b4d2e664eda571d9f07154","modified":1519096962000},{"_id":"source/_posts/Hexo博客/个人博客Hexo搭建.md","hash":"5bc627cd2f9fbd5bd1b616dac3bec25407323ff2","modified":1520689411000},{"_id":"source/_posts/Hexo博客/博客自启动.md","hash":"838dbdabef6b049238c250e2bf751d7d78723bff","modified":1519483145000},{"_id":"source/_posts/Hexo博客/如何让谷歌和百度搜索到自己的博客.md","hash":"40b55d3573eb482d16eee7e27defb40cc31f6c78","modified":1520689400000},{"_id":"source/_posts/Hexo博客/给自己的网站加上HTTPS.md","hash":"312db0d55618b2c51048c21e24ff43b5e3908eab","modified":1519096980000},{"_id":"source/_posts/Hexo博客/自动将更新部署到VPS.md","hash":"9138961fd734586a4241ae5e4121d4114935091b","modified":1520689388000},{"_id":"source/_posts/奇技淫巧/搭建临时邮箱.md","hash":"1e7e53f4f2d3e50cb20f93d17a5521e6db16f612","modified":1521853111000},{"_id":"source/_posts/读书笔记/Extreme Programming explained读书笔记.md","hash":"cfb7ce47b66cf01429ac719fdc20a30175ef98d4","modified":1521872712000},{"_id":"source/_posts/读书笔记/Scrum要素读书笔记.md","hash":"7452ea70abe62554670537a5eb1c9770b3e9d9cb","modified":1521872741000},{"_id":"source/_posts/学习/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1521872378000}],"Category":[{"name":"Hexo博客","_id":"cjf4ywks70005vfy6iftdpdnz"},{"name":"SEO优化","_id":"cjf4ywksd000avfy6bugtydeg"},{"name":"VPS","_id":"cjf4ywksh000fvfy6agshzel7"},{"name":"Git","_id":"cjf4ywksk000kvfy6k5owedys"},{"name":"wiki","_id":"cjf4zeubn000ewoy6hhiu7cbw"},{"name":"Git","parent":"cjf4zeubn000ewoy6hhiu7cbw","_id":"cjf4zeubo000fwoy6aa1gnzrz"},{"name":"读书笔记","_id":"cjf4zpvr1001gwoy6churmaph"}],"Data":[],"Page":[{"layout":"false","_content":"8YfOCXx3UC","source":"baidu_verify_8YfOCXx3UC.html","raw":"layout: false\n---\n8YfOCXx3UC","date":"2018-02-10T13:09:32.000Z","updated":"2018-02-10T13:09:32.000Z","path":"baidu_verify_8YfOCXx3UC.html","title":"","comments":1,"_id":"cjf4ywkqg0000vfy6mvia7rqf","content":"8YfOCXx3UC","site":{"data":{}},"excerpt":"","more":"8YfOCXx3UC"},{"layout":"about","title":"关于","date":"2018-02-04T14:03:53.000Z","_content":"\n# 关于我\n\n*   姓名： 严顺宽\n*   性别： 男\n*   技能： 熟悉 Java 开发、 Java web开发\n*   现状： 目前是 [南京大学软件学院][1] 17级硕士生\n\n# 联系我\n\n如果有志同道合的小伙伴，想交流一下，欢迎联系！\n\n*   <span class=\"fa fa-envelope\"></span>&nbsp;&nbsp;邮箱：shunkuan.ysk@gmail.com\n*   <span class=\"fa fa-qq\"></span>&nbsp;&nbsp;企鹅：1195413185\n*   <span class=\"fa fa-wechat\"></span>&nbsp;微信：shunkuan-Yan\n\n# 关于博客\n\n博客创建于2018年02月04日，前一段时间突然对VPS很感兴趣，折腾了几个月后终于买下了自己的VPS。最近又开始想自己折腾一个博客来玩玩，顺便记录记录平时的笔记什么的\n博客采用 [Hexo][3] + Git 搭建，使用 [Next][4] 主题，托管在 [搬瓦工VPS][2]，折腾了近2天完成的博客的雏形\n\n> [个人博客Hexo搭建][5]\n\n\n感谢：\n\n> [Hexo][] 提供博客框架\n> [Next][] 提供博客主题\n> [百度统计][] 提供统计功能\n> [Google Analytics][] 提供 Google 分析\n> [Disqus][] 提供评论服务\n> [不蒜子][] 提供站点计数功能【总访问量，单页面访问量】\n\n---\n\n[Hexo]: https://hexo.io/zh-cn/ \"Hexo\"\n[Next]: http://theme-next.iissnan.com/ \"Next\"\n[百度统计]: http://tongji.baidu.com/ \"百度统计\"\n[Google Analytics]: https://www.google.com/intl/zh-CN/analytics/ \"Google Analytics\"\n[Disqus]: https://disqus.com/ \"Disqus\"\n[不蒜子]: http://ibruce.info/2015/04/04/busuanzi/ \"不蒜子\"\n[1]: http://software.nju.edu.cn/ \"南京大学软件学院\"\n[2]: https://bwh1.net/aff.php?aff=29080 \"搬瓦工VPS\"\n[3]: https://hexo.io/zh-cn/docs/ \"Hexo 中文文档\"\n[4]: http://theme-next.iissnan.com/ \"Next主题中文文档\"\n[5]: https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/ \"个人博客Hexo搭建\"\n\n","source":"about/index.md","raw":"---\nlayout: about\ntitle: 关于\ndate: 2018-02-04 22:03:53\n---\n\n# 关于我\n\n*   姓名： 严顺宽\n*   性别： 男\n*   技能： 熟悉 Java 开发、 Java web开发\n*   现状： 目前是 [南京大学软件学院][1] 17级硕士生\n\n# 联系我\n\n如果有志同道合的小伙伴，想交流一下，欢迎联系！\n\n*   <span class=\"fa fa-envelope\"></span>&nbsp;&nbsp;邮箱：shunkuan.ysk@gmail.com\n*   <span class=\"fa fa-qq\"></span>&nbsp;&nbsp;企鹅：1195413185\n*   <span class=\"fa fa-wechat\"></span>&nbsp;微信：shunkuan-Yan\n\n# 关于博客\n\n博客创建于2018年02月04日，前一段时间突然对VPS很感兴趣，折腾了几个月后终于买下了自己的VPS。最近又开始想自己折腾一个博客来玩玩，顺便记录记录平时的笔记什么的\n博客采用 [Hexo][3] + Git 搭建，使用 [Next][4] 主题，托管在 [搬瓦工VPS][2]，折腾了近2天完成的博客的雏形\n\n> [个人博客Hexo搭建][5]\n\n\n感谢：\n\n> [Hexo][] 提供博客框架\n> [Next][] 提供博客主题\n> [百度统计][] 提供统计功能\n> [Google Analytics][] 提供 Google 分析\n> [Disqus][] 提供评论服务\n> [不蒜子][] 提供站点计数功能【总访问量，单页面访问量】\n\n---\n\n[Hexo]: https://hexo.io/zh-cn/ \"Hexo\"\n[Next]: http://theme-next.iissnan.com/ \"Next\"\n[百度统计]: http://tongji.baidu.com/ \"百度统计\"\n[Google Analytics]: https://www.google.com/intl/zh-CN/analytics/ \"Google Analytics\"\n[Disqus]: https://disqus.com/ \"Disqus\"\n[不蒜子]: http://ibruce.info/2015/04/04/busuanzi/ \"不蒜子\"\n[1]: http://software.nju.edu.cn/ \"南京大学软件学院\"\n[2]: https://bwh1.net/aff.php?aff=29080 \"搬瓦工VPS\"\n[3]: https://hexo.io/zh-cn/docs/ \"Hexo 中文文档\"\n[4]: http://theme-next.iissnan.com/ \"Next主题中文文档\"\n[5]: https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/ \"个人博客Hexo搭建\"\n\n","updated":"2018-03-24T00:59:28.000Z","path":"about/index.html","comments":1,"_id":"cjf4ywks30002vfy6qa6hnnff","content":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><ul>\n<li>姓名： 严顺宽</li>\n<li>性别： 男</li>\n<li>技能： 熟悉 Java 开发、 Java web开发</li>\n<li>现状： 目前是 <a href=\"http://software.nju.edu.cn/\" title=\"南京大学软件学院\" target=\"_blank\" rel=\"noopener\">南京大学软件学院</a> 17级硕士生</li>\n</ul>\n<h1 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h1><p>如果有志同道合的小伙伴，想交流一下，欢迎联系！</p>\n<ul>\n<li><span class=\"fa fa-envelope\"></span>&nbsp;&nbsp;邮箱：shunkuan.ysk@gmail.com</li>\n<li><span class=\"fa fa-qq\"></span>&nbsp;&nbsp;企鹅：1195413185</li>\n<li><span class=\"fa fa-wechat\"></span>&nbsp;微信：shunkuan-Yan</li>\n</ul>\n<h1 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h1><p>博客创建于2018年02月04日，前一段时间突然对VPS很感兴趣，折腾了几个月后终于买下了自己的VPS。最近又开始想自己折腾一个博客来玩玩，顺便记录记录平时的笔记什么的<br>博客采用 <a href=\"https://hexo.io/zh-cn/docs/\" title=\"Hexo 中文文档\" target=\"_blank\" rel=\"noopener\">Hexo</a> + Git 搭建，使用 <a href=\"http://theme-next.iissnan.com/\" title=\"Next主题中文文档\" target=\"_blank\" rel=\"noopener\">Next</a> 主题，托管在 <a href=\"https://bwh1.net/aff.php?aff=29080\" title=\"搬瓦工VPS\" target=\"_blank\" rel=\"noopener\">搬瓦工VPS</a>，折腾了近2天完成的博客的雏形</p>\n<blockquote>\n<p><a href=\"https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/\" title=\"个人博客Hexo搭建\">个人博客Hexo搭建</a></p>\n</blockquote>\n<p>感谢：</p>\n<blockquote>\n<p><a href=\"https://hexo.io/zh-cn/\" title=\"Hexo\" target=\"_blank\" rel=\"noopener\">Hexo</a> 提供博客框架<br><a href=\"http://theme-next.iissnan.com/\" title=\"Next\" target=\"_blank\" rel=\"noopener\">Next</a> 提供博客主题<br><a href=\"http://tongji.baidu.com/\" title=\"百度统计\" target=\"_blank\" rel=\"noopener\">百度统计</a> 提供统计功能<br><a href=\"https://www.google.com/intl/zh-CN/analytics/\" title=\"Google Analytics\" target=\"_blank\" rel=\"noopener\">Google Analytics</a> 提供 Google 分析<br><a href=\"https://disqus.com/\" title=\"Disqus\" target=\"_blank\" rel=\"noopener\">Disqus</a> 提供评论服务<br><a href=\"http://ibruce.info/2015/04/04/busuanzi/\" title=\"不蒜子\" target=\"_blank\" rel=\"noopener\">不蒜子</a> 提供站点计数功能【总访问量，单页面访问量】</p>\n</blockquote>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><ul>\n<li>姓名： 严顺宽</li>\n<li>性别： 男</li>\n<li>技能： 熟悉 Java 开发、 Java web开发</li>\n<li>现状： 目前是 <a href=\"http://software.nju.edu.cn/\" title=\"南京大学软件学院\" target=\"_blank\" rel=\"noopener\">南京大学软件学院</a> 17级硕士生</li>\n</ul>\n<h1 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h1><p>如果有志同道合的小伙伴，想交流一下，欢迎联系！</p>\n<ul>\n<li><span class=\"fa fa-envelope\"></span>&nbsp;&nbsp;邮箱：shunkuan.ysk@gmail.com</li>\n<li><span class=\"fa fa-qq\"></span>&nbsp;&nbsp;企鹅：1195413185</li>\n<li><span class=\"fa fa-wechat\"></span>&nbsp;微信：shunkuan-Yan</li>\n</ul>\n<h1 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h1><p>博客创建于2018年02月04日，前一段时间突然对VPS很感兴趣，折腾了几个月后终于买下了自己的VPS。最近又开始想自己折腾一个博客来玩玩，顺便记录记录平时的笔记什么的<br>博客采用 <a href=\"https://hexo.io/zh-cn/docs/\" title=\"Hexo 中文文档\" target=\"_blank\" rel=\"noopener\">Hexo</a> + Git 搭建，使用 <a href=\"http://theme-next.iissnan.com/\" title=\"Next主题中文文档\" target=\"_blank\" rel=\"noopener\">Next</a> 主题，托管在 <a href=\"https://bwh1.net/aff.php?aff=29080\" title=\"搬瓦工VPS\" target=\"_blank\" rel=\"noopener\">搬瓦工VPS</a>，折腾了近2天完成的博客的雏形</p>\n<blockquote>\n<p><a href=\"https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/\" title=\"个人博客Hexo搭建\">个人博客Hexo搭建</a></p>\n</blockquote>\n<p>感谢：</p>\n<blockquote>\n<p><a href=\"https://hexo.io/zh-cn/\" title=\"Hexo\" target=\"_blank\" rel=\"noopener\">Hexo</a> 提供博客框架<br><a href=\"http://theme-next.iissnan.com/\" title=\"Next\" target=\"_blank\" rel=\"noopener\">Next</a> 提供博客主题<br><a href=\"http://tongji.baidu.com/\" title=\"百度统计\" target=\"_blank\" rel=\"noopener\">百度统计</a> 提供统计功能<br><a href=\"https://www.google.com/intl/zh-CN/analytics/\" title=\"Google Analytics\" target=\"_blank\" rel=\"noopener\">Google Analytics</a> 提供 Google 分析<br><a href=\"https://disqus.com/\" title=\"Disqus\" target=\"_blank\" rel=\"noopener\">Disqus</a> 提供评论服务<br><a href=\"http://ibruce.info/2015/04/04/busuanzi/\" title=\"不蒜子\" target=\"_blank\" rel=\"noopener\">不蒜子</a> 提供站点计数功能【总访问量，单页面访问量】</p>\n</blockquote>\n<hr>\n"},{"title":"分类","date":"2018-02-04T13:33:54.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-02-04 21:33:54\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-02-04T13:53:21.000Z","path":"categories/index.html","layout":"page","_id":"cjf4ywks60004vfy6uveh21u7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-02-04T13:33:54.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-02-04 21:33:54\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-02-04T13:50:45.000Z","path":"tags/index.html","layout":"page","_id":"cjf4ywkxu001fvfy67yxsfxio","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hexo博客Next主题配置","date":"2018-02-04T02:49:21.000Z","updated":"2018-02-12T02:47:11.000Z","_content":"前面我们介绍了如何在[搬瓦工VPS][1]上[快速搭建自己的个人博客][2],不会的小伙伴赶快去学习一下\n\n其中我们也介绍了如何将`Hexo`默认的主题替换为`Next`主题，但是`Next`的原始配置还是太过简洁，看上去不尽人意\n\n因此这次我们就来学习一下如何优化`Next`的配置，丰富其功能。一起来吧~~\n\n<!-- more -->\n\n# 站点设置\n## 展示社交联系方式\n- 编辑`站点配置文件`\n- 修改`socal`字段，并注释相应的字段，修改值\n\n## 设置社交链接居中对齐\n- 修改`themes\\next\\source\\css\\_common\\components\\sidebar\\sidebar-author-links.styl`文件，添加如下样式\n```\n.links-of-author-item {\n  text-align: center;\n}\n```\n\n## 添加友链\n- 编辑`主题配置文件`\n- 添加如下内容\n```\n# title, chinese available\nlinks_title: 友情链接\n# links\nlinks:\n  百度: https://www.baidu.com/\n```\n- 修改`Blog rolls`下的`links_title`为中文\n\n## 设置友链左对齐\n- 本博客侧栏友情链接使用了与侧栏社交链接相同的css样式，但文本左对齐\n- 实现方法为：\n修改`themes\\next\\layout\\_macro\\sidebar.swig`，将如下内容\n```\n<ul class=\"links-of-blogroll-list\">\n  {% for name, link in theme.links %}\n    <li class=\"links-of-blogroll-item\">\n      <a href=\"{{ link }}\" title=\"{{ name }}\" target=\"_blank\">\n        {{ name }}\n      </a>\n    </li>\n  {% endfor %}\n</ul>\n```\n修改为\n```\n<ul class=\"links-of-blogroll-list\">\n    {% for name, link in theme.links %}\n        <span class=\"links-of-author-item\" style=\"text-align:left\">\n            <a href=\"{{ link }}\" title=\"{{ name }}\" target=\"_blank\">\n                {{ name }}\n            </a>\n        </span>\n    {% endfor %}\n</ul>\n```\n\n## SEO推广\n### sitemap\n- Sitemap用于通知搜索引擎网站上有哪些可供抓取的网页，以便搜索引擎可以更加智能地抓取网站\n- 执行命令`npm install hexo-generator-sitemap --save`和`npm install hexo-generator-baidu-sitemap --save`，安装插件，用于生成`sitemap`\n- 运行`hexo g`生成站点文件\n- 在`站点配置文件`中添加如下字段\n```\n# Sitemap Setting\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n### 添加 robots.txt\n- 文件放在站点的source文件夹下\n```\nUser-agent: *\nAllow: /\nAllow: /archives/\n\nDisallow: /js/\nDisallow: /css/\nDisallow: /fonts/\nDisallow: /lib/\nDisallow: /fancybox/\n\nSitemap: http://www.cylong.com/sitemap.xml\nSitemap: http://www.cylong.com/baidusitemap.xml\n\n```\n\n## 添加字数统计\n- 安装`hexo-wordcount`插件`npm install hexo-wordcount --save`\n- 在`站点配置文件`中开启字数统计配置\n```\n# 字数统计\nword_count: true\n```\n- 然后在`/themes/next/layout/_partials/footer.swig`文件尾部加上\n```\n<div class=\"theme-info\">\n  <div class=\"powered-by\"></div>\n  <span class=\"post-count\">博客全站共{{ totalcount(site) }}字</span>\n</div>\n```\n\n# 主题设定 \n- version: 6.0.3\n## 选择 Scheme\n- `Scheme`是`NexT`提供的一种特性\n- 借助于`Scheme`，`NexT`提供了多种不同的外观\n- 同时，几乎所有的配置都可以在`Scheme`之间共用\n- 目前`NexT`支持三种`Scheme`，他们是：\n    - `Muse` - 默认`Scheme`，这是 `NexT`最初的版本，黑白主调，大量留白\n    - `Mist` - `Muse`的紧凑版本，整洁有序的单栏外观\n    - `Pisces` - 双栏`Scheme`，小家碧玉似的清新\n- `Scheme`的切换通过更改`主题配置文件`，搜索`scheme`关键字，你会看到有三行`Scheme`的配置，将你需用启用的`scheme`前面注释`#`去除即可\n```\n# ---------------------------------------------------------------\n# Scheme Settings\n# ---------------------------------------------------------------\n\n# Schemes\n#scheme: Muse\n#scheme: Mist\nscheme: Pisces\n#scheme: Gemini\n```\n\n## 设置语言\n- 编辑`站点配置文件`，将`language`设置成你所需要的语言\n- 具体支持的语言可以查看[官网说明](http://theme-next.iissnan.com/getting-started.html#select-language)\n- 建议明确设置你所需要的语言，例如选用简体中文，配置如下\n```\nlanguage: zh-CN\n```\n\n## 设置菜单\n### 展示菜单内容\n- 菜单配置包括三个部分\n    - 第一是菜单项（名称和链接）\n    - 第二是菜单项的显示文本\n    - 第三是菜单项对应的图标。`NexT`使用的是`Font Awesome`提供的图标，`Font Awesome`提供了`600+`的图标，可以满足绝大的多数的场景，同时无须担心在`Retina`屏幕下图标模糊的问题。\n- 编辑`主题配置文件`，修改以下内容：\n    - 设定菜单内容，对应的字段是`menu`菜单内容的设置格式是：`item name: link`。其中`item name`是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译\n    ```\n    # ---------------------------------------------------------------\n    # Menu Settings\n    # ---------------------------------------------------------------\n    \n    # When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -> archives).\n    # Usage: `Key: /link/ || icon`\n    # Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.\n    # Value before `||` delimeter is the target link.\n    # Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.\n    menu:\n      home: / || home\n      archives: /archives/ || archive\n      tags: /tags/ || tags\n      categories: /categories/ || th\n      about: /about/ || user\n      #schedule: /schedule/ || calendar\n      #sitemap: /sitemap.xml || sitemap\n      #commonweal: /404/ || heartbeat\n    ```\n    - 注意：若你的站点运行在子目录中，请将链接前缀的`/`去掉\n    - `NexT`默认的菜单项有（斜体的项表示需要手动创建这个页面）\n    \n    键值 | 设定值 | 显示文本（简体中文）\n    ---|--- | ---\n    home | home: / | 主页\n    archives | archives: /archives | 归档页\n    categories | categories: /categories | *分类页*\n    tags | tags: /tags | *标签页* \n    about | about: /about | *关于页面* \n    commonweal | commonweal: /404.html | *公益 404*\n    \n    - 设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置`NexT`主题目录下的`languages/{language}.yml`（`{language}` 为你所使用的语言）\n    以简体中文为例，若你需要添加一个菜单项，比如`something`。那么就需要修改简体中文对应的翻译文`languages/zh-Hans.yml`\n\n### 添加标签页\n- 在站点`source`文件夹下，建立`tags`目录\n- 在`tags`目录中创建`index.md`，内容如下：\n```\n---\ntitle: 标签\ndate: 2018-02-04 21:33:54\ntype: \"tags\"\ncomments: false\n---\n```\n\n### 添加分类页\n- 在站点`source`文件夹下，建立`categories`目录\n- 在`categories`目录中创建`index.md`，内容如下：\n```\n---\ntitle: 分类\ndate: 2018-02-04 21:33:54\ntype: \"categories\"\ncomments: false\n---\n```\n\n### 添加关于页\n- 在站点`source`文件夹下，建立`about`目录\n- 在`about`目录中创建`index.md`，具体内容参加`github`源码\n\n## 设置侧栏\n- 默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改`主题配置文件`中的`sidebar`字段来控制侧栏的行为。\n- 侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。\n    - 设置侧栏的位置，修改`sidebar.position`的值，支持的选项有\n        - `left` - 靠左放置\n        - `right` - 靠右放置\n     ```\n     sidebar:\n        position: left\n     ```\n    - 设置侧栏显示的时机，修改`sidebar.display`的值，支持的选项有\n        - `post` - 默认行为，在文章页面（拥有目录列表）时显示\n        - `always` - 在所有页面中都显示\n        - `hide` - 在所有页面中都隐藏（可以手动展开）\n        - `remove` - 完全移除\n    ```\n    sidebar:\n        display: post\n    ```\n## 设置头像\n- 编辑`站点配置文件`， 添加字段`avatar`，值设置成头像的链接地址\n- 其中，头像的链接地址可以是：\n    - 完整的互联网 URI\n    - 站点内的地址\n        - 将头像放置主题目录下的`source/uploads/`（新建`uploads`目录若不存在），配置为：`avatar:/uploads/avatar.png`\n        - 或者 放置在 `source/images/`目录下，配置为：`avatar: /images/avatar.png`\n```\n# Avatar\navatar: /images/avatar.jpg\n```\n\n## 设置作者昵称\n- 编辑`站点配置文件`\n- 设置`author`为你的昵称\n\n## 设置站点描述\n- 编辑`站点配置文件`\n- 设置`description`为你的站点描述。站点描述可以是你喜欢的一句签名:)\n\n## 设置首页预览和阅读全文\n- 编辑`主题配置文件`\n- 设置`auto_excerpt`的配置\n```\nauto_excerpt:\n  enable: true\n  length: 300\n```\n## 关闭打开文章自动跳转到more\n- 编辑`主题配置文件`\n- 修改`scroll_to_more`值为`false`\n\n## fontawesome图标显示问题\n* 2018-02-12更新*\n今天早上打开博客发现导航的图标不能正常显示了。然而本地启动确实正常了。经过一番检查，发现是服务器上无法加载`fontawesome`的`css`。没办法，只能自己指定`fontawesome`的`css`的地址了\n\n编辑`主题配置文件`，指定`fontAwesome`的`cdn`地址\n```\nfontawesome: https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\n```\n\n# 集成第三方服务\n## 百度统计\n- 登录[百度统计](http://tongji.baidu.com/), 定位到站点的代码获取页面\n- 复制 hm.js? 后面那串统计脚本 id，如\n![image](http://theme-next.iissnan.com/uploads/five-minutes-setup/analytics-baidu-id.png)\n- 编辑`主题配置文件`，修改字段 `baidu_analytics`字段，值设置成你的百度统计脚本`id`\n\n## 谷歌统计\n- 需科学上网\n- 登录[谷歌统计](https://www.google.com/intl/zh-CN/analytics/)， 定位到管理页面\n- 创建新的媒体资源，获取跟踪`id`\n- 编辑`主题配置文件`，添加字段 `google_analytics`字段，值设置成你的谷歌统计跟踪`id`\n\n## 集成Disqus评论\n- 注册登陆[Disqus](https://disqus.com/)\n- 点击`Admin`进入管理页面\n- 选择第二个`I want to install Disqus on my site`\n- 按照表单填写信息，记住`Website Name`这条属性，配置文件中需要用到\n- 接下来按照指引填写信息（基本都是默认就行）\n- 安装过程中会出现下面页面，这里面会有disqus在不同博客系统上或者其他系统上对应的代码。因为hexo自带支持disqus，所以不需要这里面的代码，这个页面的内容会在其他除hexo之外的博客系统中用到，如果是hexo搭建博客disqus，可以跳过\n![image](http://img.blog.csdn.net/20160220003532601)\n- 接下来配置主题下面的`config.yml`文件\n```\n# Disqus\ndisqus:\n  enable: true\n  shortname: winsky #就是前面填写的Website Name属性\n  count: true\n  lazyload: false\n```\n\n## 不蒜子\n- 编辑`主题配置文件`中的`busuanzi_count`的配置项\n```\nbusuanzi_count:\n  # count values only if the other configs are false\n  enable: true\n  # custom uv span for the whole site\n  site_uv: true\n  site_uv_header: <i class=\"fa fa-user\"></i>\n  site_uv_footer: 人\n  # custom pv span for the whole site\n  site_pv: true\n  site_pv_header: <i class=\"fa fa-eye\"></i>\n  site_pv_footer: 次\n  # custom pv span for one page only\n  page_pv: true\n  page_pv_header: <i class=\"fa fa-file-o\"></i>\n  page_pv_footer:\n```\n> [不蒜子][]\n\n# 参考文章\n> [next中文手册](http://theme-next.iissnan.com/)\n\n> [Hexo+nexT主题搭建个人博客](http://www.wuxubj.cn/2016/08/Hexo-nexT-build-personal-blog/)\n\n> [为Hexo NexT主题添加字数统计功能](https://eason-yang.com/2016/11/05/add-word-count-to-hexo-next/)\n\n> [Github 搭建 hexo （四）——更换主题，disqus，RSS](http://blog.csdn.net/u010053344/article/details/50701191)\n\n\n[1]: https://bwh1.net/aff.php?aff=24742 \"搬瓦工VPS\"\n[2]: https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/ \"快速搭建自己的个人博客\"\n[不蒜子]: http://ibruce.info/2015/04/04/busuanzi/ \"不蒜子\"","source":"_posts/Hexo博客/Hexo博客Next主题配置.md","raw":"---\ntitle: Hexo博客Next主题配置\ndate: 2018-02-04 10:49:21\nupdated: 2018-02-12 10:47:11\ntags:\n  - HEXO\n  - Next\n  - 博客\ncategories: \n  - Hexo博客\n---\n前面我们介绍了如何在[搬瓦工VPS][1]上[快速搭建自己的个人博客][2],不会的小伙伴赶快去学习一下\n\n其中我们也介绍了如何将`Hexo`默认的主题替换为`Next`主题，但是`Next`的原始配置还是太过简洁，看上去不尽人意\n\n因此这次我们就来学习一下如何优化`Next`的配置，丰富其功能。一起来吧~~\n\n<!-- more -->\n\n# 站点设置\n## 展示社交联系方式\n- 编辑`站点配置文件`\n- 修改`socal`字段，并注释相应的字段，修改值\n\n## 设置社交链接居中对齐\n- 修改`themes\\next\\source\\css\\_common\\components\\sidebar\\sidebar-author-links.styl`文件，添加如下样式\n```\n.links-of-author-item {\n  text-align: center;\n}\n```\n\n## 添加友链\n- 编辑`主题配置文件`\n- 添加如下内容\n```\n# title, chinese available\nlinks_title: 友情链接\n# links\nlinks:\n  百度: https://www.baidu.com/\n```\n- 修改`Blog rolls`下的`links_title`为中文\n\n## 设置友链左对齐\n- 本博客侧栏友情链接使用了与侧栏社交链接相同的css样式，但文本左对齐\n- 实现方法为：\n修改`themes\\next\\layout\\_macro\\sidebar.swig`，将如下内容\n```\n<ul class=\"links-of-blogroll-list\">\n  {% for name, link in theme.links %}\n    <li class=\"links-of-blogroll-item\">\n      <a href=\"{{ link }}\" title=\"{{ name }}\" target=\"_blank\">\n        {{ name }}\n      </a>\n    </li>\n  {% endfor %}\n</ul>\n```\n修改为\n```\n<ul class=\"links-of-blogroll-list\">\n    {% for name, link in theme.links %}\n        <span class=\"links-of-author-item\" style=\"text-align:left\">\n            <a href=\"{{ link }}\" title=\"{{ name }}\" target=\"_blank\">\n                {{ name }}\n            </a>\n        </span>\n    {% endfor %}\n</ul>\n```\n\n## SEO推广\n### sitemap\n- Sitemap用于通知搜索引擎网站上有哪些可供抓取的网页，以便搜索引擎可以更加智能地抓取网站\n- 执行命令`npm install hexo-generator-sitemap --save`和`npm install hexo-generator-baidu-sitemap --save`，安装插件，用于生成`sitemap`\n- 运行`hexo g`生成站点文件\n- 在`站点配置文件`中添加如下字段\n```\n# Sitemap Setting\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n### 添加 robots.txt\n- 文件放在站点的source文件夹下\n```\nUser-agent: *\nAllow: /\nAllow: /archives/\n\nDisallow: /js/\nDisallow: /css/\nDisallow: /fonts/\nDisallow: /lib/\nDisallow: /fancybox/\n\nSitemap: http://www.cylong.com/sitemap.xml\nSitemap: http://www.cylong.com/baidusitemap.xml\n\n```\n\n## 添加字数统计\n- 安装`hexo-wordcount`插件`npm install hexo-wordcount --save`\n- 在`站点配置文件`中开启字数统计配置\n```\n# 字数统计\nword_count: true\n```\n- 然后在`/themes/next/layout/_partials/footer.swig`文件尾部加上\n```\n<div class=\"theme-info\">\n  <div class=\"powered-by\"></div>\n  <span class=\"post-count\">博客全站共{{ totalcount(site) }}字</span>\n</div>\n```\n\n# 主题设定 \n- version: 6.0.3\n## 选择 Scheme\n- `Scheme`是`NexT`提供的一种特性\n- 借助于`Scheme`，`NexT`提供了多种不同的外观\n- 同时，几乎所有的配置都可以在`Scheme`之间共用\n- 目前`NexT`支持三种`Scheme`，他们是：\n    - `Muse` - 默认`Scheme`，这是 `NexT`最初的版本，黑白主调，大量留白\n    - `Mist` - `Muse`的紧凑版本，整洁有序的单栏外观\n    - `Pisces` - 双栏`Scheme`，小家碧玉似的清新\n- `Scheme`的切换通过更改`主题配置文件`，搜索`scheme`关键字，你会看到有三行`Scheme`的配置，将你需用启用的`scheme`前面注释`#`去除即可\n```\n# ---------------------------------------------------------------\n# Scheme Settings\n# ---------------------------------------------------------------\n\n# Schemes\n#scheme: Muse\n#scheme: Mist\nscheme: Pisces\n#scheme: Gemini\n```\n\n## 设置语言\n- 编辑`站点配置文件`，将`language`设置成你所需要的语言\n- 具体支持的语言可以查看[官网说明](http://theme-next.iissnan.com/getting-started.html#select-language)\n- 建议明确设置你所需要的语言，例如选用简体中文，配置如下\n```\nlanguage: zh-CN\n```\n\n## 设置菜单\n### 展示菜单内容\n- 菜单配置包括三个部分\n    - 第一是菜单项（名称和链接）\n    - 第二是菜单项的显示文本\n    - 第三是菜单项对应的图标。`NexT`使用的是`Font Awesome`提供的图标，`Font Awesome`提供了`600+`的图标，可以满足绝大的多数的场景，同时无须担心在`Retina`屏幕下图标模糊的问题。\n- 编辑`主题配置文件`，修改以下内容：\n    - 设定菜单内容，对应的字段是`menu`菜单内容的设置格式是：`item name: link`。其中`item name`是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译\n    ```\n    # ---------------------------------------------------------------\n    # Menu Settings\n    # ---------------------------------------------------------------\n    \n    # When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -> archives).\n    # Usage: `Key: /link/ || icon`\n    # Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.\n    # Value before `||` delimeter is the target link.\n    # Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.\n    menu:\n      home: / || home\n      archives: /archives/ || archive\n      tags: /tags/ || tags\n      categories: /categories/ || th\n      about: /about/ || user\n      #schedule: /schedule/ || calendar\n      #sitemap: /sitemap.xml || sitemap\n      #commonweal: /404/ || heartbeat\n    ```\n    - 注意：若你的站点运行在子目录中，请将链接前缀的`/`去掉\n    - `NexT`默认的菜单项有（斜体的项表示需要手动创建这个页面）\n    \n    键值 | 设定值 | 显示文本（简体中文）\n    ---|--- | ---\n    home | home: / | 主页\n    archives | archives: /archives | 归档页\n    categories | categories: /categories | *分类页*\n    tags | tags: /tags | *标签页* \n    about | about: /about | *关于页面* \n    commonweal | commonweal: /404.html | *公益 404*\n    \n    - 设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置`NexT`主题目录下的`languages/{language}.yml`（`{language}` 为你所使用的语言）\n    以简体中文为例，若你需要添加一个菜单项，比如`something`。那么就需要修改简体中文对应的翻译文`languages/zh-Hans.yml`\n\n### 添加标签页\n- 在站点`source`文件夹下，建立`tags`目录\n- 在`tags`目录中创建`index.md`，内容如下：\n```\n---\ntitle: 标签\ndate: 2018-02-04 21:33:54\ntype: \"tags\"\ncomments: false\n---\n```\n\n### 添加分类页\n- 在站点`source`文件夹下，建立`categories`目录\n- 在`categories`目录中创建`index.md`，内容如下：\n```\n---\ntitle: 分类\ndate: 2018-02-04 21:33:54\ntype: \"categories\"\ncomments: false\n---\n```\n\n### 添加关于页\n- 在站点`source`文件夹下，建立`about`目录\n- 在`about`目录中创建`index.md`，具体内容参加`github`源码\n\n## 设置侧栏\n- 默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改`主题配置文件`中的`sidebar`字段来控制侧栏的行为。\n- 侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。\n    - 设置侧栏的位置，修改`sidebar.position`的值，支持的选项有\n        - `left` - 靠左放置\n        - `right` - 靠右放置\n     ```\n     sidebar:\n        position: left\n     ```\n    - 设置侧栏显示的时机，修改`sidebar.display`的值，支持的选项有\n        - `post` - 默认行为，在文章页面（拥有目录列表）时显示\n        - `always` - 在所有页面中都显示\n        - `hide` - 在所有页面中都隐藏（可以手动展开）\n        - `remove` - 完全移除\n    ```\n    sidebar:\n        display: post\n    ```\n## 设置头像\n- 编辑`站点配置文件`， 添加字段`avatar`，值设置成头像的链接地址\n- 其中，头像的链接地址可以是：\n    - 完整的互联网 URI\n    - 站点内的地址\n        - 将头像放置主题目录下的`source/uploads/`（新建`uploads`目录若不存在），配置为：`avatar:/uploads/avatar.png`\n        - 或者 放置在 `source/images/`目录下，配置为：`avatar: /images/avatar.png`\n```\n# Avatar\navatar: /images/avatar.jpg\n```\n\n## 设置作者昵称\n- 编辑`站点配置文件`\n- 设置`author`为你的昵称\n\n## 设置站点描述\n- 编辑`站点配置文件`\n- 设置`description`为你的站点描述。站点描述可以是你喜欢的一句签名:)\n\n## 设置首页预览和阅读全文\n- 编辑`主题配置文件`\n- 设置`auto_excerpt`的配置\n```\nauto_excerpt:\n  enable: true\n  length: 300\n```\n## 关闭打开文章自动跳转到more\n- 编辑`主题配置文件`\n- 修改`scroll_to_more`值为`false`\n\n## fontawesome图标显示问题\n* 2018-02-12更新*\n今天早上打开博客发现导航的图标不能正常显示了。然而本地启动确实正常了。经过一番检查，发现是服务器上无法加载`fontawesome`的`css`。没办法，只能自己指定`fontawesome`的`css`的地址了\n\n编辑`主题配置文件`，指定`fontAwesome`的`cdn`地址\n```\nfontawesome: https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\n```\n\n# 集成第三方服务\n## 百度统计\n- 登录[百度统计](http://tongji.baidu.com/), 定位到站点的代码获取页面\n- 复制 hm.js? 后面那串统计脚本 id，如\n![image](http://theme-next.iissnan.com/uploads/five-minutes-setup/analytics-baidu-id.png)\n- 编辑`主题配置文件`，修改字段 `baidu_analytics`字段，值设置成你的百度统计脚本`id`\n\n## 谷歌统计\n- 需科学上网\n- 登录[谷歌统计](https://www.google.com/intl/zh-CN/analytics/)， 定位到管理页面\n- 创建新的媒体资源，获取跟踪`id`\n- 编辑`主题配置文件`，添加字段 `google_analytics`字段，值设置成你的谷歌统计跟踪`id`\n\n## 集成Disqus评论\n- 注册登陆[Disqus](https://disqus.com/)\n- 点击`Admin`进入管理页面\n- 选择第二个`I want to install Disqus on my site`\n- 按照表单填写信息，记住`Website Name`这条属性，配置文件中需要用到\n- 接下来按照指引填写信息（基本都是默认就行）\n- 安装过程中会出现下面页面，这里面会有disqus在不同博客系统上或者其他系统上对应的代码。因为hexo自带支持disqus，所以不需要这里面的代码，这个页面的内容会在其他除hexo之外的博客系统中用到，如果是hexo搭建博客disqus，可以跳过\n![image](http://img.blog.csdn.net/20160220003532601)\n- 接下来配置主题下面的`config.yml`文件\n```\n# Disqus\ndisqus:\n  enable: true\n  shortname: winsky #就是前面填写的Website Name属性\n  count: true\n  lazyload: false\n```\n\n## 不蒜子\n- 编辑`主题配置文件`中的`busuanzi_count`的配置项\n```\nbusuanzi_count:\n  # count values only if the other configs are false\n  enable: true\n  # custom uv span for the whole site\n  site_uv: true\n  site_uv_header: <i class=\"fa fa-user\"></i>\n  site_uv_footer: 人\n  # custom pv span for the whole site\n  site_pv: true\n  site_pv_header: <i class=\"fa fa-eye\"></i>\n  site_pv_footer: 次\n  # custom pv span for one page only\n  page_pv: true\n  page_pv_header: <i class=\"fa fa-file-o\"></i>\n  page_pv_footer:\n```\n> [不蒜子][]\n\n# 参考文章\n> [next中文手册](http://theme-next.iissnan.com/)\n\n> [Hexo+nexT主题搭建个人博客](http://www.wuxubj.cn/2016/08/Hexo-nexT-build-personal-blog/)\n\n> [为Hexo NexT主题添加字数统计功能](https://eason-yang.com/2016/11/05/add-word-count-to-hexo-next/)\n\n> [Github 搭建 hexo （四）——更换主题，disqus，RSS](http://blog.csdn.net/u010053344/article/details/50701191)\n\n\n[1]: https://bwh1.net/aff.php?aff=24742 \"搬瓦工VPS\"\n[2]: https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/ \"快速搭建自己的个人博客\"\n[不蒜子]: http://ibruce.info/2015/04/04/busuanzi/ \"不蒜子\"","slug":"Hexo博客/Hexo博客Next主题配置","published":1,"_id":"cjf4zd2y30004woy61uw1n9ux","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前面我们介绍了如何在<a href=\"https://bwh1.net/aff.php?aff=24742\" title=\"搬瓦工VPS\" target=\"_blank\" rel=\"noopener\">搬瓦工VPS</a>上<a href=\"https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/\" title=\"快速搭建自己的个人博客\">快速搭建自己的个人博客</a>,不会的小伙伴赶快去学习一下</p>\n<p>其中我们也介绍了如何将<code>Hexo</code>默认的主题替换为<code>Next</code>主题，但是<code>Next</code>的原始配置还是太过简洁，看上去不尽人意</p>\n<p>因此这次我们就来学习一下如何优化<code>Next</code>的配置，丰富其功能。一起来吧~~</p>\n<a id=\"more\"></a>\n<h1 id=\"站点设置\"><a href=\"#站点设置\" class=\"headerlink\" title=\"站点设置\"></a>站点设置</h1><h2 id=\"展示社交联系方式\"><a href=\"#展示社交联系方式\" class=\"headerlink\" title=\"展示社交联系方式\"></a>展示社交联系方式</h2><ul>\n<li>编辑<code>站点配置文件</code></li>\n<li>修改<code>socal</code>字段，并注释相应的字段，修改值</li>\n</ul>\n<h2 id=\"设置社交链接居中对齐\"><a href=\"#设置社交链接居中对齐\" class=\"headerlink\" title=\"设置社交链接居中对齐\"></a>设置社交链接居中对齐</h2><ul>\n<li>修改<code>themes\\next\\source\\css\\_common\\components\\sidebar\\sidebar-author-links.styl</code>文件，添加如下样式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.links-of-author-item &#123;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"添加友链\"><a href=\"#添加友链\" class=\"headerlink\" title=\"添加友链\"></a>添加友链</h2><ul>\n<li>编辑<code>主题配置文件</code></li>\n<li><p>添加如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># title, chinese available</span><br><span class=\"line\">links_title: 友情链接</span><br><span class=\"line\"># links</span><br><span class=\"line\">links:</span><br><span class=\"line\">  百度: https://www.baidu.com/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改<code>Blog rolls</code>下的<code>links_title</code>为中文</p>\n</li>\n</ul>\n<h2 id=\"设置友链左对齐\"><a href=\"#设置友链左对齐\" class=\"headerlink\" title=\"设置友链左对齐\"></a>设置友链左对齐</h2><ul>\n<li>本博客侧栏友情链接使用了与侧栏社交链接相同的css样式，但文本左对齐</li>\n<li>实现方法为：<br>修改<code>themes\\next\\layout\\_macro\\sidebar.swig</code>，将如下内容<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul class=&quot;links-of-blogroll-list&quot;&gt;</span><br><span class=\"line\">  &#123;% for name, link in theme.links %&#125;</span><br><span class=\"line\">    &lt;li class=&quot;links-of-blogroll-item&quot;&gt;</span><br><span class=\"line\">      &lt;a href=&quot;&#123;&#123; link &#125;&#125;&quot; title=&quot;&#123;&#123; name &#125;&#125;&quot; target=&quot;_blank&quot;&gt;</span><br><span class=\"line\">        &#123;&#123; name &#125;&#125;</span><br><span class=\"line\">      &lt;/a&gt;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">  &#123;% endfor %&#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>修改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul class=&quot;links-of-blogroll-list&quot;&gt;</span><br><span class=\"line\">    &#123;% for name, link in theme.links %&#125;</span><br><span class=\"line\">        &lt;span class=&quot;links-of-author-item&quot; style=&quot;text-align:left&quot;&gt;</span><br><span class=\"line\">            &lt;a href=&quot;&#123;&#123; link &#125;&#125;&quot; title=&quot;&#123;&#123; name &#125;&#125;&quot; target=&quot;_blank&quot;&gt;</span><br><span class=\"line\">                &#123;&#123; name &#125;&#125;</span><br><span class=\"line\">            &lt;/a&gt;</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"SEO推广\"><a href=\"#SEO推广\" class=\"headerlink\" title=\"SEO推广\"></a>SEO推广</h2><h3 id=\"sitemap\"><a href=\"#sitemap\" class=\"headerlink\" title=\"sitemap\"></a>sitemap</h3><ul>\n<li>Sitemap用于通知搜索引擎网站上有哪些可供抓取的网页，以便搜索引擎可以更加智能地抓取网站</li>\n<li>执行命令<code>npm install hexo-generator-sitemap --save</code>和<code>npm install hexo-generator-baidu-sitemap --save</code>，安装插件，用于生成<code>sitemap</code></li>\n<li>运行<code>hexo g</code>生成站点文件</li>\n<li>在<code>站点配置文件</code>中添加如下字段<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Sitemap Setting</span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">  path: sitemap.xml</span><br><span class=\"line\">baidusitemap:</span><br><span class=\"line\">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加-robots-txt\"><a href=\"#添加-robots-txt\" class=\"headerlink\" title=\"添加 robots.txt\"></a>添加 robots.txt</h3><ul>\n<li>文件放在站点的source文件夹下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User-agent: *</span><br><span class=\"line\">Allow: /</span><br><span class=\"line\">Allow: /archives/</span><br><span class=\"line\"></span><br><span class=\"line\">Disallow: /js/</span><br><span class=\"line\">Disallow: /css/</span><br><span class=\"line\">Disallow: /fonts/</span><br><span class=\"line\">Disallow: /lib/</span><br><span class=\"line\">Disallow: /fancybox/</span><br><span class=\"line\"></span><br><span class=\"line\">Sitemap: http://www.cylong.com/sitemap.xml</span><br><span class=\"line\">Sitemap: http://www.cylong.com/baidusitemap.xml</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"添加字数统计\"><a href=\"#添加字数统计\" class=\"headerlink\" title=\"添加字数统计\"></a>添加字数统计</h2><ul>\n<li>安装<code>hexo-wordcount</code>插件<code>npm install hexo-wordcount --save</code></li>\n<li><p>在<code>站点配置文件</code>中开启字数统计配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 字数统计</span><br><span class=\"line\">word_count: true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后在<code>/themes/next/layout/_partials/footer.swig</code>文件尾部加上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;theme-info&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;span class=&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"主题设定\"><a href=\"#主题设定\" class=\"headerlink\" title=\"主题设定\"></a>主题设定</h1><ul>\n<li>version: 6.0.3<h2 id=\"选择-Scheme\"><a href=\"#选择-Scheme\" class=\"headerlink\" title=\"选择 Scheme\"></a>选择 Scheme</h2></li>\n<li><code>Scheme</code>是<code>NexT</code>提供的一种特性</li>\n<li>借助于<code>Scheme</code>，<code>NexT</code>提供了多种不同的外观</li>\n<li>同时，几乎所有的配置都可以在<code>Scheme</code>之间共用</li>\n<li>目前<code>NexT</code>支持三种<code>Scheme</code>，他们是：<ul>\n<li><code>Muse</code> - 默认<code>Scheme</code>，这是 <code>NexT</code>最初的版本，黑白主调，大量留白</li>\n<li><code>Mist</code> - <code>Muse</code>的紧凑版本，整洁有序的单栏外观</li>\n<li><code>Pisces</code> - 双栏<code>Scheme</code>，小家碧玉似的清新</li>\n</ul>\n</li>\n<li><code>Scheme</code>的切换通过更改<code>主题配置文件</code>，搜索<code>scheme</code>关键字，你会看到有三行<code>Scheme</code>的配置，将你需用启用的<code>scheme</code>前面注释<code>#</code>去除即可<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ---------------------------------------------------------------</span><br><span class=\"line\"># Scheme Settings</span><br><span class=\"line\"># ---------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># Schemes</span><br><span class=\"line\">#scheme: Muse</span><br><span class=\"line\">#scheme: Mist</span><br><span class=\"line\">scheme: Pisces</span><br><span class=\"line\">#scheme: Gemini</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"设置语言\"><a href=\"#设置语言\" class=\"headerlink\" title=\"设置语言\"></a>设置语言</h2><ul>\n<li>编辑<code>站点配置文件</code>，将<code>language</code>设置成你所需要的语言</li>\n<li>具体支持的语言可以查看<a href=\"http://theme-next.iissnan.com/getting-started.html#select-language\" target=\"_blank\" rel=\"noopener\">官网说明</a></li>\n<li>建议明确设置你所需要的语言，例如选用简体中文，配置如下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: zh-CN</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"设置菜单\"><a href=\"#设置菜单\" class=\"headerlink\" title=\"设置菜单\"></a>设置菜单</h2><h3 id=\"展示菜单内容\"><a href=\"#展示菜单内容\" class=\"headerlink\" title=\"展示菜单内容\"></a>展示菜单内容</h3><ul>\n<li>菜单配置包括三个部分<ul>\n<li>第一是菜单项（名称和链接）</li>\n<li>第二是菜单项的显示文本</li>\n<li>第三是菜单项对应的图标。<code>NexT</code>使用的是<code>Font Awesome</code>提供的图标，<code>Font Awesome</code>提供了<code>600+</code>的图标，可以满足绝大的多数的场景，同时无须担心在<code>Retina</code>屏幕下图标模糊的问题。</li>\n</ul>\n</li>\n<li><p>编辑<code>主题配置文件</code>，修改以下内容：</p>\n<ul>\n<li><p>设定菜单内容，对应的字段是<code>menu</code>菜单内容的设置格式是：<code>item name: link</code>。其中<code>item name</code>是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ---------------------------------------------------------------</span><br><span class=\"line\"># Menu Settings</span><br><span class=\"line\"># ---------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).</span><br><span class=\"line\"># Usage: `Key: /link/ || icon`</span><br><span class=\"line\"># Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.</span><br><span class=\"line\"># Value before `||` delimeter is the target link.</span><br><span class=\"line\"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.</span><br><span class=\"line\">menu:</span><br><span class=\"line\">  home: / || home</span><br><span class=\"line\">  archives: /archives/ || archive</span><br><span class=\"line\">  tags: /tags/ || tags</span><br><span class=\"line\">  categories: /categories/ || th</span><br><span class=\"line\">  about: /about/ || user</span><br><span class=\"line\">  #schedule: /schedule/ || calendar</span><br><span class=\"line\">  #sitemap: /sitemap.xml || sitemap</span><br><span class=\"line\">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意：若你的站点运行在子目录中，请将链接前缀的<code>/</code>去掉</p>\n</li>\n<li><p><code>NexT</code>默认的菜单项有（斜体的项表示需要手动创建这个页面）</p>\n<p>键值 | 设定值 | 显示文本（简体中文）<br>—|— | —<br>home | home: / | 主页<br>archives | archives: /archives | 归档页<br>categories | categories: /categories | <em>分类页</em><br>tags | tags: /tags | <em>标签页</em><br>about | about: /about | <em>关于页面</em><br>commonweal | commonweal: /404.html | <em>公益 404</em></p>\n</li>\n<li><p>设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置<code>NexT</code>主题目录下的<code>languages/{language}.yml</code>（<code>{language}</code> 为你所使用的语言）<br>以简体中文为例，若你需要添加一个菜单项，比如<code>something</code>。那么就需要修改简体中文对应的翻译文<code>languages/zh-Hans.yml</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"添加标签页\"><a href=\"#添加标签页\" class=\"headerlink\" title=\"添加标签页\"></a>添加标签页</h3><ul>\n<li>在站点<code>source</code>文件夹下，建立<code>tags</code>目录</li>\n<li>在<code>tags</code>目录中创建<code>index.md</code>，内容如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2018-02-04 21:33:54</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加分类页\"><a href=\"#添加分类页\" class=\"headerlink\" title=\"添加分类页\"></a>添加分类页</h3><ul>\n<li>在站点<code>source</code>文件夹下，建立<code>categories</code>目录</li>\n<li>在<code>categories</code>目录中创建<code>index.md</code>，内容如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 分类</span><br><span class=\"line\">date: 2018-02-04 21:33:54</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加关于页\"><a href=\"#添加关于页\" class=\"headerlink\" title=\"添加关于页\"></a>添加关于页</h3><ul>\n<li>在站点<code>source</code>文件夹下，建立<code>about</code>目录</li>\n<li>在<code>about</code>目录中创建<code>index.md</code>，具体内容参加<code>github</code>源码</li>\n</ul>\n<h2 id=\"设置侧栏\"><a href=\"#设置侧栏\" class=\"headerlink\" title=\"设置侧栏\"></a>设置侧栏</h2><ul>\n<li>默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改<code>主题配置文件</code>中的<code>sidebar</code>字段来控制侧栏的行为。</li>\n<li><p>侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。</p>\n<ul>\n<li><p>设置侧栏的位置，修改<code>sidebar.position</code>的值，支持的选项有</p>\n<ul>\n<li><code>left</code> - 靠左放置</li>\n<li><code>right</code> - 靠右放置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sidebar:</span><br><span class=\"line\">   position: left</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>设置侧栏显示的时机，修改<code>sidebar.display</code>的值，支持的选项有</p>\n<ul>\n<li><code>post</code> - 默认行为，在文章页面（拥有目录列表）时显示</li>\n<li><code>always</code> - 在所有页面中都显示</li>\n<li><code>hide</code> - 在所有页面中都隐藏（可以手动展开）</li>\n<li><code>remove</code> - 完全移除<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sidebar:</span><br><span class=\"line\">    display: post</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"设置头像\"><a href=\"#设置头像\" class=\"headerlink\" title=\"设置头像\"></a>设置头像</h2><ul>\n<li>编辑<code>站点配置文件</code>， 添加字段<code>avatar</code>，值设置成头像的链接地址</li>\n<li>其中，头像的链接地址可以是：<ul>\n<li>完整的互联网 URI</li>\n<li>站点内的地址<ul>\n<li>将头像放置主题目录下的<code>source/uploads/</code>（新建<code>uploads</code>目录若不存在），配置为：<code>avatar:/uploads/avatar.png</code></li>\n<li>或者 放置在 <code>source/images/</code>目录下，配置为：<code>avatar: /images/avatar.png</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Avatar</span><br><span class=\"line\">avatar: /images/avatar.jpg</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"设置作者昵称\"><a href=\"#设置作者昵称\" class=\"headerlink\" title=\"设置作者昵称\"></a>设置作者昵称</h2><ul>\n<li>编辑<code>站点配置文件</code></li>\n<li>设置<code>author</code>为你的昵称</li>\n</ul>\n<h2 id=\"设置站点描述\"><a href=\"#设置站点描述\" class=\"headerlink\" title=\"设置站点描述\"></a>设置站点描述</h2><ul>\n<li>编辑<code>站点配置文件</code></li>\n<li>设置<code>description</code>为你的站点描述。站点描述可以是你喜欢的一句签名:)</li>\n</ul>\n<h2 id=\"设置首页预览和阅读全文\"><a href=\"#设置首页预览和阅读全文\" class=\"headerlink\" title=\"设置首页预览和阅读全文\"></a>设置首页预览和阅读全文</h2><ul>\n<li>编辑<code>主题配置文件</code></li>\n<li>设置<code>auto_excerpt</code>的配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto_excerpt:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  length: 300</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"关闭打开文章自动跳转到more\"><a href=\"#关闭打开文章自动跳转到more\" class=\"headerlink\" title=\"关闭打开文章自动跳转到more\"></a>关闭打开文章自动跳转到more</h2><ul>\n<li>编辑<code>主题配置文件</code></li>\n<li>修改<code>scroll_to_more</code>值为<code>false</code></li>\n</ul>\n<h2 id=\"fontawesome图标显示问题\"><a href=\"#fontawesome图标显示问题\" class=\"headerlink\" title=\"fontawesome图标显示问题\"></a>fontawesome图标显示问题</h2><ul>\n<li>2018-02-12更新*<br>今天早上打开博客发现导航的图标不能正常显示了。然而本地启动确实正常了。经过一番检查，发现是服务器上无法加载<code>fontawesome</code>的<code>css</code>。没办法，只能自己指定<code>fontawesome</code>的<code>css</code>的地址了</li>\n</ul>\n<p>编辑<code>主题配置文件</code>，指定<code>fontAwesome</code>的<code>cdn</code>地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fontawesome: https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"集成第三方服务\"><a href=\"#集成第三方服务\" class=\"headerlink\" title=\"集成第三方服务\"></a>集成第三方服务</h1><h2 id=\"百度统计\"><a href=\"#百度统计\" class=\"headerlink\" title=\"百度统计\"></a>百度统计</h2><ul>\n<li>登录<a href=\"http://tongji.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度统计</a>, 定位到站点的代码获取页面</li>\n<li>复制 hm.js? 后面那串统计脚本 id，如<br><img src=\"http://theme-next.iissnan.com/uploads/five-minutes-setup/analytics-baidu-id.png\" alt=\"image\"></li>\n<li>编辑<code>主题配置文件</code>，修改字段 <code>baidu_analytics</code>字段，值设置成你的百度统计脚本<code>id</code></li>\n</ul>\n<h2 id=\"谷歌统计\"><a href=\"#谷歌统计\" class=\"headerlink\" title=\"谷歌统计\"></a>谷歌统计</h2><ul>\n<li>需科学上网</li>\n<li>登录<a href=\"https://www.google.com/intl/zh-CN/analytics/\" target=\"_blank\" rel=\"noopener\">谷歌统计</a>， 定位到管理页面</li>\n<li>创建新的媒体资源，获取跟踪<code>id</code></li>\n<li>编辑<code>主题配置文件</code>，添加字段 <code>google_analytics</code>字段，值设置成你的谷歌统计跟踪<code>id</code></li>\n</ul>\n<h2 id=\"集成Disqus评论\"><a href=\"#集成Disqus评论\" class=\"headerlink\" title=\"集成Disqus评论\"></a>集成Disqus评论</h2><ul>\n<li>注册登陆<a href=\"https://disqus.com/\" target=\"_blank\" rel=\"noopener\">Disqus</a></li>\n<li>点击<code>Admin</code>进入管理页面</li>\n<li>选择第二个<code>I want to install Disqus on my site</code></li>\n<li>按照表单填写信息，记住<code>Website Name</code>这条属性，配置文件中需要用到</li>\n<li>接下来按照指引填写信息（基本都是默认就行）</li>\n<li>安装过程中会出现下面页面，这里面会有disqus在不同博客系统上或者其他系统上对应的代码。因为hexo自带支持disqus，所以不需要这里面的代码，这个页面的内容会在其他除hexo之外的博客系统中用到，如果是hexo搭建博客disqus，可以跳过<br><img src=\"http://img.blog.csdn.net/20160220003532601\" alt=\"image\"></li>\n<li>接下来配置主题下面的<code>config.yml</code>文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Disqus</span><br><span class=\"line\">disqus:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  shortname: winsky #就是前面填写的Website Name属性</span><br><span class=\"line\">  count: true</span><br><span class=\"line\">  lazyload: false</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"不蒜子\"><a href=\"#不蒜子\" class=\"headerlink\" title=\"不蒜子\"></a>不蒜子</h2><ul>\n<li>编辑<code>主题配置文件</code>中的<code>busuanzi_count</code>的配置项<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">busuanzi_count:</span><br><span class=\"line\">  # count values only if the other configs are false</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # custom uv span for the whole site</span><br><span class=\"line\">  site_uv: true</span><br><span class=\"line\">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">  site_uv_footer: 人</span><br><span class=\"line\">  # custom pv span for the whole site</span><br><span class=\"line\">  site_pv: true</span><br><span class=\"line\">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">  site_pv_footer: 次</span><br><span class=\"line\">  # custom pv span for one page only</span><br><span class=\"line\">  page_pv: true</span><br><span class=\"line\">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">  page_pv_footer:</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p><a href=\"http://ibruce.info/2015/04/04/busuanzi/\" title=\"不蒜子\" target=\"_blank\" rel=\"noopener\">不蒜子</a></p>\n</blockquote>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><blockquote>\n<p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">next中文手册</a></p>\n<p><a href=\"http://www.wuxubj.cn/2016/08/Hexo-nexT-build-personal-blog/\" target=\"_blank\" rel=\"noopener\">Hexo+nexT主题搭建个人博客</a></p>\n<p><a href=\"https://eason-yang.com/2016/11/05/add-word-count-to-hexo-next/\" target=\"_blank\" rel=\"noopener\">为Hexo NexT主题添加字数统计功能</a></p>\n<p><a href=\"http://blog.csdn.net/u010053344/article/details/50701191\" target=\"_blank\" rel=\"noopener\">Github 搭建 hexo （四）——更换主题，disqus，RSS</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>前面我们介绍了如何在<a href=\"https://bwh1.net/aff.php?aff=24742\" title=\"搬瓦工VPS\" target=\"_blank\" rel=\"noopener\">搬瓦工VPS</a>上<a href=\"https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/\" title=\"快速搭建自己的个人博客\">快速搭建自己的个人博客</a>,不会的小伙伴赶快去学习一下</p>\n<p>其中我们也介绍了如何将<code>Hexo</code>默认的主题替换为<code>Next</code>主题，但是<code>Next</code>的原始配置还是太过简洁，看上去不尽人意</p>\n<p>因此这次我们就来学习一下如何优化<code>Next</code>的配置，丰富其功能。一起来吧~~</p>","more":"<h1 id=\"站点设置\"><a href=\"#站点设置\" class=\"headerlink\" title=\"站点设置\"></a>站点设置</h1><h2 id=\"展示社交联系方式\"><a href=\"#展示社交联系方式\" class=\"headerlink\" title=\"展示社交联系方式\"></a>展示社交联系方式</h2><ul>\n<li>编辑<code>站点配置文件</code></li>\n<li>修改<code>socal</code>字段，并注释相应的字段，修改值</li>\n</ul>\n<h2 id=\"设置社交链接居中对齐\"><a href=\"#设置社交链接居中对齐\" class=\"headerlink\" title=\"设置社交链接居中对齐\"></a>设置社交链接居中对齐</h2><ul>\n<li>修改<code>themes\\next\\source\\css\\_common\\components\\sidebar\\sidebar-author-links.styl</code>文件，添加如下样式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.links-of-author-item &#123;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"添加友链\"><a href=\"#添加友链\" class=\"headerlink\" title=\"添加友链\"></a>添加友链</h2><ul>\n<li>编辑<code>主题配置文件</code></li>\n<li><p>添加如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># title, chinese available</span><br><span class=\"line\">links_title: 友情链接</span><br><span class=\"line\"># links</span><br><span class=\"line\">links:</span><br><span class=\"line\">  百度: https://www.baidu.com/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改<code>Blog rolls</code>下的<code>links_title</code>为中文</p>\n</li>\n</ul>\n<h2 id=\"设置友链左对齐\"><a href=\"#设置友链左对齐\" class=\"headerlink\" title=\"设置友链左对齐\"></a>设置友链左对齐</h2><ul>\n<li>本博客侧栏友情链接使用了与侧栏社交链接相同的css样式，但文本左对齐</li>\n<li>实现方法为：<br>修改<code>themes\\next\\layout\\_macro\\sidebar.swig</code>，将如下内容<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul class=&quot;links-of-blogroll-list&quot;&gt;</span><br><span class=\"line\">  &#123;% for name, link in theme.links %&#125;</span><br><span class=\"line\">    &lt;li class=&quot;links-of-blogroll-item&quot;&gt;</span><br><span class=\"line\">      &lt;a href=&quot;&#123;&#123; link &#125;&#125;&quot; title=&quot;&#123;&#123; name &#125;&#125;&quot; target=&quot;_blank&quot;&gt;</span><br><span class=\"line\">        &#123;&#123; name &#125;&#125;</span><br><span class=\"line\">      &lt;/a&gt;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">  &#123;% endfor %&#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>修改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul class=&quot;links-of-blogroll-list&quot;&gt;</span><br><span class=\"line\">    &#123;% for name, link in theme.links %&#125;</span><br><span class=\"line\">        &lt;span class=&quot;links-of-author-item&quot; style=&quot;text-align:left&quot;&gt;</span><br><span class=\"line\">            &lt;a href=&quot;&#123;&#123; link &#125;&#125;&quot; title=&quot;&#123;&#123; name &#125;&#125;&quot; target=&quot;_blank&quot;&gt;</span><br><span class=\"line\">                &#123;&#123; name &#125;&#125;</span><br><span class=\"line\">            &lt;/a&gt;</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"SEO推广\"><a href=\"#SEO推广\" class=\"headerlink\" title=\"SEO推广\"></a>SEO推广</h2><h3 id=\"sitemap\"><a href=\"#sitemap\" class=\"headerlink\" title=\"sitemap\"></a>sitemap</h3><ul>\n<li>Sitemap用于通知搜索引擎网站上有哪些可供抓取的网页，以便搜索引擎可以更加智能地抓取网站</li>\n<li>执行命令<code>npm install hexo-generator-sitemap --save</code>和<code>npm install hexo-generator-baidu-sitemap --save</code>，安装插件，用于生成<code>sitemap</code></li>\n<li>运行<code>hexo g</code>生成站点文件</li>\n<li>在<code>站点配置文件</code>中添加如下字段<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Sitemap Setting</span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">  path: sitemap.xml</span><br><span class=\"line\">baidusitemap:</span><br><span class=\"line\">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加-robots-txt\"><a href=\"#添加-robots-txt\" class=\"headerlink\" title=\"添加 robots.txt\"></a>添加 robots.txt</h3><ul>\n<li>文件放在站点的source文件夹下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User-agent: *</span><br><span class=\"line\">Allow: /</span><br><span class=\"line\">Allow: /archives/</span><br><span class=\"line\"></span><br><span class=\"line\">Disallow: /js/</span><br><span class=\"line\">Disallow: /css/</span><br><span class=\"line\">Disallow: /fonts/</span><br><span class=\"line\">Disallow: /lib/</span><br><span class=\"line\">Disallow: /fancybox/</span><br><span class=\"line\"></span><br><span class=\"line\">Sitemap: http://www.cylong.com/sitemap.xml</span><br><span class=\"line\">Sitemap: http://www.cylong.com/baidusitemap.xml</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"添加字数统计\"><a href=\"#添加字数统计\" class=\"headerlink\" title=\"添加字数统计\"></a>添加字数统计</h2><ul>\n<li>安装<code>hexo-wordcount</code>插件<code>npm install hexo-wordcount --save</code></li>\n<li><p>在<code>站点配置文件</code>中开启字数统计配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 字数统计</span><br><span class=\"line\">word_count: true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后在<code>/themes/next/layout/_partials/footer.swig</code>文件尾部加上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;theme-info&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;span class=&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"主题设定\"><a href=\"#主题设定\" class=\"headerlink\" title=\"主题设定\"></a>主题设定</h1><ul>\n<li>version: 6.0.3<h2 id=\"选择-Scheme\"><a href=\"#选择-Scheme\" class=\"headerlink\" title=\"选择 Scheme\"></a>选择 Scheme</h2></li>\n<li><code>Scheme</code>是<code>NexT</code>提供的一种特性</li>\n<li>借助于<code>Scheme</code>，<code>NexT</code>提供了多种不同的外观</li>\n<li>同时，几乎所有的配置都可以在<code>Scheme</code>之间共用</li>\n<li>目前<code>NexT</code>支持三种<code>Scheme</code>，他们是：<ul>\n<li><code>Muse</code> - 默认<code>Scheme</code>，这是 <code>NexT</code>最初的版本，黑白主调，大量留白</li>\n<li><code>Mist</code> - <code>Muse</code>的紧凑版本，整洁有序的单栏外观</li>\n<li><code>Pisces</code> - 双栏<code>Scheme</code>，小家碧玉似的清新</li>\n</ul>\n</li>\n<li><code>Scheme</code>的切换通过更改<code>主题配置文件</code>，搜索<code>scheme</code>关键字，你会看到有三行<code>Scheme</code>的配置，将你需用启用的<code>scheme</code>前面注释<code>#</code>去除即可<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ---------------------------------------------------------------</span><br><span class=\"line\"># Scheme Settings</span><br><span class=\"line\"># ---------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># Schemes</span><br><span class=\"line\">#scheme: Muse</span><br><span class=\"line\">#scheme: Mist</span><br><span class=\"line\">scheme: Pisces</span><br><span class=\"line\">#scheme: Gemini</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"设置语言\"><a href=\"#设置语言\" class=\"headerlink\" title=\"设置语言\"></a>设置语言</h2><ul>\n<li>编辑<code>站点配置文件</code>，将<code>language</code>设置成你所需要的语言</li>\n<li>具体支持的语言可以查看<a href=\"http://theme-next.iissnan.com/getting-started.html#select-language\" target=\"_blank\" rel=\"noopener\">官网说明</a></li>\n<li>建议明确设置你所需要的语言，例如选用简体中文，配置如下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: zh-CN</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"设置菜单\"><a href=\"#设置菜单\" class=\"headerlink\" title=\"设置菜单\"></a>设置菜单</h2><h3 id=\"展示菜单内容\"><a href=\"#展示菜单内容\" class=\"headerlink\" title=\"展示菜单内容\"></a>展示菜单内容</h3><ul>\n<li>菜单配置包括三个部分<ul>\n<li>第一是菜单项（名称和链接）</li>\n<li>第二是菜单项的显示文本</li>\n<li>第三是菜单项对应的图标。<code>NexT</code>使用的是<code>Font Awesome</code>提供的图标，<code>Font Awesome</code>提供了<code>600+</code>的图标，可以满足绝大的多数的场景，同时无须担心在<code>Retina</code>屏幕下图标模糊的问题。</li>\n</ul>\n</li>\n<li><p>编辑<code>主题配置文件</code>，修改以下内容：</p>\n<ul>\n<li><p>设定菜单内容，对应的字段是<code>menu</code>菜单内容的设置格式是：<code>item name: link</code>。其中<code>item name</code>是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ---------------------------------------------------------------</span><br><span class=\"line\"># Menu Settings</span><br><span class=\"line\"># ---------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).</span><br><span class=\"line\"># Usage: `Key: /link/ || icon`</span><br><span class=\"line\"># Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.</span><br><span class=\"line\"># Value before `||` delimeter is the target link.</span><br><span class=\"line\"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.</span><br><span class=\"line\">menu:</span><br><span class=\"line\">  home: / || home</span><br><span class=\"line\">  archives: /archives/ || archive</span><br><span class=\"line\">  tags: /tags/ || tags</span><br><span class=\"line\">  categories: /categories/ || th</span><br><span class=\"line\">  about: /about/ || user</span><br><span class=\"line\">  #schedule: /schedule/ || calendar</span><br><span class=\"line\">  #sitemap: /sitemap.xml || sitemap</span><br><span class=\"line\">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意：若你的站点运行在子目录中，请将链接前缀的<code>/</code>去掉</p>\n</li>\n<li><p><code>NexT</code>默认的菜单项有（斜体的项表示需要手动创建这个页面）</p>\n<p>键值 | 设定值 | 显示文本（简体中文）<br>—|— | —<br>home | home: / | 主页<br>archives | archives: /archives | 归档页<br>categories | categories: /categories | <em>分类页</em><br>tags | tags: /tags | <em>标签页</em><br>about | about: /about | <em>关于页面</em><br>commonweal | commonweal: /404.html | <em>公益 404</em></p>\n</li>\n<li><p>设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置<code>NexT</code>主题目录下的<code>languages/{language}.yml</code>（<code>{language}</code> 为你所使用的语言）<br>以简体中文为例，若你需要添加一个菜单项，比如<code>something</code>。那么就需要修改简体中文对应的翻译文<code>languages/zh-Hans.yml</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"添加标签页\"><a href=\"#添加标签页\" class=\"headerlink\" title=\"添加标签页\"></a>添加标签页</h3><ul>\n<li>在站点<code>source</code>文件夹下，建立<code>tags</code>目录</li>\n<li>在<code>tags</code>目录中创建<code>index.md</code>，内容如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2018-02-04 21:33:54</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加分类页\"><a href=\"#添加分类页\" class=\"headerlink\" title=\"添加分类页\"></a>添加分类页</h3><ul>\n<li>在站点<code>source</code>文件夹下，建立<code>categories</code>目录</li>\n<li>在<code>categories</code>目录中创建<code>index.md</code>，内容如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 分类</span><br><span class=\"line\">date: 2018-02-04 21:33:54</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加关于页\"><a href=\"#添加关于页\" class=\"headerlink\" title=\"添加关于页\"></a>添加关于页</h3><ul>\n<li>在站点<code>source</code>文件夹下，建立<code>about</code>目录</li>\n<li>在<code>about</code>目录中创建<code>index.md</code>，具体内容参加<code>github</code>源码</li>\n</ul>\n<h2 id=\"设置侧栏\"><a href=\"#设置侧栏\" class=\"headerlink\" title=\"设置侧栏\"></a>设置侧栏</h2><ul>\n<li>默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改<code>主题配置文件</code>中的<code>sidebar</code>字段来控制侧栏的行为。</li>\n<li><p>侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。</p>\n<ul>\n<li><p>设置侧栏的位置，修改<code>sidebar.position</code>的值，支持的选项有</p>\n<ul>\n<li><code>left</code> - 靠左放置</li>\n<li><code>right</code> - 靠右放置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sidebar:</span><br><span class=\"line\">   position: left</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>设置侧栏显示的时机，修改<code>sidebar.display</code>的值，支持的选项有</p>\n<ul>\n<li><code>post</code> - 默认行为，在文章页面（拥有目录列表）时显示</li>\n<li><code>always</code> - 在所有页面中都显示</li>\n<li><code>hide</code> - 在所有页面中都隐藏（可以手动展开）</li>\n<li><code>remove</code> - 完全移除<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sidebar:</span><br><span class=\"line\">    display: post</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"设置头像\"><a href=\"#设置头像\" class=\"headerlink\" title=\"设置头像\"></a>设置头像</h2><ul>\n<li>编辑<code>站点配置文件</code>， 添加字段<code>avatar</code>，值设置成头像的链接地址</li>\n<li>其中，头像的链接地址可以是：<ul>\n<li>完整的互联网 URI</li>\n<li>站点内的地址<ul>\n<li>将头像放置主题目录下的<code>source/uploads/</code>（新建<code>uploads</code>目录若不存在），配置为：<code>avatar:/uploads/avatar.png</code></li>\n<li>或者 放置在 <code>source/images/</code>目录下，配置为：<code>avatar: /images/avatar.png</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Avatar</span><br><span class=\"line\">avatar: /images/avatar.jpg</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"设置作者昵称\"><a href=\"#设置作者昵称\" class=\"headerlink\" title=\"设置作者昵称\"></a>设置作者昵称</h2><ul>\n<li>编辑<code>站点配置文件</code></li>\n<li>设置<code>author</code>为你的昵称</li>\n</ul>\n<h2 id=\"设置站点描述\"><a href=\"#设置站点描述\" class=\"headerlink\" title=\"设置站点描述\"></a>设置站点描述</h2><ul>\n<li>编辑<code>站点配置文件</code></li>\n<li>设置<code>description</code>为你的站点描述。站点描述可以是你喜欢的一句签名:)</li>\n</ul>\n<h2 id=\"设置首页预览和阅读全文\"><a href=\"#设置首页预览和阅读全文\" class=\"headerlink\" title=\"设置首页预览和阅读全文\"></a>设置首页预览和阅读全文</h2><ul>\n<li>编辑<code>主题配置文件</code></li>\n<li>设置<code>auto_excerpt</code>的配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto_excerpt:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  length: 300</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"关闭打开文章自动跳转到more\"><a href=\"#关闭打开文章自动跳转到more\" class=\"headerlink\" title=\"关闭打开文章自动跳转到more\"></a>关闭打开文章自动跳转到more</h2><ul>\n<li>编辑<code>主题配置文件</code></li>\n<li>修改<code>scroll_to_more</code>值为<code>false</code></li>\n</ul>\n<h2 id=\"fontawesome图标显示问题\"><a href=\"#fontawesome图标显示问题\" class=\"headerlink\" title=\"fontawesome图标显示问题\"></a>fontawesome图标显示问题</h2><ul>\n<li>2018-02-12更新*<br>今天早上打开博客发现导航的图标不能正常显示了。然而本地启动确实正常了。经过一番检查，发现是服务器上无法加载<code>fontawesome</code>的<code>css</code>。没办法，只能自己指定<code>fontawesome</code>的<code>css</code>的地址了</li>\n</ul>\n<p>编辑<code>主题配置文件</code>，指定<code>fontAwesome</code>的<code>cdn</code>地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fontawesome: https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"集成第三方服务\"><a href=\"#集成第三方服务\" class=\"headerlink\" title=\"集成第三方服务\"></a>集成第三方服务</h1><h2 id=\"百度统计\"><a href=\"#百度统计\" class=\"headerlink\" title=\"百度统计\"></a>百度统计</h2><ul>\n<li>登录<a href=\"http://tongji.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度统计</a>, 定位到站点的代码获取页面</li>\n<li>复制 hm.js? 后面那串统计脚本 id，如<br><img src=\"http://theme-next.iissnan.com/uploads/five-minutes-setup/analytics-baidu-id.png\" alt=\"image\"></li>\n<li>编辑<code>主题配置文件</code>，修改字段 <code>baidu_analytics</code>字段，值设置成你的百度统计脚本<code>id</code></li>\n</ul>\n<h2 id=\"谷歌统计\"><a href=\"#谷歌统计\" class=\"headerlink\" title=\"谷歌统计\"></a>谷歌统计</h2><ul>\n<li>需科学上网</li>\n<li>登录<a href=\"https://www.google.com/intl/zh-CN/analytics/\" target=\"_blank\" rel=\"noopener\">谷歌统计</a>， 定位到管理页面</li>\n<li>创建新的媒体资源，获取跟踪<code>id</code></li>\n<li>编辑<code>主题配置文件</code>，添加字段 <code>google_analytics</code>字段，值设置成你的谷歌统计跟踪<code>id</code></li>\n</ul>\n<h2 id=\"集成Disqus评论\"><a href=\"#集成Disqus评论\" class=\"headerlink\" title=\"集成Disqus评论\"></a>集成Disqus评论</h2><ul>\n<li>注册登陆<a href=\"https://disqus.com/\" target=\"_blank\" rel=\"noopener\">Disqus</a></li>\n<li>点击<code>Admin</code>进入管理页面</li>\n<li>选择第二个<code>I want to install Disqus on my site</code></li>\n<li>按照表单填写信息，记住<code>Website Name</code>这条属性，配置文件中需要用到</li>\n<li>接下来按照指引填写信息（基本都是默认就行）</li>\n<li>安装过程中会出现下面页面，这里面会有disqus在不同博客系统上或者其他系统上对应的代码。因为hexo自带支持disqus，所以不需要这里面的代码，这个页面的内容会在其他除hexo之外的博客系统中用到，如果是hexo搭建博客disqus，可以跳过<br><img src=\"http://img.blog.csdn.net/20160220003532601\" alt=\"image\"></li>\n<li>接下来配置主题下面的<code>config.yml</code>文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Disqus</span><br><span class=\"line\">disqus:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  shortname: winsky #就是前面填写的Website Name属性</span><br><span class=\"line\">  count: true</span><br><span class=\"line\">  lazyload: false</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"不蒜子\"><a href=\"#不蒜子\" class=\"headerlink\" title=\"不蒜子\"></a>不蒜子</h2><ul>\n<li>编辑<code>主题配置文件</code>中的<code>busuanzi_count</code>的配置项<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">busuanzi_count:</span><br><span class=\"line\">  # count values only if the other configs are false</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # custom uv span for the whole site</span><br><span class=\"line\">  site_uv: true</span><br><span class=\"line\">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">  site_uv_footer: 人</span><br><span class=\"line\">  # custom pv span for the whole site</span><br><span class=\"line\">  site_pv: true</span><br><span class=\"line\">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">  site_pv_footer: 次</span><br><span class=\"line\">  # custom pv span for one page only</span><br><span class=\"line\">  page_pv: true</span><br><span class=\"line\">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">  page_pv_footer:</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p><a href=\"http://ibruce.info/2015/04/04/busuanzi/\" title=\"不蒜子\" target=\"_blank\" rel=\"noopener\">不蒜子</a></p>\n</blockquote>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><blockquote>\n<p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">next中文手册</a></p>\n<p><a href=\"http://www.wuxubj.cn/2016/08/Hexo-nexT-build-personal-blog/\" target=\"_blank\" rel=\"noopener\">Hexo+nexT主题搭建个人博客</a></p>\n<p><a href=\"https://eason-yang.com/2016/11/05/add-word-count-to-hexo-next/\" target=\"_blank\" rel=\"noopener\">为Hexo NexT主题添加字数统计功能</a></p>\n<p><a href=\"http://blog.csdn.net/u010053344/article/details/50701191\" target=\"_blank\" rel=\"noopener\">Github 搭建 hexo （四）——更换主题，disqus，RSS</a></p>\n</blockquote>"},{"title":"自动将更新部署到VPS","date":"2018-02-10T03:55:23.000Z","updated":"2018-02-10T03:55:23.000Z","_content":"\n博客雏形搭建好了之后，又浪了几天没有折腾。昨天晚上自己买了个域名，想着是时候好好把博客完善起来了。下面继续开始折腾...\n\n前面我们介绍了如何在[搬瓦工VPS][1]上[快速搭建自己的个人博客][2]，做了相关的[主题美化][3]，同时也进行了简单的[SEO优化][4]。\n\n在这个过程中，每次需要更新，我都是直接手动将文件拖到VPS上的。作为一个“懒人”，这个过程还是太烦了。今天我们就来学习一下如何自动将博客部署到VPS上。\n\n<!-- more -->\n这篇文章重点介绍如何通过git webhooks实现远程vps的自动部署\n\n具体流程：先在本机搭建好hexo环境，push到git仓库，再部署到服务器上\n\n# 本地安配置hexo环境\n在本地用hexo搭建一个个人博客很简单，分分钟可以搞定。如果以前没有接触过，可以参考我前面的博文：[个人博客Hexo搭建][2]\n\n## 提交到远程仓库\n首先需要一个在线的仓库，可以选择[github](https://github.com/)或者[Coding.net](https://coding.net/)。这里我选择了常用的[github](https://github.com/)\n\n先在`github`上创建一个项目`HexoBlog`，并拷贝仓库`ssh`地址（使用`ssh`需要配置`ssh`公钥和私钥，如果不会配可以`google`一下或使用`http`地址）。注意，如果需要通过webhooks实现服务器自动化部署，推荐使用ssh会更方便一些\n\n然后在本地`hexo`目录初始化本地仓库并提交到`github`\n```\ngit init\ngit add .\ngit commit -m \"first commit\"\ngit remote add origin git@github.com:winsky94/HexoBlog.git\ngit push -u origin master\n```\n\n注意，如果以前没有配置`github`的`SSH`提交，可以参考这篇博文[GitHub的SSH提交配置][5]\n\n# VPS配置\n我使用的是[搬瓦工VPS][1]。服务器上安装好了`nodejs,git,nginx`，具体不会的可以谷歌一下\n### 将代码从`github`上拉取下来\n同样，这里也需要在服务器上配置`github`的`SSH`登录。参考[GitHub的SSH提交配置][5]\n```\nmkdir /home/blog\ngit init\ngit remote add origin git@github.com:winsky94/HexoBlog.git\ngit pull origin master\n```\n\n## 安装hexo模块\n```\ncd /home/blog\nnpm install hexo-cli -g\nnpm install\n```\n\n## hexo静态编译\n```\nhexo g\n```\n这一步会在`/home/blog`目录下生成一个`public`目录，这里面就是编译后的静态文件目录，其实这时候直接访问里面的html文件即可看到完整的效果了，只不过还需要一个服务来运行它\n\n## 配置nginx\n进入nginx服务配置文件目录`/usr/local/nginx/conf/vhost`，新建一个配置文件`blog.conf`，内容为\n```\nserver\n{\n\tlisten 80;\n    server_name blog.winsky.wang ;\n\n\tlocation / {\n\t\tproxy_set_header HOST $host;\n\t\tproxy_set_header X-Forwarded-Proto $scheme;\n\t\tproxy_set_header X-Real-IP $remote_addr;\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n   \tproxy_pass http://localhost:4000/;\n  }\n}\n```\n重载nginx，使配置生效`nginx -s reload`。然后就可以通过[http://blog.winsky.wang](http://blog.winsky.wang)来访问博客了\n\n# Git WebHooks 自动化部署\n是不是觉得每次写完文章还要登录服务器去执行一次`git pull`很麻烦？最起码对我这个“懒人”来说，这样很耗时啊\n\n幸运的是，`git`有很多钩子，可以在仓库发生变化的时候触发，类似`js`中的事件。`WebHooks`就是在你本地执行`git push`的时候，远程仓库会检测到仓库的变化，并发送一个请求到我们配置好的`WebHooks`\n\n\n实现WebHooks自动化部署的推荐条件：\n- 服务器端配置`ssh`认证\n- 服务器端配置`nodejs`服务，接收`github`发来的请求\n\n## 服务器webhook配置\n由于`hexo`是基于`NodeJS`的，所以这里用`NodeJS`来接收`github`的`push`事件。\n安装依赖库`github-webhook-handler`：\n```\nnpm install github-webhook-handler\n```\n安装完成之后配置`webhooks.js`\n```\nvar http = require('http')\nvar createHandler = require('github-webhook-handler')\nvar handler = createHandler({ path: '/webhooks_push', secret: 'winsky_nju' })\n// 上面的 secret 保持和 GitHub 后台设置的一致\nfunction run_cmd(cmd, args, callback) {\n  var spawn = require('child_process').spawn;\n  var child = spawn(cmd, args);\n  var resp = \"\";\n  child.stdout.on('data', function(buffer) { resp += buffer.toString(); });\n  child.stdout.on('end', function() { callback (resp) });\n}\nhandler.on('error', function (err) {\n  console.error('Error:', err.message)\n})\nhandler.on('push', function (event) {\n  console.log('Received a push event for %s to %s',\n    event.payload.repository.name,\n    event.payload.ref);\n    run_cmd('sh', ['./deploy.sh'], function(text){ console.log(text) });\n})\ntry {\n  http.createServer(function (req, res) {\n    handler(req, res, function (err) {\n      res.statusCode = 404\n      res.end('no such location')\n    })\n  }).listen(6666)\n}catch(err){\n  console.error('Error:', err.message)\n}\n```\n其中`secret`要和`github`仓库中`webhooks`设置的一致，`6666`是监听端口可以随便改，不要冲突就行，`./deploy.sh`是接收到`push`事件时需要执行的`shell`脚本，与`webhooks.js`都存放在博客目录下；`path: '/webhooks_push'`是`github`通知服务器的地址\n\n因为我们的服务器上使用了`Nginx`，所以这里我们也需要使用`Nginx`来转发6666端口。在`Nginx`配置文件目录下新建一个`webhooks.conf`，内容如下：\n```\nserver\n{\n    listen 80;\n    server_name git.winsky.wang ;\n\n\tlocation / {\n\t\tproxy_set_header HOST $host;\n\t\tproxy_set_header X-Forwarded-Proto $scheme;\n\t\tproxy_set_header X-Real-IP $remote_addr;\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://localhost:6666/;\n    }\n}\n```\n然后配置`git.winsky.wang`的域名解析\n\n最后git上配置的地址是：`http://git.winsky.wang/webhooks_push`\n\n## 配置`./deploy.sh`\n```\ncd /home/blog/\ngit reset --hard\ngit pull origin master  \nhexo generate\n```\n\n然后运行`node webhooks.js`，就可以实现本地更新`push`到`github`，服务器会自动更新部署博客。\n\n最后要将进程加入守护，通过`pm2`来实现\n```\nnpm install pm2 --global\n```\n然后通过`pm2`启动`webhooks.js`\n```\npm2 start /home/blog/webhooks.js \n```\n\n## 自启动\n参考[服务器重启后自动运行hexo服务][]\n\n\n> [快速搭建Hexo博客+webhook自动部署+全站HTTPS](http://www.gaoshilei.com/2017/10/30/hexo-init/)\n\n> [给你的项目增加Webhooks，自动进行部署](https://excaliburhan.com/post/add-webhooks-to-your-project.html)\n\n> [使用Github的webhooks进行网站自动化部署](https://aotu.io/notes/2016/01/07/auto-deploy-website-by-webhooks-of-github/index.html)\n\n\n[1]: https://bwh1.net/aff.php?aff=29080 \"搬瓦工VPS\"\n[2]: https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/ \"快速搭建自己的个人博客\"\n[3]: https://blog.winsky.wang/2018/02/04/Hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/ \"主题美化\"\n[4]: https://blog.winsky.wang/2018/02/06/%E5%A6%82%E4%BD%95%E8%AE%A9%E8%B0%B7%E6%AD%8C%E5%92%8C%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ \"SEO优化\"\n[5]: http://blog.csdn.net/oDeviloo/article/details/52654590 \"GitHub的SSH提交配置\"","source":"_posts/Hexo博客/自动将更新部署到VPS.md","raw":"---\ntitle: 自动将更新部署到VPS\ndate: 2018-02-10 11:55:23\nupdated: 2018-02-10 11:55:23\ntags:\n\t- HEXO\n  \t- 博客\n  \t- 部署\ncategories: \n\t- Hexo博客\n---\n\n博客雏形搭建好了之后，又浪了几天没有折腾。昨天晚上自己买了个域名，想着是时候好好把博客完善起来了。下面继续开始折腾...\n\n前面我们介绍了如何在[搬瓦工VPS][1]上[快速搭建自己的个人博客][2]，做了相关的[主题美化][3]，同时也进行了简单的[SEO优化][4]。\n\n在这个过程中，每次需要更新，我都是直接手动将文件拖到VPS上的。作为一个“懒人”，这个过程还是太烦了。今天我们就来学习一下如何自动将博客部署到VPS上。\n\n<!-- more -->\n这篇文章重点介绍如何通过git webhooks实现远程vps的自动部署\n\n具体流程：先在本机搭建好hexo环境，push到git仓库，再部署到服务器上\n\n# 本地安配置hexo环境\n在本地用hexo搭建一个个人博客很简单，分分钟可以搞定。如果以前没有接触过，可以参考我前面的博文：[个人博客Hexo搭建][2]\n\n## 提交到远程仓库\n首先需要一个在线的仓库，可以选择[github](https://github.com/)或者[Coding.net](https://coding.net/)。这里我选择了常用的[github](https://github.com/)\n\n先在`github`上创建一个项目`HexoBlog`，并拷贝仓库`ssh`地址（使用`ssh`需要配置`ssh`公钥和私钥，如果不会配可以`google`一下或使用`http`地址）。注意，如果需要通过webhooks实现服务器自动化部署，推荐使用ssh会更方便一些\n\n然后在本地`hexo`目录初始化本地仓库并提交到`github`\n```\ngit init\ngit add .\ngit commit -m \"first commit\"\ngit remote add origin git@github.com:winsky94/HexoBlog.git\ngit push -u origin master\n```\n\n注意，如果以前没有配置`github`的`SSH`提交，可以参考这篇博文[GitHub的SSH提交配置][5]\n\n# VPS配置\n我使用的是[搬瓦工VPS][1]。服务器上安装好了`nodejs,git,nginx`，具体不会的可以谷歌一下\n### 将代码从`github`上拉取下来\n同样，这里也需要在服务器上配置`github`的`SSH`登录。参考[GitHub的SSH提交配置][5]\n```\nmkdir /home/blog\ngit init\ngit remote add origin git@github.com:winsky94/HexoBlog.git\ngit pull origin master\n```\n\n## 安装hexo模块\n```\ncd /home/blog\nnpm install hexo-cli -g\nnpm install\n```\n\n## hexo静态编译\n```\nhexo g\n```\n这一步会在`/home/blog`目录下生成一个`public`目录，这里面就是编译后的静态文件目录，其实这时候直接访问里面的html文件即可看到完整的效果了，只不过还需要一个服务来运行它\n\n## 配置nginx\n进入nginx服务配置文件目录`/usr/local/nginx/conf/vhost`，新建一个配置文件`blog.conf`，内容为\n```\nserver\n{\n\tlisten 80;\n    server_name blog.winsky.wang ;\n\n\tlocation / {\n\t\tproxy_set_header HOST $host;\n\t\tproxy_set_header X-Forwarded-Proto $scheme;\n\t\tproxy_set_header X-Real-IP $remote_addr;\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n   \tproxy_pass http://localhost:4000/;\n  }\n}\n```\n重载nginx，使配置生效`nginx -s reload`。然后就可以通过[http://blog.winsky.wang](http://blog.winsky.wang)来访问博客了\n\n# Git WebHooks 自动化部署\n是不是觉得每次写完文章还要登录服务器去执行一次`git pull`很麻烦？最起码对我这个“懒人”来说，这样很耗时啊\n\n幸运的是，`git`有很多钩子，可以在仓库发生变化的时候触发，类似`js`中的事件。`WebHooks`就是在你本地执行`git push`的时候，远程仓库会检测到仓库的变化，并发送一个请求到我们配置好的`WebHooks`\n\n\n实现WebHooks自动化部署的推荐条件：\n- 服务器端配置`ssh`认证\n- 服务器端配置`nodejs`服务，接收`github`发来的请求\n\n## 服务器webhook配置\n由于`hexo`是基于`NodeJS`的，所以这里用`NodeJS`来接收`github`的`push`事件。\n安装依赖库`github-webhook-handler`：\n```\nnpm install github-webhook-handler\n```\n安装完成之后配置`webhooks.js`\n```\nvar http = require('http')\nvar createHandler = require('github-webhook-handler')\nvar handler = createHandler({ path: '/webhooks_push', secret: 'winsky_nju' })\n// 上面的 secret 保持和 GitHub 后台设置的一致\nfunction run_cmd(cmd, args, callback) {\n  var spawn = require('child_process').spawn;\n  var child = spawn(cmd, args);\n  var resp = \"\";\n  child.stdout.on('data', function(buffer) { resp += buffer.toString(); });\n  child.stdout.on('end', function() { callback (resp) });\n}\nhandler.on('error', function (err) {\n  console.error('Error:', err.message)\n})\nhandler.on('push', function (event) {\n  console.log('Received a push event for %s to %s',\n    event.payload.repository.name,\n    event.payload.ref);\n    run_cmd('sh', ['./deploy.sh'], function(text){ console.log(text) });\n})\ntry {\n  http.createServer(function (req, res) {\n    handler(req, res, function (err) {\n      res.statusCode = 404\n      res.end('no such location')\n    })\n  }).listen(6666)\n}catch(err){\n  console.error('Error:', err.message)\n}\n```\n其中`secret`要和`github`仓库中`webhooks`设置的一致，`6666`是监听端口可以随便改，不要冲突就行，`./deploy.sh`是接收到`push`事件时需要执行的`shell`脚本，与`webhooks.js`都存放在博客目录下；`path: '/webhooks_push'`是`github`通知服务器的地址\n\n因为我们的服务器上使用了`Nginx`，所以这里我们也需要使用`Nginx`来转发6666端口。在`Nginx`配置文件目录下新建一个`webhooks.conf`，内容如下：\n```\nserver\n{\n    listen 80;\n    server_name git.winsky.wang ;\n\n\tlocation / {\n\t\tproxy_set_header HOST $host;\n\t\tproxy_set_header X-Forwarded-Proto $scheme;\n\t\tproxy_set_header X-Real-IP $remote_addr;\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://localhost:6666/;\n    }\n}\n```\n然后配置`git.winsky.wang`的域名解析\n\n最后git上配置的地址是：`http://git.winsky.wang/webhooks_push`\n\n## 配置`./deploy.sh`\n```\ncd /home/blog/\ngit reset --hard\ngit pull origin master  \nhexo generate\n```\n\n然后运行`node webhooks.js`，就可以实现本地更新`push`到`github`，服务器会自动更新部署博客。\n\n最后要将进程加入守护，通过`pm2`来实现\n```\nnpm install pm2 --global\n```\n然后通过`pm2`启动`webhooks.js`\n```\npm2 start /home/blog/webhooks.js \n```\n\n## 自启动\n参考[服务器重启后自动运行hexo服务][]\n\n\n> [快速搭建Hexo博客+webhook自动部署+全站HTTPS](http://www.gaoshilei.com/2017/10/30/hexo-init/)\n\n> [给你的项目增加Webhooks，自动进行部署](https://excaliburhan.com/post/add-webhooks-to-your-project.html)\n\n> [使用Github的webhooks进行网站自动化部署](https://aotu.io/notes/2016/01/07/auto-deploy-website-by-webhooks-of-github/index.html)\n\n\n[1]: https://bwh1.net/aff.php?aff=29080 \"搬瓦工VPS\"\n[2]: https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/ \"快速搭建自己的个人博客\"\n[3]: https://blog.winsky.wang/2018/02/04/Hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/ \"主题美化\"\n[4]: https://blog.winsky.wang/2018/02/06/%E5%A6%82%E4%BD%95%E8%AE%A9%E8%B0%B7%E6%AD%8C%E5%92%8C%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ \"SEO优化\"\n[5]: http://blog.csdn.net/oDeviloo/article/details/52654590 \"GitHub的SSH提交配置\"","slug":"Hexo博客/自动将更新部署到VPS","published":1,"_id":"cjf4zdkxy0009woy6l1857bfd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>博客雏形搭建好了之后，又浪了几天没有折腾。昨天晚上自己买了个域名，想着是时候好好把博客完善起来了。下面继续开始折腾…</p>\n<p>前面我们介绍了如何在<a href=\"https://bwh1.net/aff.php?aff=29080\" title=\"搬瓦工VPS\" target=\"_blank\" rel=\"noopener\">搬瓦工VPS</a>上<a href=\"https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/\" title=\"快速搭建自己的个人博客\">快速搭建自己的个人博客</a>，做了相关的<a href=\"https://blog.winsky.wang/2018/02/04/Hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/\" title=\"主题美化\">主题美化</a>，同时也进行了简单的<a href=\"https://blog.winsky.wang/2018/02/06/%E5%A6%82%E4%BD%95%E8%AE%A9%E8%B0%B7%E6%AD%8C%E5%92%8C%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/\" title=\"SEO优化\">SEO优化</a>。</p>\n<p>在这个过程中，每次需要更新，我都是直接手动将文件拖到VPS上的。作为一个“懒人”，这个过程还是太烦了。今天我们就来学习一下如何自动将博客部署到VPS上。</p>\n<a id=\"more\"></a>\n<p>这篇文章重点介绍如何通过git webhooks实现远程vps的自动部署</p>\n<p>具体流程：先在本机搭建好hexo环境，push到git仓库，再部署到服务器上</p>\n<h1 id=\"本地安配置hexo环境\"><a href=\"#本地安配置hexo环境\" class=\"headerlink\" title=\"本地安配置hexo环境\"></a>本地安配置hexo环境</h1><p>在本地用hexo搭建一个个人博客很简单，分分钟可以搞定。如果以前没有接触过，可以参考我前面的博文：<a href=\"https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/\" title=\"快速搭建自己的个人博客\">个人博客Hexo搭建</a></p>\n<h2 id=\"提交到远程仓库\"><a href=\"#提交到远程仓库\" class=\"headerlink\" title=\"提交到远程仓库\"></a>提交到远程仓库</h2><p>首先需要一个在线的仓库，可以选择<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>或者<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding.net</a>。这里我选择了常用的<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>先在<code>github</code>上创建一个项目<code>HexoBlog</code>，并拷贝仓库<code>ssh</code>地址（使用<code>ssh</code>需要配置<code>ssh</code>公钥和私钥，如果不会配可以<code>google</code>一下或使用<code>http</code>地址）。注意，如果需要通过webhooks实现服务器自动化部署，推荐使用ssh会更方便一些</p>\n<p>然后在本地<code>hexo</code>目录初始化本地仓库并提交到<code>github</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\">git remote add origin git@github.com:winsky94/HexoBlog.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></p>\n<p>注意，如果以前没有配置<code>github</code>的<code>SSH</code>提交，可以参考这篇博文<a href=\"http://blog.csdn.net/oDeviloo/article/details/52654590\" title=\"GitHub的SSH提交配置\" target=\"_blank\" rel=\"noopener\">GitHub的SSH提交配置</a></p>\n<h1 id=\"VPS配置\"><a href=\"#VPS配置\" class=\"headerlink\" title=\"VPS配置\"></a>VPS配置</h1><p>我使用的是<a href=\"https://bwh1.net/aff.php?aff=29080\" title=\"搬瓦工VPS\" target=\"_blank\" rel=\"noopener\">搬瓦工VPS</a>。服务器上安装好了<code>nodejs,git,nginx</code>，具体不会的可以谷歌一下</p>\n<h3 id=\"将代码从github上拉取下来\"><a href=\"#将代码从github上拉取下来\" class=\"headerlink\" title=\"将代码从github上拉取下来\"></a>将代码从<code>github</code>上拉取下来</h3><p>同样，这里也需要在服务器上配置<code>github</code>的<code>SSH</code>登录。参考<a href=\"http://blog.csdn.net/oDeviloo/article/details/52654590\" title=\"GitHub的SSH提交配置\" target=\"_blank\" rel=\"noopener\">GitHub的SSH提交配置</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /home/blog</span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin git@github.com:winsky94/HexoBlog.git</span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装hexo模块\"><a href=\"#安装hexo模块\" class=\"headerlink\" title=\"安装hexo模块\"></a>安装hexo模块</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/blog</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2 id=\"hexo静态编译\"><a href=\"#hexo静态编译\" class=\"headerlink\" title=\"hexo静态编译\"></a>hexo静态编译</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<p>这一步会在<code>/home/blog</code>目录下生成一个<code>public</code>目录，这里面就是编译后的静态文件目录，其实这时候直接访问里面的html文件即可看到完整的效果了，只不过还需要一个服务来运行它</p>\n<h2 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h2><p>进入nginx服务配置文件目录<code>/usr/local/nginx/conf/vhost</code>，新建一个配置文件<code>blog.conf</code>，内容为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tlisten 80;</span><br><span class=\"line\">    server_name blog.winsky.wang ;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\tproxy_set_header HOST $host;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">\t\tproxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">   \tproxy_pass http://localhost:4000/;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>重载nginx，使配置生效<code>nginx -s reload</code>。然后就可以通过<a href=\"http://blog.winsky.wang\">http://blog.winsky.wang</a>来访问博客了</p>\n<h1 id=\"Git-WebHooks-自动化部署\"><a href=\"#Git-WebHooks-自动化部署\" class=\"headerlink\" title=\"Git WebHooks 自动化部署\"></a>Git WebHooks 自动化部署</h1><p>是不是觉得每次写完文章还要登录服务器去执行一次<code>git pull</code>很麻烦？最起码对我这个“懒人”来说，这样很耗时啊</p>\n<p>幸运的是，<code>git</code>有很多钩子，可以在仓库发生变化的时候触发，类似<code>js</code>中的事件。<code>WebHooks</code>就是在你本地执行<code>git push</code>的时候，远程仓库会检测到仓库的变化，并发送一个请求到我们配置好的<code>WebHooks</code></p>\n<p>实现WebHooks自动化部署的推荐条件：</p>\n<ul>\n<li>服务器端配置<code>ssh</code>认证</li>\n<li>服务器端配置<code>nodejs</code>服务，接收<code>github</code>发来的请求</li>\n</ul>\n<h2 id=\"服务器webhook配置\"><a href=\"#服务器webhook配置\" class=\"headerlink\" title=\"服务器webhook配置\"></a>服务器webhook配置</h2><p>由于<code>hexo</code>是基于<code>NodeJS</code>的，所以这里用<code>NodeJS</code>来接收<code>github</code>的<code>push</code>事件。<br>安装依赖库<code>github-webhook-handler</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install github-webhook-handler</span><br></pre></td></tr></table></figure></p>\n<p>安装完成之后配置<code>webhooks.js</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;)</span><br><span class=\"line\">var createHandler = require(&apos;github-webhook-handler&apos;)</span><br><span class=\"line\">var handler = createHandler(&#123; path: &apos;/webhooks_push&apos;, secret: &apos;winsky_nju&apos; &#125;)</span><br><span class=\"line\">// 上面的 secret 保持和 GitHub 后台设置的一致</span><br><span class=\"line\">function run_cmd(cmd, args, callback) &#123;</span><br><span class=\"line\">  var spawn = require(&apos;child_process&apos;).spawn;</span><br><span class=\"line\">  var child = spawn(cmd, args);</span><br><span class=\"line\">  var resp = &quot;&quot;;</span><br><span class=\"line\">  child.stdout.on(&apos;data&apos;, function(buffer) &#123; resp += buffer.toString(); &#125;);</span><br><span class=\"line\">  child.stdout.on(&apos;end&apos;, function() &#123; callback (resp) &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handler.on(&apos;error&apos;, function (err) &#123;</span><br><span class=\"line\">  console.error(&apos;Error:&apos;, err.message)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">handler.on(&apos;push&apos;, function (event) &#123;</span><br><span class=\"line\">  console.log(&apos;Received a push event for %s to %s&apos;,</span><br><span class=\"line\">    event.payload.repository.name,</span><br><span class=\"line\">    event.payload.ref);</span><br><span class=\"line\">    run_cmd(&apos;sh&apos;, [&apos;./deploy.sh&apos;], function(text)&#123; console.log(text) &#125;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  http.createServer(function (req, res) &#123;</span><br><span class=\"line\">    handler(req, res, function (err) &#123;</span><br><span class=\"line\">      res.statusCode = 404</span><br><span class=\"line\">      res.end(&apos;no such location&apos;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;).listen(6666)</span><br><span class=\"line\">&#125;catch(err)&#123;</span><br><span class=\"line\">  console.error(&apos;Error:&apos;, err.message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>secret</code>要和<code>github</code>仓库中<code>webhooks</code>设置的一致，<code>6666</code>是监听端口可以随便改，不要冲突就行，<code>./deploy.sh</code>是接收到<code>push</code>事件时需要执行的<code>shell</code>脚本，与<code>webhooks.js</code>都存放在博客目录下；<code>path: &#39;/webhooks_push&#39;</code>是<code>github</code>通知服务器的地址</p>\n<p>因为我们的服务器上使用了<code>Nginx</code>，所以这里我们也需要使用<code>Nginx</code>来转发6666端口。在<code>Nginx</code>配置文件目录下新建一个<code>webhooks.conf</code>，内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name git.winsky.wang ;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\tproxy_set_header HOST $host;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">\t\tproxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://localhost:6666/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后配置<code>git.winsky.wang</code>的域名解析</p>\n<p>最后git上配置的地址是：<code>http://git.winsky.wang/webhooks_push</code></p>\n<h2 id=\"配置-deploy-sh\"><a href=\"#配置-deploy-sh\" class=\"headerlink\" title=\"配置./deploy.sh\"></a>配置<code>./deploy.sh</code></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/blog/</span><br><span class=\"line\">git reset --hard</span><br><span class=\"line\">git pull origin master  </span><br><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n<p>然后运行<code>node webhooks.js</code>，就可以实现本地更新<code>push</code>到<code>github</code>，服务器会自动更新部署博客。</p>\n<p>最后要将进程加入守护，通过<code>pm2</code>来实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install pm2 --global</span><br></pre></td></tr></table></figure></p>\n<p>然后通过<code>pm2</code>启动<code>webhooks.js</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start /home/blog/webhooks.js</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"自启动\"><a href=\"#自启动\" class=\"headerlink\" title=\"自启动\"></a>自启动</h2><p>参考[服务器重启后自动运行hexo服务][]</p>\n<blockquote>\n<p><a href=\"http://www.gaoshilei.com/2017/10/30/hexo-init/\" target=\"_blank\" rel=\"noopener\">快速搭建Hexo博客+webhook自动部署+全站HTTPS</a></p>\n<p><a href=\"https://excaliburhan.com/post/add-webhooks-to-your-project.html\" target=\"_blank\" rel=\"noopener\">给你的项目增加Webhooks，自动进行部署</a></p>\n<p><a href=\"https://aotu.io/notes/2016/01/07/auto-deploy-website-by-webhooks-of-github/index.html\" target=\"_blank\" rel=\"noopener\">使用Github的webhooks进行网站自动化部署</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>博客雏形搭建好了之后，又浪了几天没有折腾。昨天晚上自己买了个域名，想着是时候好好把博客完善起来了。下面继续开始折腾…</p>\n<p>前面我们介绍了如何在<a href=\"https://bwh1.net/aff.php?aff=29080\" title=\"搬瓦工VPS\" target=\"_blank\" rel=\"noopener\">搬瓦工VPS</a>上<a href=\"https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/\" title=\"快速搭建自己的个人博客\">快速搭建自己的个人博客</a>，做了相关的<a href=\"https://blog.winsky.wang/2018/02/04/Hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/\" title=\"主题美化\">主题美化</a>，同时也进行了简单的<a href=\"https://blog.winsky.wang/2018/02/06/%E5%A6%82%E4%BD%95%E8%AE%A9%E8%B0%B7%E6%AD%8C%E5%92%8C%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/\" title=\"SEO优化\">SEO优化</a>。</p>\n<p>在这个过程中，每次需要更新，我都是直接手动将文件拖到VPS上的。作为一个“懒人”，这个过程还是太烦了。今天我们就来学习一下如何自动将博客部署到VPS上。</p>","more":"<p>这篇文章重点介绍如何通过git webhooks实现远程vps的自动部署</p>\n<p>具体流程：先在本机搭建好hexo环境，push到git仓库，再部署到服务器上</p>\n<h1 id=\"本地安配置hexo环境\"><a href=\"#本地安配置hexo环境\" class=\"headerlink\" title=\"本地安配置hexo环境\"></a>本地安配置hexo环境</h1><p>在本地用hexo搭建一个个人博客很简单，分分钟可以搞定。如果以前没有接触过，可以参考我前面的博文：<a href=\"https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/\" title=\"快速搭建自己的个人博客\">个人博客Hexo搭建</a></p>\n<h2 id=\"提交到远程仓库\"><a href=\"#提交到远程仓库\" class=\"headerlink\" title=\"提交到远程仓库\"></a>提交到远程仓库</h2><p>首先需要一个在线的仓库，可以选择<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>或者<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding.net</a>。这里我选择了常用的<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>先在<code>github</code>上创建一个项目<code>HexoBlog</code>，并拷贝仓库<code>ssh</code>地址（使用<code>ssh</code>需要配置<code>ssh</code>公钥和私钥，如果不会配可以<code>google</code>一下或使用<code>http</code>地址）。注意，如果需要通过webhooks实现服务器自动化部署，推荐使用ssh会更方便一些</p>\n<p>然后在本地<code>hexo</code>目录初始化本地仓库并提交到<code>github</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\">git remote add origin git@github.com:winsky94/HexoBlog.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></p>\n<p>注意，如果以前没有配置<code>github</code>的<code>SSH</code>提交，可以参考这篇博文<a href=\"http://blog.csdn.net/oDeviloo/article/details/52654590\" title=\"GitHub的SSH提交配置\" target=\"_blank\" rel=\"noopener\">GitHub的SSH提交配置</a></p>\n<h1 id=\"VPS配置\"><a href=\"#VPS配置\" class=\"headerlink\" title=\"VPS配置\"></a>VPS配置</h1><p>我使用的是<a href=\"https://bwh1.net/aff.php?aff=29080\" title=\"搬瓦工VPS\" target=\"_blank\" rel=\"noopener\">搬瓦工VPS</a>。服务器上安装好了<code>nodejs,git,nginx</code>，具体不会的可以谷歌一下</p>\n<h3 id=\"将代码从github上拉取下来\"><a href=\"#将代码从github上拉取下来\" class=\"headerlink\" title=\"将代码从github上拉取下来\"></a>将代码从<code>github</code>上拉取下来</h3><p>同样，这里也需要在服务器上配置<code>github</code>的<code>SSH</code>登录。参考<a href=\"http://blog.csdn.net/oDeviloo/article/details/52654590\" title=\"GitHub的SSH提交配置\" target=\"_blank\" rel=\"noopener\">GitHub的SSH提交配置</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /home/blog</span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin git@github.com:winsky94/HexoBlog.git</span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装hexo模块\"><a href=\"#安装hexo模块\" class=\"headerlink\" title=\"安装hexo模块\"></a>安装hexo模块</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/blog</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2 id=\"hexo静态编译\"><a href=\"#hexo静态编译\" class=\"headerlink\" title=\"hexo静态编译\"></a>hexo静态编译</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<p>这一步会在<code>/home/blog</code>目录下生成一个<code>public</code>目录，这里面就是编译后的静态文件目录，其实这时候直接访问里面的html文件即可看到完整的效果了，只不过还需要一个服务来运行它</p>\n<h2 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h2><p>进入nginx服务配置文件目录<code>/usr/local/nginx/conf/vhost</code>，新建一个配置文件<code>blog.conf</code>，内容为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tlisten 80;</span><br><span class=\"line\">    server_name blog.winsky.wang ;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\tproxy_set_header HOST $host;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">\t\tproxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">   \tproxy_pass http://localhost:4000/;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>重载nginx，使配置生效<code>nginx -s reload</code>。然后就可以通过<a href=\"http://blog.winsky.wang\">http://blog.winsky.wang</a>来访问博客了</p>\n<h1 id=\"Git-WebHooks-自动化部署\"><a href=\"#Git-WebHooks-自动化部署\" class=\"headerlink\" title=\"Git WebHooks 自动化部署\"></a>Git WebHooks 自动化部署</h1><p>是不是觉得每次写完文章还要登录服务器去执行一次<code>git pull</code>很麻烦？最起码对我这个“懒人”来说，这样很耗时啊</p>\n<p>幸运的是，<code>git</code>有很多钩子，可以在仓库发生变化的时候触发，类似<code>js</code>中的事件。<code>WebHooks</code>就是在你本地执行<code>git push</code>的时候，远程仓库会检测到仓库的变化，并发送一个请求到我们配置好的<code>WebHooks</code></p>\n<p>实现WebHooks自动化部署的推荐条件：</p>\n<ul>\n<li>服务器端配置<code>ssh</code>认证</li>\n<li>服务器端配置<code>nodejs</code>服务，接收<code>github</code>发来的请求</li>\n</ul>\n<h2 id=\"服务器webhook配置\"><a href=\"#服务器webhook配置\" class=\"headerlink\" title=\"服务器webhook配置\"></a>服务器webhook配置</h2><p>由于<code>hexo</code>是基于<code>NodeJS</code>的，所以这里用<code>NodeJS</code>来接收<code>github</code>的<code>push</code>事件。<br>安装依赖库<code>github-webhook-handler</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install github-webhook-handler</span><br></pre></td></tr></table></figure></p>\n<p>安装完成之后配置<code>webhooks.js</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;)</span><br><span class=\"line\">var createHandler = require(&apos;github-webhook-handler&apos;)</span><br><span class=\"line\">var handler = createHandler(&#123; path: &apos;/webhooks_push&apos;, secret: &apos;winsky_nju&apos; &#125;)</span><br><span class=\"line\">// 上面的 secret 保持和 GitHub 后台设置的一致</span><br><span class=\"line\">function run_cmd(cmd, args, callback) &#123;</span><br><span class=\"line\">  var spawn = require(&apos;child_process&apos;).spawn;</span><br><span class=\"line\">  var child = spawn(cmd, args);</span><br><span class=\"line\">  var resp = &quot;&quot;;</span><br><span class=\"line\">  child.stdout.on(&apos;data&apos;, function(buffer) &#123; resp += buffer.toString(); &#125;);</span><br><span class=\"line\">  child.stdout.on(&apos;end&apos;, function() &#123; callback (resp) &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handler.on(&apos;error&apos;, function (err) &#123;</span><br><span class=\"line\">  console.error(&apos;Error:&apos;, err.message)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">handler.on(&apos;push&apos;, function (event) &#123;</span><br><span class=\"line\">  console.log(&apos;Received a push event for %s to %s&apos;,</span><br><span class=\"line\">    event.payload.repository.name,</span><br><span class=\"line\">    event.payload.ref);</span><br><span class=\"line\">    run_cmd(&apos;sh&apos;, [&apos;./deploy.sh&apos;], function(text)&#123; console.log(text) &#125;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  http.createServer(function (req, res) &#123;</span><br><span class=\"line\">    handler(req, res, function (err) &#123;</span><br><span class=\"line\">      res.statusCode = 404</span><br><span class=\"line\">      res.end(&apos;no such location&apos;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;).listen(6666)</span><br><span class=\"line\">&#125;catch(err)&#123;</span><br><span class=\"line\">  console.error(&apos;Error:&apos;, err.message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>secret</code>要和<code>github</code>仓库中<code>webhooks</code>设置的一致，<code>6666</code>是监听端口可以随便改，不要冲突就行，<code>./deploy.sh</code>是接收到<code>push</code>事件时需要执行的<code>shell</code>脚本，与<code>webhooks.js</code>都存放在博客目录下；<code>path: &#39;/webhooks_push&#39;</code>是<code>github</code>通知服务器的地址</p>\n<p>因为我们的服务器上使用了<code>Nginx</code>，所以这里我们也需要使用<code>Nginx</code>来转发6666端口。在<code>Nginx</code>配置文件目录下新建一个<code>webhooks.conf</code>，内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name git.winsky.wang ;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\tproxy_set_header HOST $host;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">\t\tproxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://localhost:6666/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后配置<code>git.winsky.wang</code>的域名解析</p>\n<p>最后git上配置的地址是：<code>http://git.winsky.wang/webhooks_push</code></p>\n<h2 id=\"配置-deploy-sh\"><a href=\"#配置-deploy-sh\" class=\"headerlink\" title=\"配置./deploy.sh\"></a>配置<code>./deploy.sh</code></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/blog/</span><br><span class=\"line\">git reset --hard</span><br><span class=\"line\">git pull origin master  </span><br><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n<p>然后运行<code>node webhooks.js</code>，就可以实现本地更新<code>push</code>到<code>github</code>，服务器会自动更新部署博客。</p>\n<p>最后要将进程加入守护，通过<code>pm2</code>来实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install pm2 --global</span><br></pre></td></tr></table></figure></p>\n<p>然后通过<code>pm2</code>启动<code>webhooks.js</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start /home/blog/webhooks.js</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"自启动\"><a href=\"#自启动\" class=\"headerlink\" title=\"自启动\"></a>自启动</h2><p>参考[服务器重启后自动运行hexo服务][]</p>\n<blockquote>\n<p><a href=\"http://www.gaoshilei.com/2017/10/30/hexo-init/\" target=\"_blank\" rel=\"noopener\">快速搭建Hexo博客+webhook自动部署+全站HTTPS</a></p>\n<p><a href=\"https://excaliburhan.com/post/add-webhooks-to-your-project.html\" target=\"_blank\" rel=\"noopener\">给你的项目增加Webhooks，自动进行部署</a></p>\n<p><a href=\"https://aotu.io/notes/2016/01/07/auto-deploy-website-by-webhooks-of-github/index.html\" target=\"_blank\" rel=\"noopener\">使用Github的webhooks进行网站自动化部署</a></p>\n</blockquote>"},{"title":"修改Github项目的语言分类","date":"2018-02-20T07:26:14.000Z","updated":"2018-02-20T07:26:14.000Z","_content":"\n自己辛辛苦苦写的`Java`项目，因其中包含了一定了前端代码，在传到`Github`上被标记成了`JavaScript`语言，这是一件多么蛋疼的事儿\n\n那如何修改Github项目的语言分类呢？？\n\n<!-- more -->\n\n在开始正文之前，请允许我先描述一下遇到这个问题的背景。\n\n早上起来看到论坛上有人说[TaoCode][1]快关闭了，打开电脑登录一看还真是\n![taocode下线通知][2]\n\n想起来，`TaoCode SVN`还是上软工2开始接触的第一个版本控制工具。当时，钦哥哥要求将代码部署在`SVN`上，本来是要自己搭建`SVN`服务器的，后来我们取巧，发现`TaoCode`已经帮我们部署好了`SVN`服务器，于是我们便欢快地注册账号使用起来（注册于`2014-09-20`）\n\n这一用便是三四年的时间，虽然大四在阿里实习的时候，接触到了另一个版本控制工具`Git`，便不怎么使用了`TaoCode SVN`了。但可以说`TaoCode`陪伴我从一个啥都不会的小白成长为如今的合格 ~~程序猿~~ 研发工程师，此中别有一番感情[捂脸]\n\n在`TaoCode`上还存在着大大小小近10个项目，如今`TaoCode`即将停止服务，所以我便想着将自己的代码迁移到[Github][3]上来。`Github`本身提供了从`SVN`导入仓库的功能，这个使用起来很方便。然鹅，导入的项目被`Github`自动识别成了`JavaScript`语言，我可是纯正的`Java web`项目啊。那要怎么修改Github项目的语言分类呢？？\n\n注意，前方高能~~~\n\n下面正式介绍如何修改Github项目的语言分类\n\n在项目目录中创建一个名为`.gitattributes`的文件，添加以下代码：\n```\n*.js linguist-language=Java\n```\n然后重新上传到`Github`上，就可以发现项目的语言变成`Java`了，其他语言同理\n\n根据我的理解，如果项目中没有`.gitattributes`的文件来显式指出项目的语言，那么`Github`会自动根据项目文件出现最多的后缀来判断项目的语言，所以，一个`Java web`项目很容易就被判定成`JavaScript`语言\n\n上述的解决办法是通过将`.js`结尾的文件当成`Java`文件来统计，类似的还有\n```\n*.html linguist-language=Java\n*.js linguist-language=Java\n*.css linguist-language=Java\n....\n```\n其他可以自由变通\n\n[1]: http://code.taobao.org/ \"TaoCode\"\n[2]: http://taocode-uploads.oss-cn-hangzhou.aliyuncs.com/Snip20180125_2.png \"taocode下线通知\"\n[3]: https://github.com/winsky94 \"Github\"\n","source":"_posts/Git/修改Github项目的语言分类.md","raw":"---\ntitle: 修改Github项目的语言分类\ndate: 2018-02-20 15:26:14\nupdated: 2018-02-20 15:26:14\ntags:\n  - Git\ncategories: \n  - Git\n---\n\n自己辛辛苦苦写的`Java`项目，因其中包含了一定了前端代码，在传到`Github`上被标记成了`JavaScript`语言，这是一件多么蛋疼的事儿\n\n那如何修改Github项目的语言分类呢？？\n\n<!-- more -->\n\n在开始正文之前，请允许我先描述一下遇到这个问题的背景。\n\n早上起来看到论坛上有人说[TaoCode][1]快关闭了，打开电脑登录一看还真是\n![taocode下线通知][2]\n\n想起来，`TaoCode SVN`还是上软工2开始接触的第一个版本控制工具。当时，钦哥哥要求将代码部署在`SVN`上，本来是要自己搭建`SVN`服务器的，后来我们取巧，发现`TaoCode`已经帮我们部署好了`SVN`服务器，于是我们便欢快地注册账号使用起来（注册于`2014-09-20`）\n\n这一用便是三四年的时间，虽然大四在阿里实习的时候，接触到了另一个版本控制工具`Git`，便不怎么使用了`TaoCode SVN`了。但可以说`TaoCode`陪伴我从一个啥都不会的小白成长为如今的合格 ~~程序猿~~ 研发工程师，此中别有一番感情[捂脸]\n\n在`TaoCode`上还存在着大大小小近10个项目，如今`TaoCode`即将停止服务，所以我便想着将自己的代码迁移到[Github][3]上来。`Github`本身提供了从`SVN`导入仓库的功能，这个使用起来很方便。然鹅，导入的项目被`Github`自动识别成了`JavaScript`语言，我可是纯正的`Java web`项目啊。那要怎么修改Github项目的语言分类呢？？\n\n注意，前方高能~~~\n\n下面正式介绍如何修改Github项目的语言分类\n\n在项目目录中创建一个名为`.gitattributes`的文件，添加以下代码：\n```\n*.js linguist-language=Java\n```\n然后重新上传到`Github`上，就可以发现项目的语言变成`Java`了，其他语言同理\n\n根据我的理解，如果项目中没有`.gitattributes`的文件来显式指出项目的语言，那么`Github`会自动根据项目文件出现最多的后缀来判断项目的语言，所以，一个`Java web`项目很容易就被判定成`JavaScript`语言\n\n上述的解决办法是通过将`.js`结尾的文件当成`Java`文件来统计，类似的还有\n```\n*.html linguist-language=Java\n*.js linguist-language=Java\n*.css linguist-language=Java\n....\n```\n其他可以自由变通\n\n[1]: http://code.taobao.org/ \"TaoCode\"\n[2]: http://taocode-uploads.oss-cn-hangzhou.aliyuncs.com/Snip20180125_2.png \"taocode下线通知\"\n[3]: https://github.com/winsky94 \"Github\"\n","slug":"Git/修改Github项目的语言分类","published":1,"_id":"cjf4zg7kq000iwoy67r80vww9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>自己辛辛苦苦写的<code>Java</code>项目，因其中包含了一定了前端代码，在传到<code>Github</code>上被标记成了<code>JavaScript</code>语言，这是一件多么蛋疼的事儿</p>\n<p>那如何修改Github项目的语言分类呢？？</p>\n<a id=\"more\"></a>\n<p>在开始正文之前，请允许我先描述一下遇到这个问题的背景。</p>\n<p>早上起来看到论坛上有人说<a href=\"http://code.taobao.org/\" title=\"TaoCode\" target=\"_blank\" rel=\"noopener\">TaoCode</a>快关闭了，打开电脑登录一看还真是<br><img src=\"http://taocode-uploads.oss-cn-hangzhou.aliyuncs.com/Snip20180125_2.png\" alt=\"taocode下线通知\" title=\"taocode下线通知\"></p>\n<p>想起来，<code>TaoCode SVN</code>还是上软工2开始接触的第一个版本控制工具。当时，钦哥哥要求将代码部署在<code>SVN</code>上，本来是要自己搭建<code>SVN</code>服务器的，后来我们取巧，发现<code>TaoCode</code>已经帮我们部署好了<code>SVN</code>服务器，于是我们便欢快地注册账号使用起来（注册于<code>2014-09-20</code>）</p>\n<p>这一用便是三四年的时间，虽然大四在阿里实习的时候，接触到了另一个版本控制工具<code>Git</code>，便不怎么使用了<code>TaoCode SVN</code>了。但可以说<code>TaoCode</code>陪伴我从一个啥都不会的小白成长为如今的合格 <del>程序猿</del> 研发工程师，此中别有一番感情[捂脸]</p>\n<p>在<code>TaoCode</code>上还存在着大大小小近10个项目，如今<code>TaoCode</code>即将停止服务，所以我便想着将自己的代码迁移到<a href=\"https://github.com/winsky94\" title=\"Github\" target=\"_blank\" rel=\"noopener\">Github</a>上来。<code>Github</code>本身提供了从<code>SVN</code>导入仓库的功能，这个使用起来很方便。然鹅，导入的项目被<code>Github</code>自动识别成了<code>JavaScript</code>语言，我可是纯正的<code>Java web</code>项目啊。那要怎么修改Github项目的语言分类呢？？</p>\n<p>注意，前方高能~~~</p>\n<p>下面正式介绍如何修改Github项目的语言分类</p>\n<p>在项目目录中创建一个名为<code>.gitattributes</code>的文件，添加以下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.js linguist-language=Java</span><br></pre></td></tr></table></figure></p>\n<p>然后重新上传到<code>Github</code>上，就可以发现项目的语言变成<code>Java</code>了，其他语言同理</p>\n<p>根据我的理解，如果项目中没有<code>.gitattributes</code>的文件来显式指出项目的语言，那么<code>Github</code>会自动根据项目文件出现最多的后缀来判断项目的语言，所以，一个<code>Java web</code>项目很容易就被判定成<code>JavaScript</code>语言</p>\n<p>上述的解决办法是通过将<code>.js</code>结尾的文件当成<code>Java</code>文件来统计，类似的还有<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.html linguist-language=Java</span><br><span class=\"line\">*.js linguist-language=Java</span><br><span class=\"line\">*.css linguist-language=Java</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure></p>\n<p>其他可以自由变通</p>\n","site":{"data":{}},"excerpt":"<p>自己辛辛苦苦写的<code>Java</code>项目，因其中包含了一定了前端代码，在传到<code>Github</code>上被标记成了<code>JavaScript</code>语言，这是一件多么蛋疼的事儿</p>\n<p>那如何修改Github项目的语言分类呢？？</p>","more":"<p>在开始正文之前，请允许我先描述一下遇到这个问题的背景。</p>\n<p>早上起来看到论坛上有人说<a href=\"http://code.taobao.org/\" title=\"TaoCode\" target=\"_blank\" rel=\"noopener\">TaoCode</a>快关闭了，打开电脑登录一看还真是<br><img src=\"http://taocode-uploads.oss-cn-hangzhou.aliyuncs.com/Snip20180125_2.png\" alt=\"taocode下线通知\" title=\"taocode下线通知\"></p>\n<p>想起来，<code>TaoCode SVN</code>还是上软工2开始接触的第一个版本控制工具。当时，钦哥哥要求将代码部署在<code>SVN</code>上，本来是要自己搭建<code>SVN</code>服务器的，后来我们取巧，发现<code>TaoCode</code>已经帮我们部署好了<code>SVN</code>服务器，于是我们便欢快地注册账号使用起来（注册于<code>2014-09-20</code>）</p>\n<p>这一用便是三四年的时间，虽然大四在阿里实习的时候，接触到了另一个版本控制工具<code>Git</code>，便不怎么使用了<code>TaoCode SVN</code>了。但可以说<code>TaoCode</code>陪伴我从一个啥都不会的小白成长为如今的合格 <del>程序猿</del> 研发工程师，此中别有一番感情[捂脸]</p>\n<p>在<code>TaoCode</code>上还存在着大大小小近10个项目，如今<code>TaoCode</code>即将停止服务，所以我便想着将自己的代码迁移到<a href=\"https://github.com/winsky94\" title=\"Github\" target=\"_blank\" rel=\"noopener\">Github</a>上来。<code>Github</code>本身提供了从<code>SVN</code>导入仓库的功能，这个使用起来很方便。然鹅，导入的项目被<code>Github</code>自动识别成了<code>JavaScript</code>语言，我可是纯正的<code>Java web</code>项目啊。那要怎么修改Github项目的语言分类呢？？</p>\n<p>注意，前方高能~~~</p>\n<p>下面正式介绍如何修改Github项目的语言分类</p>\n<p>在项目目录中创建一个名为<code>.gitattributes</code>的文件，添加以下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.js linguist-language=Java</span><br></pre></td></tr></table></figure></p>\n<p>然后重新上传到<code>Github</code>上，就可以发现项目的语言变成<code>Java</code>了，其他语言同理</p>\n<p>根据我的理解，如果项目中没有<code>.gitattributes</code>的文件来显式指出项目的语言，那么<code>Github</code>会自动根据项目文件出现最多的后缀来判断项目的语言，所以，一个<code>Java web</code>项目很容易就被判定成<code>JavaScript</code>语言</p>\n<p>上述的解决办法是通过将<code>.js</code>结尾的文件当成<code>Java</code>文件来统计，类似的还有<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.html linguist-language=Java</span><br><span class=\"line\">*.js linguist-language=Java</span><br><span class=\"line\">*.css linguist-language=Java</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure></p>\n<p>其他可以自由变通</p>"},{"title":"博客自启动","date":"2018-02-10T07:21:43.000Z","updated":"2018-02-10T07:21:43.000Z","_content":"折腾到现在，整个博客终于快弄好了。搭建教程参照：[快速搭建自己的个人博客][1]，[主题美化][2]，[自动将更新部署到VPS][3]\n\n但是，当服务器重启后，博客不能自启动，每次需要手动登录服务器来启动服务，这也很麻烦啊（摊手）\n\n今天就来介绍一下如何配置博客的自启动\n\n<!-- more -->\n\n# 自启动脚本\n编写自启动脚本`auto_start.sh`\n```\nsource /etc/profile\nsource ~/bash_profile\n\ncd /home/blog\n\n# webhook服务启动\n/sbin/runuser -l root -c \"pm2 start /home/blog/webhooks.js\"\n\n# 启动博客\nhexo s &\n```\n\n# 执行脚本\n我使用的服务器版本是`CentOS`，其他版本的`Linux`应该也大同小异\n\n编辑`/etc/rc.d/rc.local`，添加刚才的脚本：`/home/blog/auto_start.sh 2>&1 > /dev/null &`。注意还要查看一下`/etc/rc.d/rc.local`文件的执行权限，如果没有需要赋予执行权限\n\n\n[1]: https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/ \"快速搭建自己的个人博客\"\n[2]: https://blog.winsky.wang/2018/02/04/Hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/ \"主题美化\"\n[3]: https://blog.winsky.wang/2018/02/10/%E8%87%AA%E5%8A%A8%E5%B0%86%E6%9B%B4%E6%96%B0%E9%83%A8%E7%BD%B2%E5%88%B0VPS/ \"自动将更新部署到VPS\"","source":"_posts/Hexo博客/博客自启动.md","raw":"---\ntitle: 博客自启动\ndate: 2018-02-10 15:21:43\nupdated: 2018-02-10 15:21:43\ntags:\n  - HEXO\n  - 博客\ncategories: \n  - Hexo博客\n---\n折腾到现在，整个博客终于快弄好了。搭建教程参照：[快速搭建自己的个人博客][1]，[主题美化][2]，[自动将更新部署到VPS][3]\n\n但是，当服务器重启后，博客不能自启动，每次需要手动登录服务器来启动服务，这也很麻烦啊（摊手）\n\n今天就来介绍一下如何配置博客的自启动\n\n<!-- more -->\n\n# 自启动脚本\n编写自启动脚本`auto_start.sh`\n```\nsource /etc/profile\nsource ~/bash_profile\n\ncd /home/blog\n\n# webhook服务启动\n/sbin/runuser -l root -c \"pm2 start /home/blog/webhooks.js\"\n\n# 启动博客\nhexo s &\n```\n\n# 执行脚本\n我使用的服务器版本是`CentOS`，其他版本的`Linux`应该也大同小异\n\n编辑`/etc/rc.d/rc.local`，添加刚才的脚本：`/home/blog/auto_start.sh 2>&1 > /dev/null &`。注意还要查看一下`/etc/rc.d/rc.local`文件的执行权限，如果没有需要赋予执行权限\n\n\n[1]: https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/ \"快速搭建自己的个人博客\"\n[2]: https://blog.winsky.wang/2018/02/04/Hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/ \"主题美化\"\n[3]: https://blog.winsky.wang/2018/02/10/%E8%87%AA%E5%8A%A8%E5%B0%86%E6%9B%B4%E6%96%B0%E9%83%A8%E7%BD%B2%E5%88%B0VPS/ \"自动将更新部署到VPS\"","slug":"Hexo博客/博客自启动","published":1,"_id":"cjf4zhwbl000nwoy6p2z003n2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>折腾到现在，整个博客终于快弄好了。搭建教程参照：<a href=\"https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/\" title=\"快速搭建自己的个人博客\">快速搭建自己的个人博客</a>，<a href=\"https://blog.winsky.wang/2018/02/04/Hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/\" title=\"主题美化\">主题美化</a>，<a href=\"https://blog.winsky.wang/2018/02/10/%E8%87%AA%E5%8A%A8%E5%B0%86%E6%9B%B4%E6%96%B0%E9%83%A8%E7%BD%B2%E5%88%B0VPS/\" title=\"自动将更新部署到VPS\">自动将更新部署到VPS</a></p>\n<p>但是，当服务器重启后，博客不能自启动，每次需要手动登录服务器来启动服务，这也很麻烦啊（摊手）</p>\n<p>今天就来介绍一下如何配置博客的自启动</p>\n<a id=\"more\"></a>\n<h1 id=\"自启动脚本\"><a href=\"#自启动脚本\" class=\"headerlink\" title=\"自启动脚本\"></a>自启动脚本</h1><p>编写自启动脚本<code>auto_start.sh</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br><span class=\"line\">source ~/bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/blog</span><br><span class=\"line\"></span><br><span class=\"line\"># webhook服务启动</span><br><span class=\"line\">/sbin/runuser -l root -c &quot;pm2 start /home/blog/webhooks.js&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动博客</span><br><span class=\"line\">hexo s &amp;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"执行脚本\"><a href=\"#执行脚本\" class=\"headerlink\" title=\"执行脚本\"></a>执行脚本</h1><p>我使用的服务器版本是<code>CentOS</code>，其他版本的<code>Linux</code>应该也大同小异</p>\n<p>编辑<code>/etc/rc.d/rc.local</code>，添加刚才的脚本：<code>/home/blog/auto_start.sh 2&gt;&amp;1 &gt; /dev/null &amp;</code>。注意还要查看一下<code>/etc/rc.d/rc.local</code>文件的执行权限，如果没有需要赋予执行权限</p>\n","site":{"data":{}},"excerpt":"<p>折腾到现在，整个博客终于快弄好了。搭建教程参照：<a href=\"https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/\" title=\"快速搭建自己的个人博客\">快速搭建自己的个人博客</a>，<a href=\"https://blog.winsky.wang/2018/02/04/Hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/\" title=\"主题美化\">主题美化</a>，<a href=\"https://blog.winsky.wang/2018/02/10/%E8%87%AA%E5%8A%A8%E5%B0%86%E6%9B%B4%E6%96%B0%E9%83%A8%E7%BD%B2%E5%88%B0VPS/\" title=\"自动将更新部署到VPS\">自动将更新部署到VPS</a></p>\n<p>但是，当服务器重启后，博客不能自启动，每次需要手动登录服务器来启动服务，这也很麻烦啊（摊手）</p>\n<p>今天就来介绍一下如何配置博客的自启动</p>","more":"<h1 id=\"自启动脚本\"><a href=\"#自启动脚本\" class=\"headerlink\" title=\"自启动脚本\"></a>自启动脚本</h1><p>编写自启动脚本<code>auto_start.sh</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br><span class=\"line\">source ~/bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/blog</span><br><span class=\"line\"></span><br><span class=\"line\"># webhook服务启动</span><br><span class=\"line\">/sbin/runuser -l root -c &quot;pm2 start /home/blog/webhooks.js&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动博客</span><br><span class=\"line\">hexo s &amp;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"执行脚本\"><a href=\"#执行脚本\" class=\"headerlink\" title=\"执行脚本\"></a>执行脚本</h1><p>我使用的服务器版本是<code>CentOS</code>，其他版本的<code>Linux</code>应该也大同小异</p>\n<p>编辑<code>/etc/rc.d/rc.local</code>，添加刚才的脚本：<code>/home/blog/auto_start.sh 2&gt;&amp;1 &gt; /dev/null &amp;</code>。注意还要查看一下<code>/etc/rc.d/rc.local</code>文件的执行权限，如果没有需要赋予执行权限</p>"},{"title":"个人博客Hexo搭建","date":"2018-02-03T09:49:21.000Z","updated":"2018-02-04T02:26:43.000Z","_content":"# 前言\n最近沉迷各种折腾，无心学习 T^T\n\nVPS基本折腾完了，现在又想开始折腾自己搭建一个博客来耍耍\n\n这篇笔记的博客也是搭建在[搬瓦工VPS][1]上的\n\n<!-- more -->\n\n# 安装过程\n- 安装[nodejs](http://nodejs.org/)\n- 安装[git](http://git-scm.com/)\n- 安装hexo\n    - `npm install -g hexo`\n- 新建一个文件\n    - `mkdir blog`\n- 生成模板\n    - `cd blog`\n    - `hexo init`\n- 安装依赖\n    - `cd blog`\n    - `npm install`\n- 启动服务\n    - `hexo s`，当控制台提示如下信息时表示启动成功\n    ```\n    [root@bwh themes]# hexo s\n    INFO  Start processing\n    INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n    ```\n    - 通过`localhost:4000`来访问博客\n\n# 切换主题\n- 可以在[Themes-Hexo](https://hexo.io/themes/)页面查看各种各样的主题\n- 将喜欢的主题下载下来，放到博客目录下的`themes`文件夹\n- 之后修改博客的`_config.yml`文件\n```\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next # 修改成你的主题文件夹名\n```\n- Hexo 默认主题是 landscape。我使用的是next主题，清晰简约，非常符合我的喜好。Next主题的配置可以参考\n> [Next主题下载](https://github.com/theme-next/hexo-theme-next/releases)\n\n> [Next主题中文文档](http://theme-next.iissnan.com/)\n- 博客的具体配置，后面专门开一篇博文来记录一下\n\n*** 2018-02-04 更新***\n[Hexo博客Next主题配置][2]\n\n\n# 参考文章\n> [Hexo](https://hexo.io/)\n\n> [Hexo搭建博客教程](https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/)\n\n> [Next主题中文文档](http://theme-next.iissnan.com/)\n\n\n[1]: https://bwh1.net/aff.php?aff=29080 \"搬瓦工VPS\"\n[2]: https://blog.winsky.wang/2018/02/04/Hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/ \"Hexo博客Next主题配置\"","source":"_posts/Hexo博客/个人博客Hexo搭建.md","raw":"---\ntitle: 个人博客Hexo搭建\ndate: 2018-02-03 17:49:21\nupdated: 2018-02-04 10:26:43\ntags:\n\t- HEXO\n\t- 博客\ncategories: \n    - Hexo博客\n---\n# 前言\n最近沉迷各种折腾，无心学习 T^T\n\nVPS基本折腾完了，现在又想开始折腾自己搭建一个博客来耍耍\n\n这篇笔记的博客也是搭建在[搬瓦工VPS][1]上的\n\n<!-- more -->\n\n# 安装过程\n- 安装[nodejs](http://nodejs.org/)\n- 安装[git](http://git-scm.com/)\n- 安装hexo\n    - `npm install -g hexo`\n- 新建一个文件\n    - `mkdir blog`\n- 生成模板\n    - `cd blog`\n    - `hexo init`\n- 安装依赖\n    - `cd blog`\n    - `npm install`\n- 启动服务\n    - `hexo s`，当控制台提示如下信息时表示启动成功\n    ```\n    [root@bwh themes]# hexo s\n    INFO  Start processing\n    INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n    ```\n    - 通过`localhost:4000`来访问博客\n\n# 切换主题\n- 可以在[Themes-Hexo](https://hexo.io/themes/)页面查看各种各样的主题\n- 将喜欢的主题下载下来，放到博客目录下的`themes`文件夹\n- 之后修改博客的`_config.yml`文件\n```\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next # 修改成你的主题文件夹名\n```\n- Hexo 默认主题是 landscape。我使用的是next主题，清晰简约，非常符合我的喜好。Next主题的配置可以参考\n> [Next主题下载](https://github.com/theme-next/hexo-theme-next/releases)\n\n> [Next主题中文文档](http://theme-next.iissnan.com/)\n- 博客的具体配置，后面专门开一篇博文来记录一下\n\n*** 2018-02-04 更新***\n[Hexo博客Next主题配置][2]\n\n\n# 参考文章\n> [Hexo](https://hexo.io/)\n\n> [Hexo搭建博客教程](https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/)\n\n> [Next主题中文文档](http://theme-next.iissnan.com/)\n\n\n[1]: https://bwh1.net/aff.php?aff=29080 \"搬瓦工VPS\"\n[2]: https://blog.winsky.wang/2018/02/04/Hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/ \"Hexo博客Next主题配置\"","slug":"Hexo博客/个人博客Hexo搭建","published":1,"_id":"cjf4zhys6000rwoy61ue9ipvs","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近沉迷各种折腾，无心学习 T^T</p>\n<p>VPS基本折腾完了，现在又想开始折腾自己搭建一个博客来耍耍</p>\n<p>这篇笔记的博客也是搭建在<a href=\"https://bwh1.net/aff.php?aff=29080\" title=\"搬瓦工VPS\" target=\"_blank\" rel=\"noopener\">搬瓦工VPS</a>上的</p>\n<a id=\"more\"></a>\n<h1 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h1><ul>\n<li>安装<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">nodejs</a></li>\n<li>安装<a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"noopener\">git</a></li>\n<li>安装hexo<ul>\n<li><code>npm install -g hexo</code></li>\n</ul>\n</li>\n<li>新建一个文件<ul>\n<li><code>mkdir blog</code></li>\n</ul>\n</li>\n<li>生成模板<ul>\n<li><code>cd blog</code></li>\n<li><code>hexo init</code></li>\n</ul>\n</li>\n<li>安装依赖<ul>\n<li><code>cd blog</code></li>\n<li><code>npm install</code></li>\n</ul>\n</li>\n<li><p>启动服务</p>\n<ul>\n<li><p><code>hexo s</code>，当控制台提示如下信息时表示启动成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@bwh themes]# hexo s</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过<code>localhost:4000</code>来访问博客</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"切换主题\"><a href=\"#切换主题\" class=\"headerlink\" title=\"切换主题\"></a>切换主题</h1><ul>\n<li>可以在<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">Themes-Hexo</a>页面查看各种各样的主题</li>\n<li>将喜欢的主题下载下来，放到博客目录下的<code>themes</code>文件夹</li>\n<li><p>之后修改博客的<code>_config.yml</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"line\">## Themes: https://hexo.io/themes/</span><br><span class=\"line\">theme: next # 修改成你的主题文件夹名</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Hexo 默认主题是 landscape。我使用的是next主题，清晰简约，非常符合我的喜好。Next主题的配置可以参考</p>\n<blockquote>\n<p><a href=\"https://github.com/theme-next/hexo-theme-next/releases\" target=\"_blank\" rel=\"noopener\">Next主题下载</a></p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next主题中文文档</a></p>\n<ul>\n<li>博客的具体配置，后面专门开一篇博文来记录一下</li>\n</ul>\n</blockquote>\n<p><strong><em> 2018-02-04 更新</em></strong><br><a href=\"https://blog.winsky.wang/2018/02/04/Hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/\" title=\"Hexo博客Next主题配置\">Hexo博客Next主题配置</a></p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><blockquote>\n<p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a></p>\n<p><a href=\"https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/\" target=\"_blank\" rel=\"noopener\">Hexo搭建博客教程</a></p>\n<p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next主题中文文档</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近沉迷各种折腾，无心学习 T^T</p>\n<p>VPS基本折腾完了，现在又想开始折腾自己搭建一个博客来耍耍</p>\n<p>这篇笔记的博客也是搭建在<a href=\"https://bwh1.net/aff.php?aff=29080\" title=\"搬瓦工VPS\" target=\"_blank\" rel=\"noopener\">搬瓦工VPS</a>上的</p>","more":"<h1 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h1><ul>\n<li>安装<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">nodejs</a></li>\n<li>安装<a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"noopener\">git</a></li>\n<li>安装hexo<ul>\n<li><code>npm install -g hexo</code></li>\n</ul>\n</li>\n<li>新建一个文件<ul>\n<li><code>mkdir blog</code></li>\n</ul>\n</li>\n<li>生成模板<ul>\n<li><code>cd blog</code></li>\n<li><code>hexo init</code></li>\n</ul>\n</li>\n<li>安装依赖<ul>\n<li><code>cd blog</code></li>\n<li><code>npm install</code></li>\n</ul>\n</li>\n<li><p>启动服务</p>\n<ul>\n<li><p><code>hexo s</code>，当控制台提示如下信息时表示启动成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@bwh themes]# hexo s</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过<code>localhost:4000</code>来访问博客</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"切换主题\"><a href=\"#切换主题\" class=\"headerlink\" title=\"切换主题\"></a>切换主题</h1><ul>\n<li>可以在<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">Themes-Hexo</a>页面查看各种各样的主题</li>\n<li>将喜欢的主题下载下来，放到博客目录下的<code>themes</code>文件夹</li>\n<li><p>之后修改博客的<code>_config.yml</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"line\">## Themes: https://hexo.io/themes/</span><br><span class=\"line\">theme: next # 修改成你的主题文件夹名</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Hexo 默认主题是 landscape。我使用的是next主题，清晰简约，非常符合我的喜好。Next主题的配置可以参考</p>\n<blockquote>\n<p><a href=\"https://github.com/theme-next/hexo-theme-next/releases\" target=\"_blank\" rel=\"noopener\">Next主题下载</a></p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next主题中文文档</a></p>\n<ul>\n<li>博客的具体配置，后面专门开一篇博文来记录一下</li>\n</ul>\n</blockquote>\n<p><strong><em> 2018-02-04 更新</em></strong><br><a href=\"https://blog.winsky.wang/2018/02/04/Hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/\" title=\"Hexo博客Next主题配置\">Hexo博客Next主题配置</a></p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><blockquote>\n<p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a></p>\n<p><a href=\"https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/\" target=\"_blank\" rel=\"noopener\">Hexo搭建博客教程</a></p>\n<p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next主题中文文档</a></p>\n</blockquote>"},{"title":"如何让谷歌和百度搜索到自己的博客","date":"2018-02-06T03:12:51.000Z","updated":"2018-02-06T03:12:51.000Z","_content":"前面我们介绍了如何在[搬瓦工VPS][1]上[快速搭建自己的个人博客][2]，并进行相关的[主题美化][3]\n\n现在问题来了，既然博客搭建起来了，总该要被主流搜索引擎收录吧。今天我们就来学习一下如何然自己的博客被谷歌和百度搜索到\n\n<!-- more -->\n\n# 验证网站\n## 查看是否被收录\n- 方法：打开百度或谷歌搜索，在搜索框里输入`site:blog.winsky.wang`\n- 如果提示说：找不到和您查询的`site:blog.winsky.wang`相符的内容或信息，说明未被收录\n- 如果搜索结果中你第一眼就看到了你的博客站点，说明已被收录，不用再继续看下面的内容了\n\n## 百度搜索提交\n- 登录[百度站长平台](https://ziyuan.baidu.com/)\n- 在[站点管理](https://ziyuan.baidu.com/site/index)中添加博客的站点\n- 第一步填写自己博客的域名\n- 第二步选举站点属性\n- 第三步验证域名所属权\n\t- 可以在域名解析中加入了百度的CNAME的域名\n\t- 或者下载验证文件，在html文件前面加上如下内容，这样可以保证该文件不会被编译，然后将文件上传到source文件夹下\n\t```\n\tlayout: false\n\t---\n\t```\n- 进入[链接提交](https://ziyuan.baidu.com/linksubmit/index)页提交链接\n- 这里有很多种方式，实在不行就选取手动提交的方式\n- 我这边选取了`sitemap.xml`提交的方式\n- `Hexo`的`Next`主题也已经部署了自动推送的代码，我们只需在`主题配置文件`中找到`baidu_push`字段 , 设置其为`true`即可\n- 百度站长平台`抓取诊断`功能，是直接让百度抓取我们的网站，测试能否正常抓取\n- 这时百度搜索`site:blog.winsky.wang`就能搜到自己的网站了（好吧实际操作的时候我过了一段时间才能搜到）\n\n## 谷歌搜索提交\n- 点击[Google网站站长](https://www.google.com/webmasters/)，然后点击首页的`SEARCH CONSOLE`\n- 添加网站，验证所有权（直接在推荐的方法下点击验证即可）\n- 进入到`抓取`->`Google抓取方式`\n- 点击`抓取`或者`抓取并呈现`\n- 若提示完成或者部分完成，则可以将网址提交至索引，有两种提交方式：仅抓取此网址、抓取此网址及其直接链接\n- 添加站点地图`https://blog.winsky.wang/sitemap.xml`\n- 这时谷歌搜索`site:blog.winsky.wang`就能搜到自己的网站了\n\n# 参考文章\n> [如何让谷歌和百度搜索到自己GitHub上的博客](https://maxwellyue.github.io/2016/08/07/如何让谷歌和百度搜索到自己GitHub上的博客/)\n\n\n[1]: https://bwh1.net/aff.php?aff=29080 \"搬瓦工VPS\"\n[2]: https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/ \"快速搭建自己的个人博客\"\n[3]: https://blog.winsky.wang/2018/02/04/Hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/ \"主题美化\"","source":"_posts/Hexo博客/如何让谷歌和百度搜索到自己的博客.md","raw":"---\ntitle: 如何让谷歌和百度搜索到自己的博客\ndate: 2018-02-06 11:12:51\nupdated: 2018-02-06 11:12:51\ntags:\n\t- SEO\n\t- 收录\ncategories: \n\t- SEO优化\n---\n前面我们介绍了如何在[搬瓦工VPS][1]上[快速搭建自己的个人博客][2]，并进行相关的[主题美化][3]\n\n现在问题来了，既然博客搭建起来了，总该要被主流搜索引擎收录吧。今天我们就来学习一下如何然自己的博客被谷歌和百度搜索到\n\n<!-- more -->\n\n# 验证网站\n## 查看是否被收录\n- 方法：打开百度或谷歌搜索，在搜索框里输入`site:blog.winsky.wang`\n- 如果提示说：找不到和您查询的`site:blog.winsky.wang`相符的内容或信息，说明未被收录\n- 如果搜索结果中你第一眼就看到了你的博客站点，说明已被收录，不用再继续看下面的内容了\n\n## 百度搜索提交\n- 登录[百度站长平台](https://ziyuan.baidu.com/)\n- 在[站点管理](https://ziyuan.baidu.com/site/index)中添加博客的站点\n- 第一步填写自己博客的域名\n- 第二步选举站点属性\n- 第三步验证域名所属权\n\t- 可以在域名解析中加入了百度的CNAME的域名\n\t- 或者下载验证文件，在html文件前面加上如下内容，这样可以保证该文件不会被编译，然后将文件上传到source文件夹下\n\t```\n\tlayout: false\n\t---\n\t```\n- 进入[链接提交](https://ziyuan.baidu.com/linksubmit/index)页提交链接\n- 这里有很多种方式，实在不行就选取手动提交的方式\n- 我这边选取了`sitemap.xml`提交的方式\n- `Hexo`的`Next`主题也已经部署了自动推送的代码，我们只需在`主题配置文件`中找到`baidu_push`字段 , 设置其为`true`即可\n- 百度站长平台`抓取诊断`功能，是直接让百度抓取我们的网站，测试能否正常抓取\n- 这时百度搜索`site:blog.winsky.wang`就能搜到自己的网站了（好吧实际操作的时候我过了一段时间才能搜到）\n\n## 谷歌搜索提交\n- 点击[Google网站站长](https://www.google.com/webmasters/)，然后点击首页的`SEARCH CONSOLE`\n- 添加网站，验证所有权（直接在推荐的方法下点击验证即可）\n- 进入到`抓取`->`Google抓取方式`\n- 点击`抓取`或者`抓取并呈现`\n- 若提示完成或者部分完成，则可以将网址提交至索引，有两种提交方式：仅抓取此网址、抓取此网址及其直接链接\n- 添加站点地图`https://blog.winsky.wang/sitemap.xml`\n- 这时谷歌搜索`site:blog.winsky.wang`就能搜到自己的网站了\n\n# 参考文章\n> [如何让谷歌和百度搜索到自己GitHub上的博客](https://maxwellyue.github.io/2016/08/07/如何让谷歌和百度搜索到自己GitHub上的博客/)\n\n\n[1]: https://bwh1.net/aff.php?aff=29080 \"搬瓦工VPS\"\n[2]: https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/ \"快速搭建自己的个人博客\"\n[3]: https://blog.winsky.wang/2018/02/04/Hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/ \"主题美化\"","slug":"Hexo博客/如何让谷歌和百度搜索到自己的博客","published":1,"_id":"cjf4zi3am000vwoy6ui97pzh2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前面我们介绍了如何在<a href=\"https://bwh1.net/aff.php?aff=29080\" title=\"搬瓦工VPS\" target=\"_blank\" rel=\"noopener\">搬瓦工VPS</a>上<a href=\"https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/\" title=\"快速搭建自己的个人博客\">快速搭建自己的个人博客</a>，并进行相关的<a href=\"https://blog.winsky.wang/2018/02/04/Hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/\" title=\"主题美化\">主题美化</a></p>\n<p>现在问题来了，既然博客搭建起来了，总该要被主流搜索引擎收录吧。今天我们就来学习一下如何然自己的博客被谷歌和百度搜索到</p>\n<a id=\"more\"></a>\n<h1 id=\"验证网站\"><a href=\"#验证网站\" class=\"headerlink\" title=\"验证网站\"></a>验证网站</h1><h2 id=\"查看是否被收录\"><a href=\"#查看是否被收录\" class=\"headerlink\" title=\"查看是否被收录\"></a>查看是否被收录</h2><ul>\n<li>方法：打开百度或谷歌搜索，在搜索框里输入<code>site:blog.winsky.wang</code></li>\n<li>如果提示说：找不到和您查询的<code>site:blog.winsky.wang</code>相符的内容或信息，说明未被收录</li>\n<li>如果搜索结果中你第一眼就看到了你的博客站点，说明已被收录，不用再继续看下面的内容了</li>\n</ul>\n<h2 id=\"百度搜索提交\"><a href=\"#百度搜索提交\" class=\"headerlink\" title=\"百度搜索提交\"></a>百度搜索提交</h2><ul>\n<li>登录<a href=\"https://ziyuan.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度站长平台</a></li>\n<li>在<a href=\"https://ziyuan.baidu.com/site/index\" target=\"_blank\" rel=\"noopener\">站点管理</a>中添加博客的站点</li>\n<li>第一步填写自己博客的域名</li>\n<li>第二步选举站点属性</li>\n<li><p>第三步验证域名所属权</p>\n<ul>\n<li>可以在域名解析中加入了百度的CNAME的域名</li>\n<li>或者下载验证文件，在html文件前面加上如下内容，这样可以保证该文件不会被编译，然后将文件上传到source文件夹下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layout: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>进入<a href=\"https://ziyuan.baidu.com/linksubmit/index\" target=\"_blank\" rel=\"noopener\">链接提交</a>页提交链接</p>\n</li>\n<li>这里有很多种方式，实在不行就选取手动提交的方式</li>\n<li>我这边选取了<code>sitemap.xml</code>提交的方式</li>\n<li><code>Hexo</code>的<code>Next</code>主题也已经部署了自动推送的代码，我们只需在<code>主题配置文件</code>中找到<code>baidu_push</code>字段 , 设置其为<code>true</code>即可</li>\n<li>百度站长平台<code>抓取诊断</code>功能，是直接让百度抓取我们的网站，测试能否正常抓取</li>\n<li>这时百度搜索<code>site:blog.winsky.wang</code>就能搜到自己的网站了（好吧实际操作的时候我过了一段时间才能搜到）</li>\n</ul>\n<h2 id=\"谷歌搜索提交\"><a href=\"#谷歌搜索提交\" class=\"headerlink\" title=\"谷歌搜索提交\"></a>谷歌搜索提交</h2><ul>\n<li>点击<a href=\"https://www.google.com/webmasters/\" target=\"_blank\" rel=\"noopener\">Google网站站长</a>，然后点击首页的<code>SEARCH CONSOLE</code></li>\n<li>添加网站，验证所有权（直接在推荐的方法下点击验证即可）</li>\n<li>进入到<code>抓取</code>-&gt;<code>Google抓取方式</code></li>\n<li>点击<code>抓取</code>或者<code>抓取并呈现</code></li>\n<li>若提示完成或者部分完成，则可以将网址提交至索引，有两种提交方式：仅抓取此网址、抓取此网址及其直接链接</li>\n<li>添加站点地图<code>https://blog.winsky.wang/sitemap.xml</code></li>\n<li>这时谷歌搜索<code>site:blog.winsky.wang</code>就能搜到自己的网站了</li>\n</ul>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><blockquote>\n<p><a href=\"https://maxwellyue.github.io/2016/08/07/如何让谷歌和百度搜索到自己GitHub上的博客/\" target=\"_blank\" rel=\"noopener\">如何让谷歌和百度搜索到自己GitHub上的博客</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>前面我们介绍了如何在<a href=\"https://bwh1.net/aff.php?aff=29080\" title=\"搬瓦工VPS\" target=\"_blank\" rel=\"noopener\">搬瓦工VPS</a>上<a href=\"https://blog.winsky.wang/2018/02/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo%E6%90%AD%E5%BB%BA/\" title=\"快速搭建自己的个人博客\">快速搭建自己的个人博客</a>，并进行相关的<a href=\"https://blog.winsky.wang/2018/02/04/Hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/\" title=\"主题美化\">主题美化</a></p>\n<p>现在问题来了，既然博客搭建起来了，总该要被主流搜索引擎收录吧。今天我们就来学习一下如何然自己的博客被谷歌和百度搜索到</p>","more":"<h1 id=\"验证网站\"><a href=\"#验证网站\" class=\"headerlink\" title=\"验证网站\"></a>验证网站</h1><h2 id=\"查看是否被收录\"><a href=\"#查看是否被收录\" class=\"headerlink\" title=\"查看是否被收录\"></a>查看是否被收录</h2><ul>\n<li>方法：打开百度或谷歌搜索，在搜索框里输入<code>site:blog.winsky.wang</code></li>\n<li>如果提示说：找不到和您查询的<code>site:blog.winsky.wang</code>相符的内容或信息，说明未被收录</li>\n<li>如果搜索结果中你第一眼就看到了你的博客站点，说明已被收录，不用再继续看下面的内容了</li>\n</ul>\n<h2 id=\"百度搜索提交\"><a href=\"#百度搜索提交\" class=\"headerlink\" title=\"百度搜索提交\"></a>百度搜索提交</h2><ul>\n<li>登录<a href=\"https://ziyuan.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度站长平台</a></li>\n<li>在<a href=\"https://ziyuan.baidu.com/site/index\" target=\"_blank\" rel=\"noopener\">站点管理</a>中添加博客的站点</li>\n<li>第一步填写自己博客的域名</li>\n<li>第二步选举站点属性</li>\n<li><p>第三步验证域名所属权</p>\n<ul>\n<li>可以在域名解析中加入了百度的CNAME的域名</li>\n<li>或者下载验证文件，在html文件前面加上如下内容，这样可以保证该文件不会被编译，然后将文件上传到source文件夹下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layout: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>进入<a href=\"https://ziyuan.baidu.com/linksubmit/index\" target=\"_blank\" rel=\"noopener\">链接提交</a>页提交链接</p>\n</li>\n<li>这里有很多种方式，实在不行就选取手动提交的方式</li>\n<li>我这边选取了<code>sitemap.xml</code>提交的方式</li>\n<li><code>Hexo</code>的<code>Next</code>主题也已经部署了自动推送的代码，我们只需在<code>主题配置文件</code>中找到<code>baidu_push</code>字段 , 设置其为<code>true</code>即可</li>\n<li>百度站长平台<code>抓取诊断</code>功能，是直接让百度抓取我们的网站，测试能否正常抓取</li>\n<li>这时百度搜索<code>site:blog.winsky.wang</code>就能搜到自己的网站了（好吧实际操作的时候我过了一段时间才能搜到）</li>\n</ul>\n<h2 id=\"谷歌搜索提交\"><a href=\"#谷歌搜索提交\" class=\"headerlink\" title=\"谷歌搜索提交\"></a>谷歌搜索提交</h2><ul>\n<li>点击<a href=\"https://www.google.com/webmasters/\" target=\"_blank\" rel=\"noopener\">Google网站站长</a>，然后点击首页的<code>SEARCH CONSOLE</code></li>\n<li>添加网站，验证所有权（直接在推荐的方法下点击验证即可）</li>\n<li>进入到<code>抓取</code>-&gt;<code>Google抓取方式</code></li>\n<li>点击<code>抓取</code>或者<code>抓取并呈现</code></li>\n<li>若提示完成或者部分完成，则可以将网址提交至索引，有两种提交方式：仅抓取此网址、抓取此网址及其直接链接</li>\n<li>添加站点地图<code>https://blog.winsky.wang/sitemap.xml</code></li>\n<li>这时谷歌搜索<code>site:blog.winsky.wang</code>就能搜到自己的网站了</li>\n</ul>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><blockquote>\n<p><a href=\"https://maxwellyue.github.io/2016/08/07/如何让谷歌和百度搜索到自己GitHub上的博客/\" target=\"_blank\" rel=\"noopener\">如何让谷歌和百度搜索到自己GitHub上的博客</a></p>\n</blockquote>"},{"title":"给自己的网站加上HTTPS","date":"2018-02-11T02:24:13.000Z","updated":"2018-02-12T03:30:34.000Z","_content":"这个纯属偶然看到一篇博文里面的，觉得`https`很好高大上，于是我也想玩玩\n\n[Let's Encrypt][1]是一个免费、自动化、开放的证书签发服务。它由`ISRG`（`Internet Security Research Group`，互联网安全研究小组）提供服务，而`ISRG`是来自于美国加利福尼亚州的一个公益组织。`Let's Encrypt`得到了`Mozilla`、`Cisco`、`Akamai`、`Electronic Frontier Foundation`和`Chrome`等众多公司和机构的支持，发展十分迅猛。\n\n<!-- more -->\n申请`Let's Encrypt`证书不但免费，还非常简单，虽然每次只有90天的有效期，但可以通过脚本定期更新，配好之后一劳永逸。本文记录本站申请过程和遇到的问题。\n\n# 获取免费证书\n[Certbot][2]是`Let's Encrypt`官方推荐的获取证书的客户端，可以帮我们获取免费的`Let's Encrypt`证书。`Certbot`是支持所有`Unix`内核的操作系统的，我的博客服务器系统是`CentOS`，这篇教程也是通过在个人博客上启用`HTTPS`的基础上完成的。\n\n- 安装`Certbot`客户端\n\t- `wget https://dl.eff.org/certbot-auto`\n\t- `chmod +x certbot-auto`\n- 获取证书\n\t- `webroot`模式\n\t\t- `certbot certonly --webroot -w /var/www/example -d example.com -d www.example.com`\n\t\t- 这个命令会为`example.com`和`www.example.com`这两个域名生成一个证书，使用`--webroot`模式会在`/var/www/example`中创建`.well-known`文件夹，这个文件夹里面包含了一些验证文件，`certbot`会通过访问`example.com/.well-known/acme-challenge`来验证你的域名是否绑定的这个服务器。这个命令在大多数情况下都可以满足需求\n\t- `standalone`模式\n\t\t- 但是，有时候我们没有根目录，例如一些微服务和本博客。这时候使用`--webroot`就走不通了。`certbot`还有另外一种模式`--standalone`，这种模式不需要指定网站根目录，他会自动启用服务器的443端口，来验证域名的归属。我们有其他服务（例如`nginx`）占用了443端口，就必须先停止这些服务，在证书生成完毕后，再启用。\n\t\t- `certbot certonly --standalone -d example.com -d www.example.com`\n\t\t- 证书生成完毕后，我们可以在`/etc/letsencrypt/live/`目录下看到对应域名的文件夹，里面存放了指向证书的一些快捷方式。\n\n# Nginx配置启用HTTPS\n客系统使用的是Nginx 服务器来转发请求，这里贴一下我的Nginx配置。\n```\nserver\n{\n    listen 443;\n    server_name blog.winsky.wang ;\n    ssl on;\n    ssl_certificate /etc/letsencrypt/live/blog.winsky.wang/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/blog.winsky.wang/privkey.pem;\n\t\t\n\tlocation / {\n\t\tproxy_set_header HOST $host;\n\t\tproxy_set_header X-Forwarded-Proto $scheme;\n\t\tproxy_set_header X-Real-IP $remote_addr;\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://localhost:4000/;\n    }\n}\n\nserver\n{\n    listen 80;\n    server_name blog.winsky.wang ;\n\t\t\n\tlocation / {\n\t\tproxy_set_header HOST $host;\n\t\tproxy_set_header X-Forwarded-Proto $scheme;\n\t\tproxy_set_header X-Real-IP $remote_addr;\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://localhost:4000/;\n    }\n    # rewrite ^/(.*) https://$server_name$1 permanent;#强制跳转到Https\n}\n```\n\n# 自动更新SSL证书\n`Let's Encrypt`提供的证书只有90天的有效期，我们必须在证书到期之前，重新获取这些证书，`certbot`给我们提供了一个很方便的命令，那就是`certbot renew`。\n通过这个命令，他会自动检查系统内的证书，并且自动更新这些证书。\n\n我们可以运行这个命令测试一下`certbot renew --dry-run `。不过，运行时候出现了错误\n```\nAttempting to renew cert (blog.winsky.wang) from /etc/letsencrypt/renewal/blog.winsky.wang.conf produced an unexpected error: Problem binding to port 80: Could not bind to IPv4 or IPv6.. Skipping.\nAll renewal attempts failed. The following certs could not be renewed:\n  /etc/letsencrypt/live/blog.winsky.wang/fullchain.pem (failure)\n```\n这是因为生成证书的时候使用的是`--standalone`模式，验证域名的时候，需要启用443端口，这个错误的意思就是要启用的端口已经被占用了。这时候必须把`nginx`先关掉，才可以成功。果然，先运行`service nginx stop`运行这个命令，就没有报错了，所有的证书都刷新成功\n\n证书是90天才过期，我们只需要在过期之前执行更新操作就可以了。 这件事情就可以直接交给定时任务来完成。新建了一个文件`certbot-auto-renew-cron`，这个是一个`cron`计划，这段内容的意思就是每隔两个月的凌晨`4:00`执行更新操作\n```\n00 4 * */2 * certbot renew --pre-hook \"service nginx stop\" --post-hook \"service nginx start\"\n```\n- `--pre-hook`这个参数表示执行更新操作之前要做的事情\n- `--post-hook`这个参数表示执行更新操作完成后要做的事情\n\n最后我们启动这个定时任务`crontab certbot-auto-renew-cron`\n\n# 填坑\n虽然上面的过程看上去一帆风顺，但是实际操作过程中还是碰到了很多问题\n\n## Python版本\n我的服务器是`CentOS 6.6`的，上面默认的`Python`版本是`2.6.6`，安装时会报错`No supported Python package available to install. Aborting bootstrap!`。所以需要升级一下Python版本\n```\nwget http://python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2 #下载Python-2.7.3\ntar -jxvf Python-2.7.3.tar.bz2 #解压\ncd Python-2.7.3 #更改工作目录\n./configure #安装\nmake all #安装\nmake install #安装\nmake clean #安装\nmake distclean #安装\n/usr/local/bin/python2.7 -V  #查看版本信息\nmv /usr/bin/python /usr/bin/python2.6.6 #建立软连接，使系统默认的 python指向 python2.7\nln -s /usr/local/bin/python2.7 /usr/bin/python #建立软连接，使系统默认的 python指向 python2.7\npython -V #检验Python 版本\nvi /usr/bin/yum  #将文件头部的#!/usr/bin/python 改成#!/usr/bin/python2.6.6\n```\n\n## 端口占用\n在执行`certbot certonly --standalone -d blog.winsky.wang`时会提示端口占用，这是因为服务器上`Nginx`服务开着，占用了端口，所以在安装、更新证书的时候需要先停止`Nginx`服务\n\n> [Let's Encrypt 使用教程，免费的SSL证书，让你的网站拥抱 HTTPS](https://diamondfsd.com/article/e221b455-b0e7-40b7-a6c7-9bb7e3e35657)\n\n> [搬瓦工VPS申请Let’s Encrypt免费SSL证书时报错解决办法](https://www.wn789.com/14419.html)\n\n\n## 遗留问题\n*2018-02-12更新*\n百度的自动推送代码，虽然提供了`https`的接口，但是`https`请求回来的代码仍然是去请求`http`，导致不能正确`baidu_push`\n\n\n[1]: https://letsencrypt.org/ \"Let's Encrypt\"\n[2]: https://certbot.eff.org/ \"Certbot\"","source":"_posts/Hexo博客/给自己的网站加上HTTPS.md","raw":"---\ntitle: 给自己的网站加上HTTPS\ndate: 2018-02-11 10:24:13\nupdated: 2018-02-12 11:30:34\ntags:\n  - HTTPS\ncategories: \n  - Hexo博客\n---\n这个纯属偶然看到一篇博文里面的，觉得`https`很好高大上，于是我也想玩玩\n\n[Let's Encrypt][1]是一个免费、自动化、开放的证书签发服务。它由`ISRG`（`Internet Security Research Group`，互联网安全研究小组）提供服务，而`ISRG`是来自于美国加利福尼亚州的一个公益组织。`Let's Encrypt`得到了`Mozilla`、`Cisco`、`Akamai`、`Electronic Frontier Foundation`和`Chrome`等众多公司和机构的支持，发展十分迅猛。\n\n<!-- more -->\n申请`Let's Encrypt`证书不但免费，还非常简单，虽然每次只有90天的有效期，但可以通过脚本定期更新，配好之后一劳永逸。本文记录本站申请过程和遇到的问题。\n\n# 获取免费证书\n[Certbot][2]是`Let's Encrypt`官方推荐的获取证书的客户端，可以帮我们获取免费的`Let's Encrypt`证书。`Certbot`是支持所有`Unix`内核的操作系统的，我的博客服务器系统是`CentOS`，这篇教程也是通过在个人博客上启用`HTTPS`的基础上完成的。\n\n- 安装`Certbot`客户端\n\t- `wget https://dl.eff.org/certbot-auto`\n\t- `chmod +x certbot-auto`\n- 获取证书\n\t- `webroot`模式\n\t\t- `certbot certonly --webroot -w /var/www/example -d example.com -d www.example.com`\n\t\t- 这个命令会为`example.com`和`www.example.com`这两个域名生成一个证书，使用`--webroot`模式会在`/var/www/example`中创建`.well-known`文件夹，这个文件夹里面包含了一些验证文件，`certbot`会通过访问`example.com/.well-known/acme-challenge`来验证你的域名是否绑定的这个服务器。这个命令在大多数情况下都可以满足需求\n\t- `standalone`模式\n\t\t- 但是，有时候我们没有根目录，例如一些微服务和本博客。这时候使用`--webroot`就走不通了。`certbot`还有另外一种模式`--standalone`，这种模式不需要指定网站根目录，他会自动启用服务器的443端口，来验证域名的归属。我们有其他服务（例如`nginx`）占用了443端口，就必须先停止这些服务，在证书生成完毕后，再启用。\n\t\t- `certbot certonly --standalone -d example.com -d www.example.com`\n\t\t- 证书生成完毕后，我们可以在`/etc/letsencrypt/live/`目录下看到对应域名的文件夹，里面存放了指向证书的一些快捷方式。\n\n# Nginx配置启用HTTPS\n客系统使用的是Nginx 服务器来转发请求，这里贴一下我的Nginx配置。\n```\nserver\n{\n    listen 443;\n    server_name blog.winsky.wang ;\n    ssl on;\n    ssl_certificate /etc/letsencrypt/live/blog.winsky.wang/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/blog.winsky.wang/privkey.pem;\n\t\t\n\tlocation / {\n\t\tproxy_set_header HOST $host;\n\t\tproxy_set_header X-Forwarded-Proto $scheme;\n\t\tproxy_set_header X-Real-IP $remote_addr;\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://localhost:4000/;\n    }\n}\n\nserver\n{\n    listen 80;\n    server_name blog.winsky.wang ;\n\t\t\n\tlocation / {\n\t\tproxy_set_header HOST $host;\n\t\tproxy_set_header X-Forwarded-Proto $scheme;\n\t\tproxy_set_header X-Real-IP $remote_addr;\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://localhost:4000/;\n    }\n    # rewrite ^/(.*) https://$server_name$1 permanent;#强制跳转到Https\n}\n```\n\n# 自动更新SSL证书\n`Let's Encrypt`提供的证书只有90天的有效期，我们必须在证书到期之前，重新获取这些证书，`certbot`给我们提供了一个很方便的命令，那就是`certbot renew`。\n通过这个命令，他会自动检查系统内的证书，并且自动更新这些证书。\n\n我们可以运行这个命令测试一下`certbot renew --dry-run `。不过，运行时候出现了错误\n```\nAttempting to renew cert (blog.winsky.wang) from /etc/letsencrypt/renewal/blog.winsky.wang.conf produced an unexpected error: Problem binding to port 80: Could not bind to IPv4 or IPv6.. Skipping.\nAll renewal attempts failed. The following certs could not be renewed:\n  /etc/letsencrypt/live/blog.winsky.wang/fullchain.pem (failure)\n```\n这是因为生成证书的时候使用的是`--standalone`模式，验证域名的时候，需要启用443端口，这个错误的意思就是要启用的端口已经被占用了。这时候必须把`nginx`先关掉，才可以成功。果然，先运行`service nginx stop`运行这个命令，就没有报错了，所有的证书都刷新成功\n\n证书是90天才过期，我们只需要在过期之前执行更新操作就可以了。 这件事情就可以直接交给定时任务来完成。新建了一个文件`certbot-auto-renew-cron`，这个是一个`cron`计划，这段内容的意思就是每隔两个月的凌晨`4:00`执行更新操作\n```\n00 4 * */2 * certbot renew --pre-hook \"service nginx stop\" --post-hook \"service nginx start\"\n```\n- `--pre-hook`这个参数表示执行更新操作之前要做的事情\n- `--post-hook`这个参数表示执行更新操作完成后要做的事情\n\n最后我们启动这个定时任务`crontab certbot-auto-renew-cron`\n\n# 填坑\n虽然上面的过程看上去一帆风顺，但是实际操作过程中还是碰到了很多问题\n\n## Python版本\n我的服务器是`CentOS 6.6`的，上面默认的`Python`版本是`2.6.6`，安装时会报错`No supported Python package available to install. Aborting bootstrap!`。所以需要升级一下Python版本\n```\nwget http://python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2 #下载Python-2.7.3\ntar -jxvf Python-2.7.3.tar.bz2 #解压\ncd Python-2.7.3 #更改工作目录\n./configure #安装\nmake all #安装\nmake install #安装\nmake clean #安装\nmake distclean #安装\n/usr/local/bin/python2.7 -V  #查看版本信息\nmv /usr/bin/python /usr/bin/python2.6.6 #建立软连接，使系统默认的 python指向 python2.7\nln -s /usr/local/bin/python2.7 /usr/bin/python #建立软连接，使系统默认的 python指向 python2.7\npython -V #检验Python 版本\nvi /usr/bin/yum  #将文件头部的#!/usr/bin/python 改成#!/usr/bin/python2.6.6\n```\n\n## 端口占用\n在执行`certbot certonly --standalone -d blog.winsky.wang`时会提示端口占用，这是因为服务器上`Nginx`服务开着，占用了端口，所以在安装、更新证书的时候需要先停止`Nginx`服务\n\n> [Let's Encrypt 使用教程，免费的SSL证书，让你的网站拥抱 HTTPS](https://diamondfsd.com/article/e221b455-b0e7-40b7-a6c7-9bb7e3e35657)\n\n> [搬瓦工VPS申请Let’s Encrypt免费SSL证书时报错解决办法](https://www.wn789.com/14419.html)\n\n\n## 遗留问题\n*2018-02-12更新*\n百度的自动推送代码，虽然提供了`https`的接口，但是`https`请求回来的代码仍然是去请求`http`，导致不能正确`baidu_push`\n\n\n[1]: https://letsencrypt.org/ \"Let's Encrypt\"\n[2]: https://certbot.eff.org/ \"Certbot\"","slug":"Hexo博客/给自己的网站加上HTTPS","published":1,"_id":"cjf4zi3ao000zwoy6fi0ln4z8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这个纯属偶然看到一篇博文里面的，觉得<code>https</code>很好高大上，于是我也想玩玩</p>\n<p><a href=\"https://letsencrypt.org/\" title=\"Let&#39;s Encrypt\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a>是一个免费、自动化、开放的证书签发服务。它由<code>ISRG</code>（<code>Internet Security Research Group</code>，互联网安全研究小组）提供服务，而<code>ISRG</code>是来自于美国加利福尼亚州的一个公益组织。<code>Let&#39;s Encrypt</code>得到了<code>Mozilla</code>、<code>Cisco</code>、<code>Akamai</code>、<code>Electronic Frontier Foundation</code>和<code>Chrome</code>等众多公司和机构的支持，发展十分迅猛。</p>\n<a id=\"more\"></a>\n<p>申请<code>Let&#39;s Encrypt</code>证书不但免费，还非常简单，虽然每次只有90天的有效期，但可以通过脚本定期更新，配好之后一劳永逸。本文记录本站申请过程和遇到的问题。</p>\n<h1 id=\"获取免费证书\"><a href=\"#获取免费证书\" class=\"headerlink\" title=\"获取免费证书\"></a>获取免费证书</h1><p><a href=\"https://certbot.eff.org/\" title=\"Certbot\" target=\"_blank\" rel=\"noopener\">Certbot</a>是<code>Let&#39;s Encrypt</code>官方推荐的获取证书的客户端，可以帮我们获取免费的<code>Let&#39;s Encrypt</code>证书。<code>Certbot</code>是支持所有<code>Unix</code>内核的操作系统的，我的博客服务器系统是<code>CentOS</code>，这篇教程也是通过在个人博客上启用<code>HTTPS</code>的基础上完成的。</p>\n<ul>\n<li>安装<code>Certbot</code>客户端<ul>\n<li><code>wget https://dl.eff.org/certbot-auto</code></li>\n<li><code>chmod +x certbot-auto</code></li>\n</ul>\n</li>\n<li>获取证书<ul>\n<li><code>webroot</code>模式<ul>\n<li><code>certbot certonly --webroot -w /var/www/example -d example.com -d www.example.com</code></li>\n<li>这个命令会为<code>example.com</code>和<code>www.example.com</code>这两个域名生成一个证书，使用<code>--webroot</code>模式会在<code>/var/www/example</code>中创建<code>.well-known</code>文件夹，这个文件夹里面包含了一些验证文件，<code>certbot</code>会通过访问<code>example.com/.well-known/acme-challenge</code>来验证你的域名是否绑定的这个服务器。这个命令在大多数情况下都可以满足需求</li>\n</ul>\n</li>\n<li><code>standalone</code>模式<ul>\n<li>但是，有时候我们没有根目录，例如一些微服务和本博客。这时候使用<code>--webroot</code>就走不通了。<code>certbot</code>还有另外一种模式<code>--standalone</code>，这种模式不需要指定网站根目录，他会自动启用服务器的443端口，来验证域名的归属。我们有其他服务（例如<code>nginx</code>）占用了443端口，就必须先停止这些服务，在证书生成完毕后，再启用。</li>\n<li><code>certbot certonly --standalone -d example.com -d www.example.com</code></li>\n<li>证书生成完毕后，我们可以在<code>/etc/letsencrypt/live/</code>目录下看到对应域名的文件夹，里面存放了指向证书的一些快捷方式。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Nginx配置启用HTTPS\"><a href=\"#Nginx配置启用HTTPS\" class=\"headerlink\" title=\"Nginx配置启用HTTPS\"></a>Nginx配置启用HTTPS</h1><p>客系统使用的是Nginx 服务器来转发请求，这里贴一下我的Nginx配置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    listen 443;</span><br><span class=\"line\">    server_name blog.winsky.wang ;</span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate /etc/letsencrypt/live/blog.winsky.wang/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/blog.winsky.wang/privkey.pem;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\tproxy_set_header HOST $host;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">\t\tproxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://localhost:4000/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name blog.winsky.wang ;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\tproxy_set_header HOST $host;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">\t\tproxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://localhost:4000/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    # rewrite ^/(.*) https://$server_name$1 permanent;#强制跳转到Https</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"自动更新SSL证书\"><a href=\"#自动更新SSL证书\" class=\"headerlink\" title=\"自动更新SSL证书\"></a>自动更新SSL证书</h1><p><code>Let&#39;s Encrypt</code>提供的证书只有90天的有效期，我们必须在证书到期之前，重新获取这些证书，<code>certbot</code>给我们提供了一个很方便的命令，那就是<code>certbot renew</code>。<br>通过这个命令，他会自动检查系统内的证书，并且自动更新这些证书。</p>\n<p>我们可以运行这个命令测试一下<code>certbot renew --dry-run</code>。不过，运行时候出现了错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Attempting to renew cert (blog.winsky.wang) from /etc/letsencrypt/renewal/blog.winsky.wang.conf produced an unexpected error: Problem binding to port 80: Could not bind to IPv4 or IPv6.. Skipping.</span><br><span class=\"line\">All renewal attempts failed. The following certs could not be renewed:</span><br><span class=\"line\">  /etc/letsencrypt/live/blog.winsky.wang/fullchain.pem (failure)</span><br></pre></td></tr></table></figure></p>\n<p>这是因为生成证书的时候使用的是<code>--standalone</code>模式，验证域名的时候，需要启用443端口，这个错误的意思就是要启用的端口已经被占用了。这时候必须把<code>nginx</code>先关掉，才可以成功。果然，先运行<code>service nginx stop</code>运行这个命令，就没有报错了，所有的证书都刷新成功</p>\n<p>证书是90天才过期，我们只需要在过期之前执行更新操作就可以了。 这件事情就可以直接交给定时任务来完成。新建了一个文件<code>certbot-auto-renew-cron</code>，这个是一个<code>cron</code>计划，这段内容的意思就是每隔两个月的凌晨<code>4:00</code>执行更新操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00 4 * */2 * certbot renew --pre-hook &quot;service nginx stop&quot; --post-hook &quot;service nginx start&quot;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>--pre-hook</code>这个参数表示执行更新操作之前要做的事情</li>\n<li><code>--post-hook</code>这个参数表示执行更新操作完成后要做的事情</li>\n</ul>\n<p>最后我们启动这个定时任务<code>crontab certbot-auto-renew-cron</code></p>\n<h1 id=\"填坑\"><a href=\"#填坑\" class=\"headerlink\" title=\"填坑\"></a>填坑</h1><p>虽然上面的过程看上去一帆风顺，但是实际操作过程中还是碰到了很多问题</p>\n<h2 id=\"Python版本\"><a href=\"#Python版本\" class=\"headerlink\" title=\"Python版本\"></a>Python版本</h2><p>我的服务器是<code>CentOS 6.6</code>的，上面默认的<code>Python</code>版本是<code>2.6.6</code>，安装时会报错<code>No supported Python package available to install. Aborting bootstrap!</code>。所以需要升级一下Python版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2 #下载Python-2.7.3</span><br><span class=\"line\">tar -jxvf Python-2.7.3.tar.bz2 #解压</span><br><span class=\"line\">cd Python-2.7.3 #更改工作目录</span><br><span class=\"line\">./configure #安装</span><br><span class=\"line\">make all #安装</span><br><span class=\"line\">make install #安装</span><br><span class=\"line\">make clean #安装</span><br><span class=\"line\">make distclean #安装</span><br><span class=\"line\">/usr/local/bin/python2.7 -V  #查看版本信息</span><br><span class=\"line\">mv /usr/bin/python /usr/bin/python2.6.6 #建立软连接，使系统默认的 python指向 python2.7</span><br><span class=\"line\">ln -s /usr/local/bin/python2.7 /usr/bin/python #建立软连接，使系统默认的 python指向 python2.7</span><br><span class=\"line\">python -V #检验Python 版本</span><br><span class=\"line\">vi /usr/bin/yum  #将文件头部的#!/usr/bin/python 改成#!/usr/bin/python2.6.6</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"端口占用\"><a href=\"#端口占用\" class=\"headerlink\" title=\"端口占用\"></a>端口占用</h2><p>在执行<code>certbot certonly --standalone -d blog.winsky.wang</code>时会提示端口占用，这是因为服务器上<code>Nginx</code>服务开着，占用了端口，所以在安装、更新证书的时候需要先停止<code>Nginx</code>服务</p>\n<blockquote>\n<p><a href=\"https://diamondfsd.com/article/e221b455-b0e7-40b7-a6c7-9bb7e3e35657\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt 使用教程，免费的SSL证书，让你的网站拥抱 HTTPS</a></p>\n<p><a href=\"https://www.wn789.com/14419.html\" target=\"_blank\" rel=\"noopener\">搬瓦工VPS申请Let’s Encrypt免费SSL证书时报错解决办法</a></p>\n</blockquote>\n<h2 id=\"遗留问题\"><a href=\"#遗留问题\" class=\"headerlink\" title=\"遗留问题\"></a>遗留问题</h2><p><em>2018-02-12更新</em><br>百度的自动推送代码，虽然提供了<code>https</code>的接口，但是<code>https</code>请求回来的代码仍然是去请求<code>http</code>，导致不能正确<code>baidu_push</code></p>\n","site":{"data":{}},"excerpt":"<p>这个纯属偶然看到一篇博文里面的，觉得<code>https</code>很好高大上，于是我也想玩玩</p>\n<p><a href=\"https://letsencrypt.org/\" title=\"Let&#39;s Encrypt\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a>是一个免费、自动化、开放的证书签发服务。它由<code>ISRG</code>（<code>Internet Security Research Group</code>，互联网安全研究小组）提供服务，而<code>ISRG</code>是来自于美国加利福尼亚州的一个公益组织。<code>Let&#39;s Encrypt</code>得到了<code>Mozilla</code>、<code>Cisco</code>、<code>Akamai</code>、<code>Electronic Frontier Foundation</code>和<code>Chrome</code>等众多公司和机构的支持，发展十分迅猛。</p>","more":"<p>申请<code>Let&#39;s Encrypt</code>证书不但免费，还非常简单，虽然每次只有90天的有效期，但可以通过脚本定期更新，配好之后一劳永逸。本文记录本站申请过程和遇到的问题。</p>\n<h1 id=\"获取免费证书\"><a href=\"#获取免费证书\" class=\"headerlink\" title=\"获取免费证书\"></a>获取免费证书</h1><p><a href=\"https://certbot.eff.org/\" title=\"Certbot\" target=\"_blank\" rel=\"noopener\">Certbot</a>是<code>Let&#39;s Encrypt</code>官方推荐的获取证书的客户端，可以帮我们获取免费的<code>Let&#39;s Encrypt</code>证书。<code>Certbot</code>是支持所有<code>Unix</code>内核的操作系统的，我的博客服务器系统是<code>CentOS</code>，这篇教程也是通过在个人博客上启用<code>HTTPS</code>的基础上完成的。</p>\n<ul>\n<li>安装<code>Certbot</code>客户端<ul>\n<li><code>wget https://dl.eff.org/certbot-auto</code></li>\n<li><code>chmod +x certbot-auto</code></li>\n</ul>\n</li>\n<li>获取证书<ul>\n<li><code>webroot</code>模式<ul>\n<li><code>certbot certonly --webroot -w /var/www/example -d example.com -d www.example.com</code></li>\n<li>这个命令会为<code>example.com</code>和<code>www.example.com</code>这两个域名生成一个证书，使用<code>--webroot</code>模式会在<code>/var/www/example</code>中创建<code>.well-known</code>文件夹，这个文件夹里面包含了一些验证文件，<code>certbot</code>会通过访问<code>example.com/.well-known/acme-challenge</code>来验证你的域名是否绑定的这个服务器。这个命令在大多数情况下都可以满足需求</li>\n</ul>\n</li>\n<li><code>standalone</code>模式<ul>\n<li>但是，有时候我们没有根目录，例如一些微服务和本博客。这时候使用<code>--webroot</code>就走不通了。<code>certbot</code>还有另外一种模式<code>--standalone</code>，这种模式不需要指定网站根目录，他会自动启用服务器的443端口，来验证域名的归属。我们有其他服务（例如<code>nginx</code>）占用了443端口，就必须先停止这些服务，在证书生成完毕后，再启用。</li>\n<li><code>certbot certonly --standalone -d example.com -d www.example.com</code></li>\n<li>证书生成完毕后，我们可以在<code>/etc/letsencrypt/live/</code>目录下看到对应域名的文件夹，里面存放了指向证书的一些快捷方式。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Nginx配置启用HTTPS\"><a href=\"#Nginx配置启用HTTPS\" class=\"headerlink\" title=\"Nginx配置启用HTTPS\"></a>Nginx配置启用HTTPS</h1><p>客系统使用的是Nginx 服务器来转发请求，这里贴一下我的Nginx配置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    listen 443;</span><br><span class=\"line\">    server_name blog.winsky.wang ;</span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate /etc/letsencrypt/live/blog.winsky.wang/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/blog.winsky.wang/privkey.pem;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\tproxy_set_header HOST $host;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">\t\tproxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://localhost:4000/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name blog.winsky.wang ;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\tproxy_set_header HOST $host;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">\t\tproxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://localhost:4000/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    # rewrite ^/(.*) https://$server_name$1 permanent;#强制跳转到Https</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"自动更新SSL证书\"><a href=\"#自动更新SSL证书\" class=\"headerlink\" title=\"自动更新SSL证书\"></a>自动更新SSL证书</h1><p><code>Let&#39;s Encrypt</code>提供的证书只有90天的有效期，我们必须在证书到期之前，重新获取这些证书，<code>certbot</code>给我们提供了一个很方便的命令，那就是<code>certbot renew</code>。<br>通过这个命令，他会自动检查系统内的证书，并且自动更新这些证书。</p>\n<p>我们可以运行这个命令测试一下<code>certbot renew --dry-run</code>。不过，运行时候出现了错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Attempting to renew cert (blog.winsky.wang) from /etc/letsencrypt/renewal/blog.winsky.wang.conf produced an unexpected error: Problem binding to port 80: Could not bind to IPv4 or IPv6.. Skipping.</span><br><span class=\"line\">All renewal attempts failed. The following certs could not be renewed:</span><br><span class=\"line\">  /etc/letsencrypt/live/blog.winsky.wang/fullchain.pem (failure)</span><br></pre></td></tr></table></figure></p>\n<p>这是因为生成证书的时候使用的是<code>--standalone</code>模式，验证域名的时候，需要启用443端口，这个错误的意思就是要启用的端口已经被占用了。这时候必须把<code>nginx</code>先关掉，才可以成功。果然，先运行<code>service nginx stop</code>运行这个命令，就没有报错了，所有的证书都刷新成功</p>\n<p>证书是90天才过期，我们只需要在过期之前执行更新操作就可以了。 这件事情就可以直接交给定时任务来完成。新建了一个文件<code>certbot-auto-renew-cron</code>，这个是一个<code>cron</code>计划，这段内容的意思就是每隔两个月的凌晨<code>4:00</code>执行更新操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00 4 * */2 * certbot renew --pre-hook &quot;service nginx stop&quot; --post-hook &quot;service nginx start&quot;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>--pre-hook</code>这个参数表示执行更新操作之前要做的事情</li>\n<li><code>--post-hook</code>这个参数表示执行更新操作完成后要做的事情</li>\n</ul>\n<p>最后我们启动这个定时任务<code>crontab certbot-auto-renew-cron</code></p>\n<h1 id=\"填坑\"><a href=\"#填坑\" class=\"headerlink\" title=\"填坑\"></a>填坑</h1><p>虽然上面的过程看上去一帆风顺，但是实际操作过程中还是碰到了很多问题</p>\n<h2 id=\"Python版本\"><a href=\"#Python版本\" class=\"headerlink\" title=\"Python版本\"></a>Python版本</h2><p>我的服务器是<code>CentOS 6.6</code>的，上面默认的<code>Python</code>版本是<code>2.6.6</code>，安装时会报错<code>No supported Python package available to install. Aborting bootstrap!</code>。所以需要升级一下Python版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2 #下载Python-2.7.3</span><br><span class=\"line\">tar -jxvf Python-2.7.3.tar.bz2 #解压</span><br><span class=\"line\">cd Python-2.7.3 #更改工作目录</span><br><span class=\"line\">./configure #安装</span><br><span class=\"line\">make all #安装</span><br><span class=\"line\">make install #安装</span><br><span class=\"line\">make clean #安装</span><br><span class=\"line\">make distclean #安装</span><br><span class=\"line\">/usr/local/bin/python2.7 -V  #查看版本信息</span><br><span class=\"line\">mv /usr/bin/python /usr/bin/python2.6.6 #建立软连接，使系统默认的 python指向 python2.7</span><br><span class=\"line\">ln -s /usr/local/bin/python2.7 /usr/bin/python #建立软连接，使系统默认的 python指向 python2.7</span><br><span class=\"line\">python -V #检验Python 版本</span><br><span class=\"line\">vi /usr/bin/yum  #将文件头部的#!/usr/bin/python 改成#!/usr/bin/python2.6.6</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"端口占用\"><a href=\"#端口占用\" class=\"headerlink\" title=\"端口占用\"></a>端口占用</h2><p>在执行<code>certbot certonly --standalone -d blog.winsky.wang</code>时会提示端口占用，这是因为服务器上<code>Nginx</code>服务开着，占用了端口，所以在安装、更新证书的时候需要先停止<code>Nginx</code>服务</p>\n<blockquote>\n<p><a href=\"https://diamondfsd.com/article/e221b455-b0e7-40b7-a6c7-9bb7e3e35657\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt 使用教程，免费的SSL证书，让你的网站拥抱 HTTPS</a></p>\n<p><a href=\"https://www.wn789.com/14419.html\" target=\"_blank\" rel=\"noopener\">搬瓦工VPS申请Let’s Encrypt免费SSL证书时报错解决办法</a></p>\n</blockquote>\n<h2 id=\"遗留问题\"><a href=\"#遗留问题\" class=\"headerlink\" title=\"遗留问题\"></a>遗留问题</h2><p><em>2018-02-12更新</em><br>百度的自动推送代码，虽然提供了<code>https</code>的接口，但是<code>https</code>请求回来的代码仍然是去请求<code>http</code>，导致不能正确<code>baidu_push</code></p>"},{"title":"Extreme Programming explained读书笔记","date":"2018-03-01T06:24:14.000Z","updated":"2018-03-01T06:24:14.000Z","_content":"\n极限编程(eXtreme Programming)是近几年才时兴起的开发模型，主要是针对中小型开发团队在开发时间要求紧、需求不稳定的中小项目（大多数软件项目都是这个情况）时使用。\n\n极限编程打破了传统软件工程的框架，非常新巧。如：\n- 整个开发过程中文档很少，大量使用“卡片 （如CRC卡片）”来描述开发计划和内容\n- 没有真正意义上的软件功能规格说明书，取而代之的是一系列可测试的用例\n- 没有独立的设计和测试阶段，它们总是在迭代中增量反复进行\n- 设计：尽可能小和简单；一般没有代码复审（code review)，大家共同拥有代码\n- 而它的最显著的一个外在特征是它常使用“成对开发”\n\n极限编程XP的特点可以用“快、小、灵”来概括，极限编程和传统瀑布模型（自顶向下）的区别在于它使用迭代增量（设计->代码->测试->设计->代码…)的方式。\n\n<!-- more -->\n\n# 第一部分：问题\n## 最基本的问题：风险\n常见的风险以及XP如何化解？\n- 进度延迟——XP发行周期较短；一个发行周期内，要求对客户提出的功能进行一到四周的迭代，优先实现优先级较高的功能\n- 项目取消——XP让客户选择具有最大业务意义的最小版本，从而在投入生产前减少发生错误的几率\n- 系统恶化——XP创建并维护一整套测试程序，每次发生变化后都要重新运行测试程序以确保质量\n- 缺陷率高——XP测试时，既遵从程序员按逐条功能编写测试程序的观点，又遵从客户按逐个程序特性编写测试程序的观点\n- 业务误解——XP要求客户成为整个团队的一部分\n- 业务变更——XP缩短了版本周期，因此每个版本的开发过程中的变化就少\n- 错误过多——XP强调只专注于具有最高优先级的任务\n- 人员调整——XP要求程序员承担估算和完成自己工作的责任，并将实际花费时间进行反馈，以改进他们的估算\n\n## 开发过程\nXP的完整开发过程：\n- 结对编程\n- 测试驱动开发\n- 结对开发不仅要运行测试用例，还要改进系统设计\n- 开发之后接着进行集成，以及集成测试\n\n极限编程的基本出发是认为成对开发的效率在一定条件下要高于两个人独立开发的和。在很多项目中，这种做法的有效性已经被证实。\n\n## 软件开发的经济学\n我们需要通过减少开销，更快地获得收入，并增加项目的可能生产周期，从而使我们的软件开发在经济上更具价值。 但最重要的是，我们需要增加商业决策的选项。\n\n我们可以制定一个最大化项目经济价值的战略。 \n- 减少开销，但是这很困难\n- 赚取更多，但这对一个优秀的营销组织可能更加容易\n- 以后花钱并且赚得更快，所以我们支付的利息更少，我们花的钱也更多，我们赚的钱也更多。\n- 增加项目存货的可能性，所以我们更有可能在项目后期获得巨大回报。\n\n## 四大变量\n软件开发过程中的四大变量\n- 成本——钱多一点可以促进工作顺利进行，但短时间内投入太多金钱会产生更多无法解决的问题\n- 时间——更长的交付时间有助于提高质量和扩大范围\n- 质量——有意识的牺牲质量，可能在短时间内获利，但是未来耗费的成本是巨大的\n- 范围——更小的范围有助于提高质量\n\n专注于范围\n许多人知道成本，质量和时间作为控制变量，但不承认第四种。对于软件开发来说，范围是需要注意的最重要的变量。程序员和商业人士对开发中的软件有什么价值都没有模糊的概念。项目管理中最强有力的决定之一就是消除范围。\n\n关于范围的一个很棒的事情是它是一个变化很大的变量。 几十年来，程序员一直在抱怨：“客户不能告诉我们他们想要什么，当我们给他们他们想说的话时，他们不喜欢它。” 这是软件开发的绝对真理。 起初，这些要求从来不明确。 顾客永远无法确切地告诉你他们想要什么。\n\n通过不尝试做太多，可以保持按时生产所需质量的能力。\n\n如果我们根据这个模型创建了一个开发规则，我们将确定一个软件的日期，质量和成本。 我们会看前三个变量所隐含的范围。 然后，随着发展的进展，我们会不断调整范围以符合我们发现它们的条件。\n\n## 变化的成本\n软件工程的普遍假设之一是改变程序的成本随着时间呈指数级增长。\n\n以下几个因素，可以使得我们的代码即使经过长时间开发也可以很容易修改\n- 简单的设计\n- 自动化测试\n- 不断改进设计\n\n## 学会开车\n我们需要通过一些小的调整来控制软件的开发，而不是做一些大的调整，就像驾驶汽车一样。这意味着我们需要反馈意见来了解我们何时休假，我们需要很多机会进行更正，而且我们必须能够以合理的成本进行更正。\n\n软件中的一切都在变化。需求改变，设计更改，技术变化，团队改变，团队成员改变。只有变化才是永远不变的。\n\n## 四个价值观\nXP的四大价值观\n- 沟通——项目问题总是可以追溯到 有人不跟其他人谈论重要的事情。XP旨在在团队成员之间保持良好的沟通。\n- 简化——简单和沟通有着美妙的互相支持的关系。你越多沟通，更清晰，你可以看到究竟需要做什么和更多的信心你有什么真的不需要做。你的系统越简单，你就越少 沟通，这会导致更完整的沟通，尤其是如果可以的话简化系统足以减少程序员。\n- 反馈——系统绝对是无价的。乐观是编程的职业危害，反馈是对这一危害的治疗。\n- 勇气——要勇敢地修正体系结构中的错误，勇敢地抛弃原有的代码。\n\n## 基本原则\nXP的基本原则\n- 快速反馈——行动与反馈之间的间隔对学习至关重要。\n- 假设简单性——把每个问题都看做可以用近乎荒谬的简单方法来解决。\n- 递增更改——每次修改一点点，即使采用XP也必须采用小步骤。\n- 拥抱变化——最佳的策略就是在实践中运用最多的策略，优先解决最重要的问题。\n- 优质工作——出色完成工作是项目最终成功的保证。\n\n## 回到基础\n开发中的四项基本活动\n- 编码——编码是了解最佳结构的方式，同时也能提供清晰简洁的沟通。\n- 测试——测试既是资源也是责任。\n- 倾听——如果准备提问，那么最好准备好倾听答案。\n- 设计——良好的设计可以可以降低系统变更的成本，提高系统的可扩展性\n\n# 第二部分：解决方案\n## 快速概述\n商业考虑和技术考虑都不应该是最重要的。软件发展始终是可能和理想之间的一个不断发展的对话。\n\n商务人士需要决定：\n- 范围——该系统必须解决多少问题才有价值生产？商人有能力了解有多少钱是不够的，多少太多了。\n- 优先级——如果您最初只能拥有A或B，您想要哪一个？生意人能够确定这一点，远比程序员更重要。\n- 发布的组成——业务之前需要完成多少或多少工作用软件比没用它好？程序员对这个问题的直觉可能是疯狂的错误。\n- 发布日期——什么是重要的日期，软件的存在（或一些软件）会产生很大的不同？\n\n技术人员决定：\n- 估计——多久会采取功能来实现？\n- 后果——有战略业务决定，应该只在什么时候做出。了解技术后果。数据库的选择就是一个很好的例子。与创业公司相比，企业可能更愿意与一家大公司合作，生产力可能会使额外的风险或不适感到值得。\n- 过程——如何将工作和团队组织？团队需要适应文化。\n- 详细调度——程序员 需要自由安排最高风险的发展部分，以减少项目的总体风险。在这种限制之下，他们仍然倾向于改变业务优先级。\n\n每次发布应该尽可能小，包含最有价值的业务 要求。版本必须作为一个整体来理解 - 也就是说，你无法实现一半 功能并发布它。\n\n在任何时间，软件的正确设计都是这样的：\n- 运行所有测试。\n- 没有重复的逻辑。对像平行类层次结构这样的隐藏重复要小心。\n- 说明对程序员重要的每一个意图。\n- 尽可能少的类和方法。\n\n任何没有自动化测试的程序功能都不存在。\n\n在XP中，每个人都对整个系统负责。不是每个人都知道每个部分。同样，虽然每个人都知道每个部分的一些东西。如果一对正在工作，他们看到改进代码的机会，他们继续前进，如果让他们的生活更轻松，那就改进它。\n\n真正的客户必须与团队坐在一起，可以回答问题，解决纠纷并进行设置小规模优先事项。\n\n编码标准应该尽可能少的工作，符合一次和唯一。标准应该强调沟通。最后，标准必须由整个团队自愿采用\n\n## 如何工作\n任何一种做法都不可能很好的单独进行。他们要与其他做法一起运用，以保持平衡。\n\n## 管理策略\n管理方面的困境：一方面，你希望经理能够做到这一点决定。没有通信开销，因为只有一个人。有一个人对上级管理层负责。有一个人有远见。没有其他人需要了解它，因为所有的决定都来自一个人。\n\n另一方面，相反的策略是行不通的，不能让每个人都去做决定。\n\n基本的XP管理工作是度量标准。制作大的可视表，对任务总量进行度量。\n\n理想的教练是一个很好的沟通者。\n\n教练的工作职责：\n- 作为新手程序员的开发伙伴。\n- 参与长期重构目标，并鼓励小规模重构来解决部分问题。\n- 帮助具有个人特殊擅长领域的程序员。\n- 向上层管理人员解释开发过程。\n\n跟踪是XP中管理的另一个主要组成部分。跟踪器的工作是收集当前正在跟踪的任何指标并进行确信团队知道实际测量的是什么。运行计划是跟踪器的一部分。\n\n管理人员的干预，可能是调整团队人员结构，甚至也可能是直接终止项目。\n\n## 设施战略\n我们将为我们的团队创建一个开放的工作空间，周围有小型私人空间外围和中间的一个公共编程区域。如果你没有合理的工作场所，你的项目将不会成功。\n\n## 分裂商业和技术\n战略的关键之一是让技术人员关注技术问题，商业人员关注业务问题。\n\n商业人士应该：\n- 发布的范围和时间\n- 建议功能的相对优先级\n- 建议功能的明确范围\n\n技术人员应该：\n- 估计实现各种功能所需的时间\n- 估计各种技术方案的后果\n- 一个适合他们个性、商业环境和发展过程的公司文化\n\n## 规划策略\n我们会迅速制定一个总体计划，然后再进一步细化更短更短的时间范围——年，月，周，天。我们会做的计划迅速且便宜，所以当我们必须改变它时，会有小的惯性。\n\n计划的三个阶段\n- 探索——找出系统能做出什么新东西\n- 承诺——决定接下来要追求的所有可能要求的哪一部分\n- 转向——为现实的开发做出指导计划\n\n## 发展战略\n与管理战略不同，发展战略是一个彻底的相反的观点。从传统的观点来看，我们将为今天的问题精心制定解决方案。今天，相信明天我们将能够解决明天的问题。\n\n发展战略始于迭代计划。持续集成减少 发展冲突并为发展事件创造自然结局。集体所有权鼓励整个团队改善整个系统。最后，结对编程将整个过程联系在一起。\n\n持续集成显著降低了项目风险。\n\n代码集体所有权的影响之一就是复杂代码不会存在很长时间。集体所有权倾向于防止复杂代码很早进入系统。集体所有权也倾向于围绕团队传播系统知识。\n\n## 设计策略\n我们将不断完善系统的设计，从一个非常简单的设计开始，删除任何无用的灵活性。\n\n最佳设计的定义是运行所有测试用例的最简单的设计。\n\n## 测试策略\n在编码之前编写测试，一次又一次地运行测试。我们将永远保留这些测试，并经常一起运行它们。\n\nXP中编写的测试是独立且自动的。\n\n单元测试和功能测试是产品测试的核心。除了单元测试，还有其他同样很重要的测试：并行测试、压力测试、灵活测试。\n\n# 第三部分：实施XP\n## 采用XP\n一次采用一种XP方法，解决团队遇到的最紧迫的问题。当当前问题不再是最紧迫的问题，继续解决下一个最紧迫的问题。\n\n## 改进XP\n如何在现有团队中使用已经投入生产的软件来使用XP？必须在以下方面修改采用策略：\n- 测试——试图返回并为所有现有代码编写测试是很有诱惑力的，但不建议这么做，测试应该是按需编写。\n- 设计——一次只重构一点，在添加新功能时做好重构准备。\n- 计划——切换到XP计划的最大挑战（和机会）是教会客户他们可以从团队中获得多少。\n- 管理——管理向XP转变的最困难的方面之一是决定一个团队成员不再需要工作。\n- 开发——重视结对编程，并准备随时丢弃已经开发出的代码。\n\n## 理想XP项目的生命周期\nXP项目的生命周期：\n- 探索——探索完成这个项目所需要的开发技能。\n- 计划——让客户和程序员自信地达成一致的一个最小，最有价值的故事集合的日期。\n- 第一版本迭代——承诺时间表被分成一到四周的迭代次数。每次迭代都会产生一个为该迭代计划的每个故事设置功能测试用例集。\n- 生产——在开发过程中，会放慢软件开发的速度，评估系统风险是否变得更加重要。\n- 维护——维护实际上是XP项目的正常状态。在生产新的功能的同时，维护系统已有功能正常稳定运行。\n- 死亡——死亡的最好理由：客户对系统满意并且无法想到任何事情他们希望在可预见的未来增加。\n\n## 任务角色\n- 程序员——XP的核心\n- 顾客——极限编程基本二元性的另一半\n- 测试人员——编写测试用例，负责测试系统\n- 跟踪者——做出好的估计，手机各种反馈\n- 教练——为整个过程负责\n- 顾问——帮助解决某个领域深入的技术知识问题\n- 大老板——提供团队勇气、信心以及放权\n\n## 20-80原则\nXP的全部价值在所有的实践到位之后才会实现。很多实践可以采取零碎的做法，但是它们的影响会在成倍增加在一起。\n\n软件程序员习惯于处理20-80规则：80％的好处来自于此20％的工作。\n\n## 什么让XP变得艰难\n主要是情绪，特别是恐惧，使XP变得困难。\n\nXP的细节很简单，但是很难执行。\n\n## 什么时候不应该使用XP\n大团队，不信任的客户，技术 不支持优美的变化。这些情况下，不应该再继续使用XP。\n\n## 工作中的XP\n注意使用适用于XP的合同\n\n## 结论\nXP反映了恐惧的事情：\n- 没有意义的开销\n- 因为没有做好充分的技术准备而被取消的项目\n- 糟糕的商业决策\n- 由业务人员作出技术决策\n- 职业生涯的结束\n- 项目结果不令人满意\n\nXP也反映了不害怕的事情：\n- 编码\n- 拥抱变化\n- 不知道未来的发展\n- 依赖其他人\n- 变化运行系统的分析与设计\n- 编写测试\n\n\n","source":"_posts/读书笔记/Extreme Programming explained读书笔记.md","raw":"---\ntitle: Extreme Programming explained读书笔记\ndate: 2018-03-01 14:24:14\nupdated: 2018-03-01 14:24:14\ntags:\n  - 读书笔记\ncategories: \n  - 读书笔记\n---\n\n极限编程(eXtreme Programming)是近几年才时兴起的开发模型，主要是针对中小型开发团队在开发时间要求紧、需求不稳定的中小项目（大多数软件项目都是这个情况）时使用。\n\n极限编程打破了传统软件工程的框架，非常新巧。如：\n- 整个开发过程中文档很少，大量使用“卡片 （如CRC卡片）”来描述开发计划和内容\n- 没有真正意义上的软件功能规格说明书，取而代之的是一系列可测试的用例\n- 没有独立的设计和测试阶段，它们总是在迭代中增量反复进行\n- 设计：尽可能小和简单；一般没有代码复审（code review)，大家共同拥有代码\n- 而它的最显著的一个外在特征是它常使用“成对开发”\n\n极限编程XP的特点可以用“快、小、灵”来概括，极限编程和传统瀑布模型（自顶向下）的区别在于它使用迭代增量（设计->代码->测试->设计->代码…)的方式。\n\n<!-- more -->\n\n# 第一部分：问题\n## 最基本的问题：风险\n常见的风险以及XP如何化解？\n- 进度延迟——XP发行周期较短；一个发行周期内，要求对客户提出的功能进行一到四周的迭代，优先实现优先级较高的功能\n- 项目取消——XP让客户选择具有最大业务意义的最小版本，从而在投入生产前减少发生错误的几率\n- 系统恶化——XP创建并维护一整套测试程序，每次发生变化后都要重新运行测试程序以确保质量\n- 缺陷率高——XP测试时，既遵从程序员按逐条功能编写测试程序的观点，又遵从客户按逐个程序特性编写测试程序的观点\n- 业务误解——XP要求客户成为整个团队的一部分\n- 业务变更——XP缩短了版本周期，因此每个版本的开发过程中的变化就少\n- 错误过多——XP强调只专注于具有最高优先级的任务\n- 人员调整——XP要求程序员承担估算和完成自己工作的责任，并将实际花费时间进行反馈，以改进他们的估算\n\n## 开发过程\nXP的完整开发过程：\n- 结对编程\n- 测试驱动开发\n- 结对开发不仅要运行测试用例，还要改进系统设计\n- 开发之后接着进行集成，以及集成测试\n\n极限编程的基本出发是认为成对开发的效率在一定条件下要高于两个人独立开发的和。在很多项目中，这种做法的有效性已经被证实。\n\n## 软件开发的经济学\n我们需要通过减少开销，更快地获得收入，并增加项目的可能生产周期，从而使我们的软件开发在经济上更具价值。 但最重要的是，我们需要增加商业决策的选项。\n\n我们可以制定一个最大化项目经济价值的战略。 \n- 减少开销，但是这很困难\n- 赚取更多，但这对一个优秀的营销组织可能更加容易\n- 以后花钱并且赚得更快，所以我们支付的利息更少，我们花的钱也更多，我们赚的钱也更多。\n- 增加项目存货的可能性，所以我们更有可能在项目后期获得巨大回报。\n\n## 四大变量\n软件开发过程中的四大变量\n- 成本——钱多一点可以促进工作顺利进行，但短时间内投入太多金钱会产生更多无法解决的问题\n- 时间——更长的交付时间有助于提高质量和扩大范围\n- 质量——有意识的牺牲质量，可能在短时间内获利，但是未来耗费的成本是巨大的\n- 范围——更小的范围有助于提高质量\n\n专注于范围\n许多人知道成本，质量和时间作为控制变量，但不承认第四种。对于软件开发来说，范围是需要注意的最重要的变量。程序员和商业人士对开发中的软件有什么价值都没有模糊的概念。项目管理中最强有力的决定之一就是消除范围。\n\n关于范围的一个很棒的事情是它是一个变化很大的变量。 几十年来，程序员一直在抱怨：“客户不能告诉我们他们想要什么，当我们给他们他们想说的话时，他们不喜欢它。” 这是软件开发的绝对真理。 起初，这些要求从来不明确。 顾客永远无法确切地告诉你他们想要什么。\n\n通过不尝试做太多，可以保持按时生产所需质量的能力。\n\n如果我们根据这个模型创建了一个开发规则，我们将确定一个软件的日期，质量和成本。 我们会看前三个变量所隐含的范围。 然后，随着发展的进展，我们会不断调整范围以符合我们发现它们的条件。\n\n## 变化的成本\n软件工程的普遍假设之一是改变程序的成本随着时间呈指数级增长。\n\n以下几个因素，可以使得我们的代码即使经过长时间开发也可以很容易修改\n- 简单的设计\n- 自动化测试\n- 不断改进设计\n\n## 学会开车\n我们需要通过一些小的调整来控制软件的开发，而不是做一些大的调整，就像驾驶汽车一样。这意味着我们需要反馈意见来了解我们何时休假，我们需要很多机会进行更正，而且我们必须能够以合理的成本进行更正。\n\n软件中的一切都在变化。需求改变，设计更改，技术变化，团队改变，团队成员改变。只有变化才是永远不变的。\n\n## 四个价值观\nXP的四大价值观\n- 沟通——项目问题总是可以追溯到 有人不跟其他人谈论重要的事情。XP旨在在团队成员之间保持良好的沟通。\n- 简化——简单和沟通有着美妙的互相支持的关系。你越多沟通，更清晰，你可以看到究竟需要做什么和更多的信心你有什么真的不需要做。你的系统越简单，你就越少 沟通，这会导致更完整的沟通，尤其是如果可以的话简化系统足以减少程序员。\n- 反馈——系统绝对是无价的。乐观是编程的职业危害，反馈是对这一危害的治疗。\n- 勇气——要勇敢地修正体系结构中的错误，勇敢地抛弃原有的代码。\n\n## 基本原则\nXP的基本原则\n- 快速反馈——行动与反馈之间的间隔对学习至关重要。\n- 假设简单性——把每个问题都看做可以用近乎荒谬的简单方法来解决。\n- 递增更改——每次修改一点点，即使采用XP也必须采用小步骤。\n- 拥抱变化——最佳的策略就是在实践中运用最多的策略，优先解决最重要的问题。\n- 优质工作——出色完成工作是项目最终成功的保证。\n\n## 回到基础\n开发中的四项基本活动\n- 编码——编码是了解最佳结构的方式，同时也能提供清晰简洁的沟通。\n- 测试——测试既是资源也是责任。\n- 倾听——如果准备提问，那么最好准备好倾听答案。\n- 设计——良好的设计可以可以降低系统变更的成本，提高系统的可扩展性\n\n# 第二部分：解决方案\n## 快速概述\n商业考虑和技术考虑都不应该是最重要的。软件发展始终是可能和理想之间的一个不断发展的对话。\n\n商务人士需要决定：\n- 范围——该系统必须解决多少问题才有价值生产？商人有能力了解有多少钱是不够的，多少太多了。\n- 优先级——如果您最初只能拥有A或B，您想要哪一个？生意人能够确定这一点，远比程序员更重要。\n- 发布的组成——业务之前需要完成多少或多少工作用软件比没用它好？程序员对这个问题的直觉可能是疯狂的错误。\n- 发布日期——什么是重要的日期，软件的存在（或一些软件）会产生很大的不同？\n\n技术人员决定：\n- 估计——多久会采取功能来实现？\n- 后果——有战略业务决定，应该只在什么时候做出。了解技术后果。数据库的选择就是一个很好的例子。与创业公司相比，企业可能更愿意与一家大公司合作，生产力可能会使额外的风险或不适感到值得。\n- 过程——如何将工作和团队组织？团队需要适应文化。\n- 详细调度——程序员 需要自由安排最高风险的发展部分，以减少项目的总体风险。在这种限制之下，他们仍然倾向于改变业务优先级。\n\n每次发布应该尽可能小，包含最有价值的业务 要求。版本必须作为一个整体来理解 - 也就是说，你无法实现一半 功能并发布它。\n\n在任何时间，软件的正确设计都是这样的：\n- 运行所有测试。\n- 没有重复的逻辑。对像平行类层次结构这样的隐藏重复要小心。\n- 说明对程序员重要的每一个意图。\n- 尽可能少的类和方法。\n\n任何没有自动化测试的程序功能都不存在。\n\n在XP中，每个人都对整个系统负责。不是每个人都知道每个部分。同样，虽然每个人都知道每个部分的一些东西。如果一对正在工作，他们看到改进代码的机会，他们继续前进，如果让他们的生活更轻松，那就改进它。\n\n真正的客户必须与团队坐在一起，可以回答问题，解决纠纷并进行设置小规模优先事项。\n\n编码标准应该尽可能少的工作，符合一次和唯一。标准应该强调沟通。最后，标准必须由整个团队自愿采用\n\n## 如何工作\n任何一种做法都不可能很好的单独进行。他们要与其他做法一起运用，以保持平衡。\n\n## 管理策略\n管理方面的困境：一方面，你希望经理能够做到这一点决定。没有通信开销，因为只有一个人。有一个人对上级管理层负责。有一个人有远见。没有其他人需要了解它，因为所有的决定都来自一个人。\n\n另一方面，相反的策略是行不通的，不能让每个人都去做决定。\n\n基本的XP管理工作是度量标准。制作大的可视表，对任务总量进行度量。\n\n理想的教练是一个很好的沟通者。\n\n教练的工作职责：\n- 作为新手程序员的开发伙伴。\n- 参与长期重构目标，并鼓励小规模重构来解决部分问题。\n- 帮助具有个人特殊擅长领域的程序员。\n- 向上层管理人员解释开发过程。\n\n跟踪是XP中管理的另一个主要组成部分。跟踪器的工作是收集当前正在跟踪的任何指标并进行确信团队知道实际测量的是什么。运行计划是跟踪器的一部分。\n\n管理人员的干预，可能是调整团队人员结构，甚至也可能是直接终止项目。\n\n## 设施战略\n我们将为我们的团队创建一个开放的工作空间，周围有小型私人空间外围和中间的一个公共编程区域。如果你没有合理的工作场所，你的项目将不会成功。\n\n## 分裂商业和技术\n战略的关键之一是让技术人员关注技术问题，商业人员关注业务问题。\n\n商业人士应该：\n- 发布的范围和时间\n- 建议功能的相对优先级\n- 建议功能的明确范围\n\n技术人员应该：\n- 估计实现各种功能所需的时间\n- 估计各种技术方案的后果\n- 一个适合他们个性、商业环境和发展过程的公司文化\n\n## 规划策略\n我们会迅速制定一个总体计划，然后再进一步细化更短更短的时间范围——年，月，周，天。我们会做的计划迅速且便宜，所以当我们必须改变它时，会有小的惯性。\n\n计划的三个阶段\n- 探索——找出系统能做出什么新东西\n- 承诺——决定接下来要追求的所有可能要求的哪一部分\n- 转向——为现实的开发做出指导计划\n\n## 发展战略\n与管理战略不同，发展战略是一个彻底的相反的观点。从传统的观点来看，我们将为今天的问题精心制定解决方案。今天，相信明天我们将能够解决明天的问题。\n\n发展战略始于迭代计划。持续集成减少 发展冲突并为发展事件创造自然结局。集体所有权鼓励整个团队改善整个系统。最后，结对编程将整个过程联系在一起。\n\n持续集成显著降低了项目风险。\n\n代码集体所有权的影响之一就是复杂代码不会存在很长时间。集体所有权倾向于防止复杂代码很早进入系统。集体所有权也倾向于围绕团队传播系统知识。\n\n## 设计策略\n我们将不断完善系统的设计，从一个非常简单的设计开始，删除任何无用的灵活性。\n\n最佳设计的定义是运行所有测试用例的最简单的设计。\n\n## 测试策略\n在编码之前编写测试，一次又一次地运行测试。我们将永远保留这些测试，并经常一起运行它们。\n\nXP中编写的测试是独立且自动的。\n\n单元测试和功能测试是产品测试的核心。除了单元测试，还有其他同样很重要的测试：并行测试、压力测试、灵活测试。\n\n# 第三部分：实施XP\n## 采用XP\n一次采用一种XP方法，解决团队遇到的最紧迫的问题。当当前问题不再是最紧迫的问题，继续解决下一个最紧迫的问题。\n\n## 改进XP\n如何在现有团队中使用已经投入生产的软件来使用XP？必须在以下方面修改采用策略：\n- 测试——试图返回并为所有现有代码编写测试是很有诱惑力的，但不建议这么做，测试应该是按需编写。\n- 设计——一次只重构一点，在添加新功能时做好重构准备。\n- 计划——切换到XP计划的最大挑战（和机会）是教会客户他们可以从团队中获得多少。\n- 管理——管理向XP转变的最困难的方面之一是决定一个团队成员不再需要工作。\n- 开发——重视结对编程，并准备随时丢弃已经开发出的代码。\n\n## 理想XP项目的生命周期\nXP项目的生命周期：\n- 探索——探索完成这个项目所需要的开发技能。\n- 计划——让客户和程序员自信地达成一致的一个最小，最有价值的故事集合的日期。\n- 第一版本迭代——承诺时间表被分成一到四周的迭代次数。每次迭代都会产生一个为该迭代计划的每个故事设置功能测试用例集。\n- 生产——在开发过程中，会放慢软件开发的速度，评估系统风险是否变得更加重要。\n- 维护——维护实际上是XP项目的正常状态。在生产新的功能的同时，维护系统已有功能正常稳定运行。\n- 死亡——死亡的最好理由：客户对系统满意并且无法想到任何事情他们希望在可预见的未来增加。\n\n## 任务角色\n- 程序员——XP的核心\n- 顾客——极限编程基本二元性的另一半\n- 测试人员——编写测试用例，负责测试系统\n- 跟踪者——做出好的估计，手机各种反馈\n- 教练——为整个过程负责\n- 顾问——帮助解决某个领域深入的技术知识问题\n- 大老板——提供团队勇气、信心以及放权\n\n## 20-80原则\nXP的全部价值在所有的实践到位之后才会实现。很多实践可以采取零碎的做法，但是它们的影响会在成倍增加在一起。\n\n软件程序员习惯于处理20-80规则：80％的好处来自于此20％的工作。\n\n## 什么让XP变得艰难\n主要是情绪，特别是恐惧，使XP变得困难。\n\nXP的细节很简单，但是很难执行。\n\n## 什么时候不应该使用XP\n大团队，不信任的客户，技术 不支持优美的变化。这些情况下，不应该再继续使用XP。\n\n## 工作中的XP\n注意使用适用于XP的合同\n\n## 结论\nXP反映了恐惧的事情：\n- 没有意义的开销\n- 因为没有做好充分的技术准备而被取消的项目\n- 糟糕的商业决策\n- 由业务人员作出技术决策\n- 职业生涯的结束\n- 项目结果不令人满意\n\nXP也反映了不害怕的事情：\n- 编码\n- 拥抱变化\n- 不知道未来的发展\n- 依赖其他人\n- 变化运行系统的分析与设计\n- 编写测试\n\n\n","slug":"读书笔记/Extreme Programming explained读书笔记","published":1,"_id":"cjf4zmnv00016woy6fkx5h7qc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>极限编程(eXtreme Programming)是近几年才时兴起的开发模型，主要是针对中小型开发团队在开发时间要求紧、需求不稳定的中小项目（大多数软件项目都是这个情况）时使用。</p>\n<p>极限编程打破了传统软件工程的框架，非常新巧。如：</p>\n<ul>\n<li>整个开发过程中文档很少，大量使用“卡片 （如CRC卡片）”来描述开发计划和内容</li>\n<li>没有真正意义上的软件功能规格说明书，取而代之的是一系列可测试的用例</li>\n<li>没有独立的设计和测试阶段，它们总是在迭代中增量反复进行</li>\n<li>设计：尽可能小和简单；一般没有代码复审（code review)，大家共同拥有代码</li>\n<li>而它的最显著的一个外在特征是它常使用“成对开发”</li>\n</ul>\n<p>极限编程XP的特点可以用“快、小、灵”来概括，极限编程和传统瀑布模型（自顶向下）的区别在于它使用迭代增量（设计-&gt;代码-&gt;测试-&gt;设计-&gt;代码…)的方式。</p>\n<a id=\"more\"></a>\n<h1 id=\"第一部分：问题\"><a href=\"#第一部分：问题\" class=\"headerlink\" title=\"第一部分：问题\"></a>第一部分：问题</h1><h2 id=\"最基本的问题：风险\"><a href=\"#最基本的问题：风险\" class=\"headerlink\" title=\"最基本的问题：风险\"></a>最基本的问题：风险</h2><p>常见的风险以及XP如何化解？</p>\n<ul>\n<li>进度延迟——XP发行周期较短；一个发行周期内，要求对客户提出的功能进行一到四周的迭代，优先实现优先级较高的功能</li>\n<li>项目取消——XP让客户选择具有最大业务意义的最小版本，从而在投入生产前减少发生错误的几率</li>\n<li>系统恶化——XP创建并维护一整套测试程序，每次发生变化后都要重新运行测试程序以确保质量</li>\n<li>缺陷率高——XP测试时，既遵从程序员按逐条功能编写测试程序的观点，又遵从客户按逐个程序特性编写测试程序的观点</li>\n<li>业务误解——XP要求客户成为整个团队的一部分</li>\n<li>业务变更——XP缩短了版本周期，因此每个版本的开发过程中的变化就少</li>\n<li>错误过多——XP强调只专注于具有最高优先级的任务</li>\n<li>人员调整——XP要求程序员承担估算和完成自己工作的责任，并将实际花费时间进行反馈，以改进他们的估算</li>\n</ul>\n<h2 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h2><p>XP的完整开发过程：</p>\n<ul>\n<li>结对编程</li>\n<li>测试驱动开发</li>\n<li>结对开发不仅要运行测试用例，还要改进系统设计</li>\n<li>开发之后接着进行集成，以及集成测试</li>\n</ul>\n<p>极限编程的基本出发是认为成对开发的效率在一定条件下要高于两个人独立开发的和。在很多项目中，这种做法的有效性已经被证实。</p>\n<h2 id=\"软件开发的经济学\"><a href=\"#软件开发的经济学\" class=\"headerlink\" title=\"软件开发的经济学\"></a>软件开发的经济学</h2><p>我们需要通过减少开销，更快地获得收入，并增加项目的可能生产周期，从而使我们的软件开发在经济上更具价值。 但最重要的是，我们需要增加商业决策的选项。</p>\n<p>我们可以制定一个最大化项目经济价值的战略。 </p>\n<ul>\n<li>减少开销，但是这很困难</li>\n<li>赚取更多，但这对一个优秀的营销组织可能更加容易</li>\n<li>以后花钱并且赚得更快，所以我们支付的利息更少，我们花的钱也更多，我们赚的钱也更多。</li>\n<li>增加项目存货的可能性，所以我们更有可能在项目后期获得巨大回报。</li>\n</ul>\n<h2 id=\"四大变量\"><a href=\"#四大变量\" class=\"headerlink\" title=\"四大变量\"></a>四大变量</h2><p>软件开发过程中的四大变量</p>\n<ul>\n<li>成本——钱多一点可以促进工作顺利进行，但短时间内投入太多金钱会产生更多无法解决的问题</li>\n<li>时间——更长的交付时间有助于提高质量和扩大范围</li>\n<li>质量——有意识的牺牲质量，可能在短时间内获利，但是未来耗费的成本是巨大的</li>\n<li>范围——更小的范围有助于提高质量</li>\n</ul>\n<p>专注于范围<br>许多人知道成本，质量和时间作为控制变量，但不承认第四种。对于软件开发来说，范围是需要注意的最重要的变量。程序员和商业人士对开发中的软件有什么价值都没有模糊的概念。项目管理中最强有力的决定之一就是消除范围。</p>\n<p>关于范围的一个很棒的事情是它是一个变化很大的变量。 几十年来，程序员一直在抱怨：“客户不能告诉我们他们想要什么，当我们给他们他们想说的话时，他们不喜欢它。” 这是软件开发的绝对真理。 起初，这些要求从来不明确。 顾客永远无法确切地告诉你他们想要什么。</p>\n<p>通过不尝试做太多，可以保持按时生产所需质量的能力。</p>\n<p>如果我们根据这个模型创建了一个开发规则，我们将确定一个软件的日期，质量和成本。 我们会看前三个变量所隐含的范围。 然后，随着发展的进展，我们会不断调整范围以符合我们发现它们的条件。</p>\n<h2 id=\"变化的成本\"><a href=\"#变化的成本\" class=\"headerlink\" title=\"变化的成本\"></a>变化的成本</h2><p>软件工程的普遍假设之一是改变程序的成本随着时间呈指数级增长。</p>\n<p>以下几个因素，可以使得我们的代码即使经过长时间开发也可以很容易修改</p>\n<ul>\n<li>简单的设计</li>\n<li>自动化测试</li>\n<li>不断改进设计</li>\n</ul>\n<h2 id=\"学会开车\"><a href=\"#学会开车\" class=\"headerlink\" title=\"学会开车\"></a>学会开车</h2><p>我们需要通过一些小的调整来控制软件的开发，而不是做一些大的调整，就像驾驶汽车一样。这意味着我们需要反馈意见来了解我们何时休假，我们需要很多机会进行更正，而且我们必须能够以合理的成本进行更正。</p>\n<p>软件中的一切都在变化。需求改变，设计更改，技术变化，团队改变，团队成员改变。只有变化才是永远不变的。</p>\n<h2 id=\"四个价值观\"><a href=\"#四个价值观\" class=\"headerlink\" title=\"四个价值观\"></a>四个价值观</h2><p>XP的四大价值观</p>\n<ul>\n<li>沟通——项目问题总是可以追溯到 有人不跟其他人谈论重要的事情。XP旨在在团队成员之间保持良好的沟通。</li>\n<li>简化——简单和沟通有着美妙的互相支持的关系。你越多沟通，更清晰，你可以看到究竟需要做什么和更多的信心你有什么真的不需要做。你的系统越简单，你就越少 沟通，这会导致更完整的沟通，尤其是如果可以的话简化系统足以减少程序员。</li>\n<li>反馈——系统绝对是无价的。乐观是编程的职业危害，反馈是对这一危害的治疗。</li>\n<li>勇气——要勇敢地修正体系结构中的错误，勇敢地抛弃原有的代码。</li>\n</ul>\n<h2 id=\"基本原则\"><a href=\"#基本原则\" class=\"headerlink\" title=\"基本原则\"></a>基本原则</h2><p>XP的基本原则</p>\n<ul>\n<li>快速反馈——行动与反馈之间的间隔对学习至关重要。</li>\n<li>假设简单性——把每个问题都看做可以用近乎荒谬的简单方法来解决。</li>\n<li>递增更改——每次修改一点点，即使采用XP也必须采用小步骤。</li>\n<li>拥抱变化——最佳的策略就是在实践中运用最多的策略，优先解决最重要的问题。</li>\n<li>优质工作——出色完成工作是项目最终成功的保证。</li>\n</ul>\n<h2 id=\"回到基础\"><a href=\"#回到基础\" class=\"headerlink\" title=\"回到基础\"></a>回到基础</h2><p>开发中的四项基本活动</p>\n<ul>\n<li>编码——编码是了解最佳结构的方式，同时也能提供清晰简洁的沟通。</li>\n<li>测试——测试既是资源也是责任。</li>\n<li>倾听——如果准备提问，那么最好准备好倾听答案。</li>\n<li>设计——良好的设计可以可以降低系统变更的成本，提高系统的可扩展性</li>\n</ul>\n<h1 id=\"第二部分：解决方案\"><a href=\"#第二部分：解决方案\" class=\"headerlink\" title=\"第二部分：解决方案\"></a>第二部分：解决方案</h1><h2 id=\"快速概述\"><a href=\"#快速概述\" class=\"headerlink\" title=\"快速概述\"></a>快速概述</h2><p>商业考虑和技术考虑都不应该是最重要的。软件发展始终是可能和理想之间的一个不断发展的对话。</p>\n<p>商务人士需要决定：</p>\n<ul>\n<li>范围——该系统必须解决多少问题才有价值生产？商人有能力了解有多少钱是不够的，多少太多了。</li>\n<li>优先级——如果您最初只能拥有A或B，您想要哪一个？生意人能够确定这一点，远比程序员更重要。</li>\n<li>发布的组成——业务之前需要完成多少或多少工作用软件比没用它好？程序员对这个问题的直觉可能是疯狂的错误。</li>\n<li>发布日期——什么是重要的日期，软件的存在（或一些软件）会产生很大的不同？</li>\n</ul>\n<p>技术人员决定：</p>\n<ul>\n<li>估计——多久会采取功能来实现？</li>\n<li>后果——有战略业务决定，应该只在什么时候做出。了解技术后果。数据库的选择就是一个很好的例子。与创业公司相比，企业可能更愿意与一家大公司合作，生产力可能会使额外的风险或不适感到值得。</li>\n<li>过程——如何将工作和团队组织？团队需要适应文化。</li>\n<li>详细调度——程序员 需要自由安排最高风险的发展部分，以减少项目的总体风险。在这种限制之下，他们仍然倾向于改变业务优先级。</li>\n</ul>\n<p>每次发布应该尽可能小，包含最有价值的业务 要求。版本必须作为一个整体来理解 - 也就是说，你无法实现一半 功能并发布它。</p>\n<p>在任何时间，软件的正确设计都是这样的：</p>\n<ul>\n<li>运行所有测试。</li>\n<li>没有重复的逻辑。对像平行类层次结构这样的隐藏重复要小心。</li>\n<li>说明对程序员重要的每一个意图。</li>\n<li>尽可能少的类和方法。</li>\n</ul>\n<p>任何没有自动化测试的程序功能都不存在。</p>\n<p>在XP中，每个人都对整个系统负责。不是每个人都知道每个部分。同样，虽然每个人都知道每个部分的一些东西。如果一对正在工作，他们看到改进代码的机会，他们继续前进，如果让他们的生活更轻松，那就改进它。</p>\n<p>真正的客户必须与团队坐在一起，可以回答问题，解决纠纷并进行设置小规模优先事项。</p>\n<p>编码标准应该尽可能少的工作，符合一次和唯一。标准应该强调沟通。最后，标准必须由整个团队自愿采用</p>\n<h2 id=\"如何工作\"><a href=\"#如何工作\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>任何一种做法都不可能很好的单独进行。他们要与其他做法一起运用，以保持平衡。</p>\n<h2 id=\"管理策略\"><a href=\"#管理策略\" class=\"headerlink\" title=\"管理策略\"></a>管理策略</h2><p>管理方面的困境：一方面，你希望经理能够做到这一点决定。没有通信开销，因为只有一个人。有一个人对上级管理层负责。有一个人有远见。没有其他人需要了解它，因为所有的决定都来自一个人。</p>\n<p>另一方面，相反的策略是行不通的，不能让每个人都去做决定。</p>\n<p>基本的XP管理工作是度量标准。制作大的可视表，对任务总量进行度量。</p>\n<p>理想的教练是一个很好的沟通者。</p>\n<p>教练的工作职责：</p>\n<ul>\n<li>作为新手程序员的开发伙伴。</li>\n<li>参与长期重构目标，并鼓励小规模重构来解决部分问题。</li>\n<li>帮助具有个人特殊擅长领域的程序员。</li>\n<li>向上层管理人员解释开发过程。</li>\n</ul>\n<p>跟踪是XP中管理的另一个主要组成部分。跟踪器的工作是收集当前正在跟踪的任何指标并进行确信团队知道实际测量的是什么。运行计划是跟踪器的一部分。</p>\n<p>管理人员的干预，可能是调整团队人员结构，甚至也可能是直接终止项目。</p>\n<h2 id=\"设施战略\"><a href=\"#设施战略\" class=\"headerlink\" title=\"设施战略\"></a>设施战略</h2><p>我们将为我们的团队创建一个开放的工作空间，周围有小型私人空间外围和中间的一个公共编程区域。如果你没有合理的工作场所，你的项目将不会成功。</p>\n<h2 id=\"分裂商业和技术\"><a href=\"#分裂商业和技术\" class=\"headerlink\" title=\"分裂商业和技术\"></a>分裂商业和技术</h2><p>战略的关键之一是让技术人员关注技术问题，商业人员关注业务问题。</p>\n<p>商业人士应该：</p>\n<ul>\n<li>发布的范围和时间</li>\n<li>建议功能的相对优先级</li>\n<li>建议功能的明确范围</li>\n</ul>\n<p>技术人员应该：</p>\n<ul>\n<li>估计实现各种功能所需的时间</li>\n<li>估计各种技术方案的后果</li>\n<li>一个适合他们个性、商业环境和发展过程的公司文化</li>\n</ul>\n<h2 id=\"规划策略\"><a href=\"#规划策略\" class=\"headerlink\" title=\"规划策略\"></a>规划策略</h2><p>我们会迅速制定一个总体计划，然后再进一步细化更短更短的时间范围——年，月，周，天。我们会做的计划迅速且便宜，所以当我们必须改变它时，会有小的惯性。</p>\n<p>计划的三个阶段</p>\n<ul>\n<li>探索——找出系统能做出什么新东西</li>\n<li>承诺——决定接下来要追求的所有可能要求的哪一部分</li>\n<li>转向——为现实的开发做出指导计划</li>\n</ul>\n<h2 id=\"发展战略\"><a href=\"#发展战略\" class=\"headerlink\" title=\"发展战略\"></a>发展战略</h2><p>与管理战略不同，发展战略是一个彻底的相反的观点。从传统的观点来看，我们将为今天的问题精心制定解决方案。今天，相信明天我们将能够解决明天的问题。</p>\n<p>发展战略始于迭代计划。持续集成减少 发展冲突并为发展事件创造自然结局。集体所有权鼓励整个团队改善整个系统。最后，结对编程将整个过程联系在一起。</p>\n<p>持续集成显著降低了项目风险。</p>\n<p>代码集体所有权的影响之一就是复杂代码不会存在很长时间。集体所有权倾向于防止复杂代码很早进入系统。集体所有权也倾向于围绕团队传播系统知识。</p>\n<h2 id=\"设计策略\"><a href=\"#设计策略\" class=\"headerlink\" title=\"设计策略\"></a>设计策略</h2><p>我们将不断完善系统的设计，从一个非常简单的设计开始，删除任何无用的灵活性。</p>\n<p>最佳设计的定义是运行所有测试用例的最简单的设计。</p>\n<h2 id=\"测试策略\"><a href=\"#测试策略\" class=\"headerlink\" title=\"测试策略\"></a>测试策略</h2><p>在编码之前编写测试，一次又一次地运行测试。我们将永远保留这些测试，并经常一起运行它们。</p>\n<p>XP中编写的测试是独立且自动的。</p>\n<p>单元测试和功能测试是产品测试的核心。除了单元测试，还有其他同样很重要的测试：并行测试、压力测试、灵活测试。</p>\n<h1 id=\"第三部分：实施XP\"><a href=\"#第三部分：实施XP\" class=\"headerlink\" title=\"第三部分：实施XP\"></a>第三部分：实施XP</h1><h2 id=\"采用XP\"><a href=\"#采用XP\" class=\"headerlink\" title=\"采用XP\"></a>采用XP</h2><p>一次采用一种XP方法，解决团队遇到的最紧迫的问题。当当前问题不再是最紧迫的问题，继续解决下一个最紧迫的问题。</p>\n<h2 id=\"改进XP\"><a href=\"#改进XP\" class=\"headerlink\" title=\"改进XP\"></a>改进XP</h2><p>如何在现有团队中使用已经投入生产的软件来使用XP？必须在以下方面修改采用策略：</p>\n<ul>\n<li>测试——试图返回并为所有现有代码编写测试是很有诱惑力的，但不建议这么做，测试应该是按需编写。</li>\n<li>设计——一次只重构一点，在添加新功能时做好重构准备。</li>\n<li>计划——切换到XP计划的最大挑战（和机会）是教会客户他们可以从团队中获得多少。</li>\n<li>管理——管理向XP转变的最困难的方面之一是决定一个团队成员不再需要工作。</li>\n<li>开发——重视结对编程，并准备随时丢弃已经开发出的代码。</li>\n</ul>\n<h2 id=\"理想XP项目的生命周期\"><a href=\"#理想XP项目的生命周期\" class=\"headerlink\" title=\"理想XP项目的生命周期\"></a>理想XP项目的生命周期</h2><p>XP项目的生命周期：</p>\n<ul>\n<li>探索——探索完成这个项目所需要的开发技能。</li>\n<li>计划——让客户和程序员自信地达成一致的一个最小，最有价值的故事集合的日期。</li>\n<li>第一版本迭代——承诺时间表被分成一到四周的迭代次数。每次迭代都会产生一个为该迭代计划的每个故事设置功能测试用例集。</li>\n<li>生产——在开发过程中，会放慢软件开发的速度，评估系统风险是否变得更加重要。</li>\n<li>维护——维护实际上是XP项目的正常状态。在生产新的功能的同时，维护系统已有功能正常稳定运行。</li>\n<li>死亡——死亡的最好理由：客户对系统满意并且无法想到任何事情他们希望在可预见的未来增加。</li>\n</ul>\n<h2 id=\"任务角色\"><a href=\"#任务角色\" class=\"headerlink\" title=\"任务角色\"></a>任务角色</h2><ul>\n<li>程序员——XP的核心</li>\n<li>顾客——极限编程基本二元性的另一半</li>\n<li>测试人员——编写测试用例，负责测试系统</li>\n<li>跟踪者——做出好的估计，手机各种反馈</li>\n<li>教练——为整个过程负责</li>\n<li>顾问——帮助解决某个领域深入的技术知识问题</li>\n<li>大老板——提供团队勇气、信心以及放权</li>\n</ul>\n<h2 id=\"20-80原则\"><a href=\"#20-80原则\" class=\"headerlink\" title=\"20-80原则\"></a>20-80原则</h2><p>XP的全部价值在所有的实践到位之后才会实现。很多实践可以采取零碎的做法，但是它们的影响会在成倍增加在一起。</p>\n<p>软件程序员习惯于处理20-80规则：80％的好处来自于此20％的工作。</p>\n<h2 id=\"什么让XP变得艰难\"><a href=\"#什么让XP变得艰难\" class=\"headerlink\" title=\"什么让XP变得艰难\"></a>什么让XP变得艰难</h2><p>主要是情绪，特别是恐惧，使XP变得困难。</p>\n<p>XP的细节很简单，但是很难执行。</p>\n<h2 id=\"什么时候不应该使用XP\"><a href=\"#什么时候不应该使用XP\" class=\"headerlink\" title=\"什么时候不应该使用XP\"></a>什么时候不应该使用XP</h2><p>大团队，不信任的客户，技术 不支持优美的变化。这些情况下，不应该再继续使用XP。</p>\n<h2 id=\"工作中的XP\"><a href=\"#工作中的XP\" class=\"headerlink\" title=\"工作中的XP\"></a>工作中的XP</h2><p>注意使用适用于XP的合同</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>XP反映了恐惧的事情：</p>\n<ul>\n<li>没有意义的开销</li>\n<li>因为没有做好充分的技术准备而被取消的项目</li>\n<li>糟糕的商业决策</li>\n<li>由业务人员作出技术决策</li>\n<li>职业生涯的结束</li>\n<li>项目结果不令人满意</li>\n</ul>\n<p>XP也反映了不害怕的事情：</p>\n<ul>\n<li>编码</li>\n<li>拥抱变化</li>\n<li>不知道未来的发展</li>\n<li>依赖其他人</li>\n<li>变化运行系统的分析与设计</li>\n<li>编写测试</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>极限编程(eXtreme Programming)是近几年才时兴起的开发模型，主要是针对中小型开发团队在开发时间要求紧、需求不稳定的中小项目（大多数软件项目都是这个情况）时使用。</p>\n<p>极限编程打破了传统软件工程的框架，非常新巧。如：</p>\n<ul>\n<li>整个开发过程中文档很少，大量使用“卡片 （如CRC卡片）”来描述开发计划和内容</li>\n<li>没有真正意义上的软件功能规格说明书，取而代之的是一系列可测试的用例</li>\n<li>没有独立的设计和测试阶段，它们总是在迭代中增量反复进行</li>\n<li>设计：尽可能小和简单；一般没有代码复审（code review)，大家共同拥有代码</li>\n<li>而它的最显著的一个外在特征是它常使用“成对开发”</li>\n</ul>\n<p>极限编程XP的特点可以用“快、小、灵”来概括，极限编程和传统瀑布模型（自顶向下）的区别在于它使用迭代增量（设计-&gt;代码-&gt;测试-&gt;设计-&gt;代码…)的方式。</p>","more":"<h1 id=\"第一部分：问题\"><a href=\"#第一部分：问题\" class=\"headerlink\" title=\"第一部分：问题\"></a>第一部分：问题</h1><h2 id=\"最基本的问题：风险\"><a href=\"#最基本的问题：风险\" class=\"headerlink\" title=\"最基本的问题：风险\"></a>最基本的问题：风险</h2><p>常见的风险以及XP如何化解？</p>\n<ul>\n<li>进度延迟——XP发行周期较短；一个发行周期内，要求对客户提出的功能进行一到四周的迭代，优先实现优先级较高的功能</li>\n<li>项目取消——XP让客户选择具有最大业务意义的最小版本，从而在投入生产前减少发生错误的几率</li>\n<li>系统恶化——XP创建并维护一整套测试程序，每次发生变化后都要重新运行测试程序以确保质量</li>\n<li>缺陷率高——XP测试时，既遵从程序员按逐条功能编写测试程序的观点，又遵从客户按逐个程序特性编写测试程序的观点</li>\n<li>业务误解——XP要求客户成为整个团队的一部分</li>\n<li>业务变更——XP缩短了版本周期，因此每个版本的开发过程中的变化就少</li>\n<li>错误过多——XP强调只专注于具有最高优先级的任务</li>\n<li>人员调整——XP要求程序员承担估算和完成自己工作的责任，并将实际花费时间进行反馈，以改进他们的估算</li>\n</ul>\n<h2 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h2><p>XP的完整开发过程：</p>\n<ul>\n<li>结对编程</li>\n<li>测试驱动开发</li>\n<li>结对开发不仅要运行测试用例，还要改进系统设计</li>\n<li>开发之后接着进行集成，以及集成测试</li>\n</ul>\n<p>极限编程的基本出发是认为成对开发的效率在一定条件下要高于两个人独立开发的和。在很多项目中，这种做法的有效性已经被证实。</p>\n<h2 id=\"软件开发的经济学\"><a href=\"#软件开发的经济学\" class=\"headerlink\" title=\"软件开发的经济学\"></a>软件开发的经济学</h2><p>我们需要通过减少开销，更快地获得收入，并增加项目的可能生产周期，从而使我们的软件开发在经济上更具价值。 但最重要的是，我们需要增加商业决策的选项。</p>\n<p>我们可以制定一个最大化项目经济价值的战略。 </p>\n<ul>\n<li>减少开销，但是这很困难</li>\n<li>赚取更多，但这对一个优秀的营销组织可能更加容易</li>\n<li>以后花钱并且赚得更快，所以我们支付的利息更少，我们花的钱也更多，我们赚的钱也更多。</li>\n<li>增加项目存货的可能性，所以我们更有可能在项目后期获得巨大回报。</li>\n</ul>\n<h2 id=\"四大变量\"><a href=\"#四大变量\" class=\"headerlink\" title=\"四大变量\"></a>四大变量</h2><p>软件开发过程中的四大变量</p>\n<ul>\n<li>成本——钱多一点可以促进工作顺利进行，但短时间内投入太多金钱会产生更多无法解决的问题</li>\n<li>时间——更长的交付时间有助于提高质量和扩大范围</li>\n<li>质量——有意识的牺牲质量，可能在短时间内获利，但是未来耗费的成本是巨大的</li>\n<li>范围——更小的范围有助于提高质量</li>\n</ul>\n<p>专注于范围<br>许多人知道成本，质量和时间作为控制变量，但不承认第四种。对于软件开发来说，范围是需要注意的最重要的变量。程序员和商业人士对开发中的软件有什么价值都没有模糊的概念。项目管理中最强有力的决定之一就是消除范围。</p>\n<p>关于范围的一个很棒的事情是它是一个变化很大的变量。 几十年来，程序员一直在抱怨：“客户不能告诉我们他们想要什么，当我们给他们他们想说的话时，他们不喜欢它。” 这是软件开发的绝对真理。 起初，这些要求从来不明确。 顾客永远无法确切地告诉你他们想要什么。</p>\n<p>通过不尝试做太多，可以保持按时生产所需质量的能力。</p>\n<p>如果我们根据这个模型创建了一个开发规则，我们将确定一个软件的日期，质量和成本。 我们会看前三个变量所隐含的范围。 然后，随着发展的进展，我们会不断调整范围以符合我们发现它们的条件。</p>\n<h2 id=\"变化的成本\"><a href=\"#变化的成本\" class=\"headerlink\" title=\"变化的成本\"></a>变化的成本</h2><p>软件工程的普遍假设之一是改变程序的成本随着时间呈指数级增长。</p>\n<p>以下几个因素，可以使得我们的代码即使经过长时间开发也可以很容易修改</p>\n<ul>\n<li>简单的设计</li>\n<li>自动化测试</li>\n<li>不断改进设计</li>\n</ul>\n<h2 id=\"学会开车\"><a href=\"#学会开车\" class=\"headerlink\" title=\"学会开车\"></a>学会开车</h2><p>我们需要通过一些小的调整来控制软件的开发，而不是做一些大的调整，就像驾驶汽车一样。这意味着我们需要反馈意见来了解我们何时休假，我们需要很多机会进行更正，而且我们必须能够以合理的成本进行更正。</p>\n<p>软件中的一切都在变化。需求改变，设计更改，技术变化，团队改变，团队成员改变。只有变化才是永远不变的。</p>\n<h2 id=\"四个价值观\"><a href=\"#四个价值观\" class=\"headerlink\" title=\"四个价值观\"></a>四个价值观</h2><p>XP的四大价值观</p>\n<ul>\n<li>沟通——项目问题总是可以追溯到 有人不跟其他人谈论重要的事情。XP旨在在团队成员之间保持良好的沟通。</li>\n<li>简化——简单和沟通有着美妙的互相支持的关系。你越多沟通，更清晰，你可以看到究竟需要做什么和更多的信心你有什么真的不需要做。你的系统越简单，你就越少 沟通，这会导致更完整的沟通，尤其是如果可以的话简化系统足以减少程序员。</li>\n<li>反馈——系统绝对是无价的。乐观是编程的职业危害，反馈是对这一危害的治疗。</li>\n<li>勇气——要勇敢地修正体系结构中的错误，勇敢地抛弃原有的代码。</li>\n</ul>\n<h2 id=\"基本原则\"><a href=\"#基本原则\" class=\"headerlink\" title=\"基本原则\"></a>基本原则</h2><p>XP的基本原则</p>\n<ul>\n<li>快速反馈——行动与反馈之间的间隔对学习至关重要。</li>\n<li>假设简单性——把每个问题都看做可以用近乎荒谬的简单方法来解决。</li>\n<li>递增更改——每次修改一点点，即使采用XP也必须采用小步骤。</li>\n<li>拥抱变化——最佳的策略就是在实践中运用最多的策略，优先解决最重要的问题。</li>\n<li>优质工作——出色完成工作是项目最终成功的保证。</li>\n</ul>\n<h2 id=\"回到基础\"><a href=\"#回到基础\" class=\"headerlink\" title=\"回到基础\"></a>回到基础</h2><p>开发中的四项基本活动</p>\n<ul>\n<li>编码——编码是了解最佳结构的方式，同时也能提供清晰简洁的沟通。</li>\n<li>测试——测试既是资源也是责任。</li>\n<li>倾听——如果准备提问，那么最好准备好倾听答案。</li>\n<li>设计——良好的设计可以可以降低系统变更的成本，提高系统的可扩展性</li>\n</ul>\n<h1 id=\"第二部分：解决方案\"><a href=\"#第二部分：解决方案\" class=\"headerlink\" title=\"第二部分：解决方案\"></a>第二部分：解决方案</h1><h2 id=\"快速概述\"><a href=\"#快速概述\" class=\"headerlink\" title=\"快速概述\"></a>快速概述</h2><p>商业考虑和技术考虑都不应该是最重要的。软件发展始终是可能和理想之间的一个不断发展的对话。</p>\n<p>商务人士需要决定：</p>\n<ul>\n<li>范围——该系统必须解决多少问题才有价值生产？商人有能力了解有多少钱是不够的，多少太多了。</li>\n<li>优先级——如果您最初只能拥有A或B，您想要哪一个？生意人能够确定这一点，远比程序员更重要。</li>\n<li>发布的组成——业务之前需要完成多少或多少工作用软件比没用它好？程序员对这个问题的直觉可能是疯狂的错误。</li>\n<li>发布日期——什么是重要的日期，软件的存在（或一些软件）会产生很大的不同？</li>\n</ul>\n<p>技术人员决定：</p>\n<ul>\n<li>估计——多久会采取功能来实现？</li>\n<li>后果——有战略业务决定，应该只在什么时候做出。了解技术后果。数据库的选择就是一个很好的例子。与创业公司相比，企业可能更愿意与一家大公司合作，生产力可能会使额外的风险或不适感到值得。</li>\n<li>过程——如何将工作和团队组织？团队需要适应文化。</li>\n<li>详细调度——程序员 需要自由安排最高风险的发展部分，以减少项目的总体风险。在这种限制之下，他们仍然倾向于改变业务优先级。</li>\n</ul>\n<p>每次发布应该尽可能小，包含最有价值的业务 要求。版本必须作为一个整体来理解 - 也就是说，你无法实现一半 功能并发布它。</p>\n<p>在任何时间，软件的正确设计都是这样的：</p>\n<ul>\n<li>运行所有测试。</li>\n<li>没有重复的逻辑。对像平行类层次结构这样的隐藏重复要小心。</li>\n<li>说明对程序员重要的每一个意图。</li>\n<li>尽可能少的类和方法。</li>\n</ul>\n<p>任何没有自动化测试的程序功能都不存在。</p>\n<p>在XP中，每个人都对整个系统负责。不是每个人都知道每个部分。同样，虽然每个人都知道每个部分的一些东西。如果一对正在工作，他们看到改进代码的机会，他们继续前进，如果让他们的生活更轻松，那就改进它。</p>\n<p>真正的客户必须与团队坐在一起，可以回答问题，解决纠纷并进行设置小规模优先事项。</p>\n<p>编码标准应该尽可能少的工作，符合一次和唯一。标准应该强调沟通。最后，标准必须由整个团队自愿采用</p>\n<h2 id=\"如何工作\"><a href=\"#如何工作\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>任何一种做法都不可能很好的单独进行。他们要与其他做法一起运用，以保持平衡。</p>\n<h2 id=\"管理策略\"><a href=\"#管理策略\" class=\"headerlink\" title=\"管理策略\"></a>管理策略</h2><p>管理方面的困境：一方面，你希望经理能够做到这一点决定。没有通信开销，因为只有一个人。有一个人对上级管理层负责。有一个人有远见。没有其他人需要了解它，因为所有的决定都来自一个人。</p>\n<p>另一方面，相反的策略是行不通的，不能让每个人都去做决定。</p>\n<p>基本的XP管理工作是度量标准。制作大的可视表，对任务总量进行度量。</p>\n<p>理想的教练是一个很好的沟通者。</p>\n<p>教练的工作职责：</p>\n<ul>\n<li>作为新手程序员的开发伙伴。</li>\n<li>参与长期重构目标，并鼓励小规模重构来解决部分问题。</li>\n<li>帮助具有个人特殊擅长领域的程序员。</li>\n<li>向上层管理人员解释开发过程。</li>\n</ul>\n<p>跟踪是XP中管理的另一个主要组成部分。跟踪器的工作是收集当前正在跟踪的任何指标并进行确信团队知道实际测量的是什么。运行计划是跟踪器的一部分。</p>\n<p>管理人员的干预，可能是调整团队人员结构，甚至也可能是直接终止项目。</p>\n<h2 id=\"设施战略\"><a href=\"#设施战略\" class=\"headerlink\" title=\"设施战略\"></a>设施战略</h2><p>我们将为我们的团队创建一个开放的工作空间，周围有小型私人空间外围和中间的一个公共编程区域。如果你没有合理的工作场所，你的项目将不会成功。</p>\n<h2 id=\"分裂商业和技术\"><a href=\"#分裂商业和技术\" class=\"headerlink\" title=\"分裂商业和技术\"></a>分裂商业和技术</h2><p>战略的关键之一是让技术人员关注技术问题，商业人员关注业务问题。</p>\n<p>商业人士应该：</p>\n<ul>\n<li>发布的范围和时间</li>\n<li>建议功能的相对优先级</li>\n<li>建议功能的明确范围</li>\n</ul>\n<p>技术人员应该：</p>\n<ul>\n<li>估计实现各种功能所需的时间</li>\n<li>估计各种技术方案的后果</li>\n<li>一个适合他们个性、商业环境和发展过程的公司文化</li>\n</ul>\n<h2 id=\"规划策略\"><a href=\"#规划策略\" class=\"headerlink\" title=\"规划策略\"></a>规划策略</h2><p>我们会迅速制定一个总体计划，然后再进一步细化更短更短的时间范围——年，月，周，天。我们会做的计划迅速且便宜，所以当我们必须改变它时，会有小的惯性。</p>\n<p>计划的三个阶段</p>\n<ul>\n<li>探索——找出系统能做出什么新东西</li>\n<li>承诺——决定接下来要追求的所有可能要求的哪一部分</li>\n<li>转向——为现实的开发做出指导计划</li>\n</ul>\n<h2 id=\"发展战略\"><a href=\"#发展战略\" class=\"headerlink\" title=\"发展战略\"></a>发展战略</h2><p>与管理战略不同，发展战略是一个彻底的相反的观点。从传统的观点来看，我们将为今天的问题精心制定解决方案。今天，相信明天我们将能够解决明天的问题。</p>\n<p>发展战略始于迭代计划。持续集成减少 发展冲突并为发展事件创造自然结局。集体所有权鼓励整个团队改善整个系统。最后，结对编程将整个过程联系在一起。</p>\n<p>持续集成显著降低了项目风险。</p>\n<p>代码集体所有权的影响之一就是复杂代码不会存在很长时间。集体所有权倾向于防止复杂代码很早进入系统。集体所有权也倾向于围绕团队传播系统知识。</p>\n<h2 id=\"设计策略\"><a href=\"#设计策略\" class=\"headerlink\" title=\"设计策略\"></a>设计策略</h2><p>我们将不断完善系统的设计，从一个非常简单的设计开始，删除任何无用的灵活性。</p>\n<p>最佳设计的定义是运行所有测试用例的最简单的设计。</p>\n<h2 id=\"测试策略\"><a href=\"#测试策略\" class=\"headerlink\" title=\"测试策略\"></a>测试策略</h2><p>在编码之前编写测试，一次又一次地运行测试。我们将永远保留这些测试，并经常一起运行它们。</p>\n<p>XP中编写的测试是独立且自动的。</p>\n<p>单元测试和功能测试是产品测试的核心。除了单元测试，还有其他同样很重要的测试：并行测试、压力测试、灵活测试。</p>\n<h1 id=\"第三部分：实施XP\"><a href=\"#第三部分：实施XP\" class=\"headerlink\" title=\"第三部分：实施XP\"></a>第三部分：实施XP</h1><h2 id=\"采用XP\"><a href=\"#采用XP\" class=\"headerlink\" title=\"采用XP\"></a>采用XP</h2><p>一次采用一种XP方法，解决团队遇到的最紧迫的问题。当当前问题不再是最紧迫的问题，继续解决下一个最紧迫的问题。</p>\n<h2 id=\"改进XP\"><a href=\"#改进XP\" class=\"headerlink\" title=\"改进XP\"></a>改进XP</h2><p>如何在现有团队中使用已经投入生产的软件来使用XP？必须在以下方面修改采用策略：</p>\n<ul>\n<li>测试——试图返回并为所有现有代码编写测试是很有诱惑力的，但不建议这么做，测试应该是按需编写。</li>\n<li>设计——一次只重构一点，在添加新功能时做好重构准备。</li>\n<li>计划——切换到XP计划的最大挑战（和机会）是教会客户他们可以从团队中获得多少。</li>\n<li>管理——管理向XP转变的最困难的方面之一是决定一个团队成员不再需要工作。</li>\n<li>开发——重视结对编程，并准备随时丢弃已经开发出的代码。</li>\n</ul>\n<h2 id=\"理想XP项目的生命周期\"><a href=\"#理想XP项目的生命周期\" class=\"headerlink\" title=\"理想XP项目的生命周期\"></a>理想XP项目的生命周期</h2><p>XP项目的生命周期：</p>\n<ul>\n<li>探索——探索完成这个项目所需要的开发技能。</li>\n<li>计划——让客户和程序员自信地达成一致的一个最小，最有价值的故事集合的日期。</li>\n<li>第一版本迭代——承诺时间表被分成一到四周的迭代次数。每次迭代都会产生一个为该迭代计划的每个故事设置功能测试用例集。</li>\n<li>生产——在开发过程中，会放慢软件开发的速度，评估系统风险是否变得更加重要。</li>\n<li>维护——维护实际上是XP项目的正常状态。在生产新的功能的同时，维护系统已有功能正常稳定运行。</li>\n<li>死亡——死亡的最好理由：客户对系统满意并且无法想到任何事情他们希望在可预见的未来增加。</li>\n</ul>\n<h2 id=\"任务角色\"><a href=\"#任务角色\" class=\"headerlink\" title=\"任务角色\"></a>任务角色</h2><ul>\n<li>程序员——XP的核心</li>\n<li>顾客——极限编程基本二元性的另一半</li>\n<li>测试人员——编写测试用例，负责测试系统</li>\n<li>跟踪者——做出好的估计，手机各种反馈</li>\n<li>教练——为整个过程负责</li>\n<li>顾问——帮助解决某个领域深入的技术知识问题</li>\n<li>大老板——提供团队勇气、信心以及放权</li>\n</ul>\n<h2 id=\"20-80原则\"><a href=\"#20-80原则\" class=\"headerlink\" title=\"20-80原则\"></a>20-80原则</h2><p>XP的全部价值在所有的实践到位之后才会实现。很多实践可以采取零碎的做法，但是它们的影响会在成倍增加在一起。</p>\n<p>软件程序员习惯于处理20-80规则：80％的好处来自于此20％的工作。</p>\n<h2 id=\"什么让XP变得艰难\"><a href=\"#什么让XP变得艰难\" class=\"headerlink\" title=\"什么让XP变得艰难\"></a>什么让XP变得艰难</h2><p>主要是情绪，特别是恐惧，使XP变得困难。</p>\n<p>XP的细节很简单，但是很难执行。</p>\n<h2 id=\"什么时候不应该使用XP\"><a href=\"#什么时候不应该使用XP\" class=\"headerlink\" title=\"什么时候不应该使用XP\"></a>什么时候不应该使用XP</h2><p>大团队，不信任的客户，技术 不支持优美的变化。这些情况下，不应该再继续使用XP。</p>\n<h2 id=\"工作中的XP\"><a href=\"#工作中的XP\" class=\"headerlink\" title=\"工作中的XP\"></a>工作中的XP</h2><p>注意使用适用于XP的合同</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>XP反映了恐惧的事情：</p>\n<ul>\n<li>没有意义的开销</li>\n<li>因为没有做好充分的技术准备而被取消的项目</li>\n<li>糟糕的商业决策</li>\n<li>由业务人员作出技术决策</li>\n<li>职业生涯的结束</li>\n<li>项目结果不令人满意</li>\n</ul>\n<p>XP也反映了不害怕的事情：</p>\n<ul>\n<li>编码</li>\n<li>拥抱变化</li>\n<li>不知道未来的发展</li>\n<li>依赖其他人</li>\n<li>变化运行系统的分析与设计</li>\n<li>编写测试</li>\n</ul>"},{"title":"Scrum要素读书笔记","date":"2018-02-25T06:24:14.000Z","updated":"2018-02-25T06:24:14.000Z","_content":"\nScrum是一种迭代增量式的软件开发过程，用于敏捷软件开发。Scrum是一个包括一系列实践和预定义角色的过程框架。\n\nScrum要素包括角色、周期、工件，以及如何确定用户故事、如何估算工作，如何召开每日站立会议。\n\n当前，Scrum方法在国内已经逐渐普及，为众多知名IT公司和软件开发团队采用。 本书是帮助软件开发人员认识、初步了解Scrum方法的佳作。通过本书可以理清Scrum的相关知识和概念，为采用和实践Scrum方法做好充分准备。\n\n<!-- more -->\n\n# Scrum团队周记\n工作项目的候选列表，新特性和错误修复的工作都有，这些都是项目上最重要的代办事项。\n\n白纸板是用来文字记录的，例如，团队都认可的故事“完成”定义。\n\nSprint燃尽图，用来监测下一周任务完成过程中的速度变化。\n\nScrum日会是一种短会，用于团结和协调团队 。为了鼓励大家都简洁点，这个会是站着开的。它因此而得名“每日站会”。\n\n团队成员轮流分享信息：前一天完成了什么任务，明天的Scrum日会前打算做哪个任务，有没有碰到什么障碍或是受到了什么拖累。\n\n# 第一部分：敏捷力介绍\n瀑布模型将开发和交付且软件项目的流程分割为相互独立的阶段：\n- 需求收集\n- 设计\n- 编码\n- 测试\n\n唯一能够指望的只有变化。所有种类的敏捷流程都有一个共同点：拥抱变化，视变化为成长的良机，而非障碍。\n\n简单地看，敏捷开发和瀑布开发之间差别在于：瀑布开发必须先完成当前步骤之后才能头也不回地迈向下一步骤。这不是敏捷团队的方式。敏捷团队会一点点需求收集，一点点设计、编码、测试，最后交付一点点价值给客户。接着团队再重复此过程……周而复始，工作推进过程中不断改善、调整流程，一直到项目完成为止。\n\n敏捷迭代（在Scrum中称为“Sprint”）可不是微型瀑布，敏捷流程可是真的没有什么步骤之说。敏捷开发是一个整体流程，即测试、设计、编码、和需求收集是完全整合彼此依赖的流程。\n\n敏捷提倡的良好实践：\n- 边做边测试\n- 及早且频繁地交付产品\n- 文档边做边写\n- 构建跨职能团队\n\n敏捷方式的核心思想在于迅速交付商业价值，体现维可工作的软件，还要以定期增量的形式持续地交付价值。\n\n\n敏捷宣言\n- 个体和互动 **高于** 流程和工具\n- 工作的软件 **高于** 详尽的文档\n- 客户合作 **高于** 合同谈判\n- 响应变化 **高于** 遵循计划\n\n遵循尽早且频繁交付软件的敏捷框架可以带来高效率，因而保障了客户可以实现所投入时间和金钱的最大化价值回报，进一步也排除了对前期合同洽谈的需要。\n\n敏捷原则\n- 我们最重要的目标，是通过持续不断地及早交付有价值的软件使客户满意。\n- 欣然面对需求变化，即使在开发后期也一样。为了客户的竞争优势，敏捷过程掌控变化。\n- 经常地交付可工作的软件，相隔几个星期或一两个月，倾向于采取较短的周期。\n- 业务人员和开发人员必须相互合作，项目中的每一天都不例外。\n- 激发个体的斗志，以他们为核心搭建项目。提供所需的环境和支援，辅以信任，从而达成目标。\n- 不论团队内外，传递信息效果最好效率也最高的方式是面对面的交谈。\n- 可工作的软件是进度首要度量标准。\n- 敏捷过程倡导可持续开发。责任人、开发人员和用户要能够共同其步调稳定延续。\n- 坚持不懈地追求技术卓越和良好设计，敏捷能力由此增强。\n- 以简洁为本，它是极力减少不必要工作量的艺术。\n- 最好的架构、需求和设计出自组织团队。\n- 团队定期地反思如何能提高成效，并依次调整自身的举止表现。\n\n\n早交付，频交付。\n\n# 第二部分：Scrum\nScrum是一个基于团队进行复杂系统和产品开发的框架。\n\n选择最佳方法以达成目标是团队的责任。\n\n任何时候都可以决定是否要交货，或者再继续做一个sprint以便完成更多功能。\n\n## Scrum角色\nScrum只承认三个互不相同的角色：产品负责人、Scrum master和团队成员。\n\n### 角色：产品负责人\n产品负责人的责任在于，帮公司得到最高投资回报。做法是指引团队做最有价值的作业，并远离不那么有价值的作业。也就是说，产品负责人控制着团队列表上那些条目的优先级顺序。\n\n在Scrum中，产品负责人是唯一有权要求团队做事以及改变列表条目优先级的人。这必然也就意味着，产品负责人需要和干系人密切地合作，判别需要何时构建何物，从而交付最多业务价值。\n\n产品负责人是产品愿景的监护人。愿景包括，产品为谁而建、他们为何需要、如何使用。\n\n产品负责人角色概要：\n- 持有产品愿景\n- 代表业务\n- 代表客户\n- 拥有产品列表\n- 划定故事优先级\n- 设立故事的接收标准\n- 有空回答团队成员们的问题\n\n### 角色：Scrum Master\nScrum Master担当教练角色，引领团队达到更高级的凝聚力、自组织和表现。团队的交付物是产品，而Scrum Master的交付物就是自组织团队。\n\nScrum Master角色概要：\n- Scrum专家和谏言者\n- 教练\n- 阻碍推土机\n- 引导者\n\n### 角色：团队成员\nScrum团队是高度协作的，也是自组织的。\n\n做具体实现工作的团队成员们，同样也需要负责估计实现特性需要的工作量。产品负责人可以决定故事的顺序，但完成特性或任务需要多少时间是开发人员说了算。\n\n作为Scrum团队成员，要完成的不是你的工作，而是这份工作。\n\n团队成员角色概要：\n- 负责交付用户故事\n- 做所有的开发工作\n- 自组织地交付用户故事\n- 支配估算流程\n- 支配“如何干活”的决策\n- 避免“与我无关”\n\n## Sprint周期\n### Sprint规划会议\nSprint规划会议标志着Sprint的开始。通常来说这个会议分为两个部分。第一部分的目标是，团队要选择一组交付物作为当前Sprint的承诺。会议的第二部分，团队要罗列出交付用户故事所需完成的所有任务。\n\n#### 第一部分：要做什么？\nSprint规划会议第一部分的目标在于，团队要找出他们有信心在Sprint结束时交付的一组“已承诺”故事。产品负责人引导这一部分的会议。产品负责人按照优先级顺序，逐个地介绍他希望团队在当前Sprint完成的那些故事。\n\n团队成员们要和产品负责人探讨所有故事，审查其验收标准，确保大家对预期结果有一致的理解。团队成员协商解决依赖性问题，一般还会讨论实现故事要做哪些事情。接着团队成员就要决定他们是否承诺这个故事。\n\n团队的速率（velocity）指的是每个Sprint团队所完成故事点数的平均值，它是一个有效的工具，可以帮助团队选择承诺适量的工作。\n\n#### 第二部分：要怎么做？\n会议的第二部分，团队卷起袖管就开工，把选定的故事分解成任务。要记得故事是交付物，他们是干系人、用户和客户想要的东西。团队成员需要完成这些任务才能交付故事。\n\n### Scrum日会\nScrum日会有时候也被称为站立会议：\n- 每天：大多数团队选择在一天工作刚开始的时候开这个会。\n- 小：只有开发团队的成员们可以参加。\n- 简要：这个会不是用来解决大问题的，而是用于保持交流渠道的畅通。站立的意义在于阻止各种离题跑调的情况发生，避免开会变遭罪。\n- 直截了当：参会者轮流快速地分享：\n\t- 在上一次Scrum日会之后，我已经完成的内容\n\t- 到下一次Scrum日会之前，我期望完成的内容\n\t- 导致我慢下来的障碍\n\n### 故事时间\n也被称为“列表修整”会议\n\n### Sprint评审\n也被称为Sprint演示。即便是这个Sprint什么也没有完成，也要坚持召开Sprint评审会议，得让干系人了解情况，因为Scrum靠透明度而活。\n\n### 回顾\nScrum就是为了帮助团队持续地进行检验和适应而设计，能够带动绩效和幸福感不断提升。每个迭代都要召开回顾会议，在迭代最后才举行，是专门留给团队的时间，专注于讨论他们当前Sprint的心得体会，并用于继续改进。\n\n### 检验和适应\n归根结底，我们以短周期形式做开发工作的原因在于，学习。经验是最好的老师，而Scrum短周期的设计家就是要为我们提供多方位接收反馈的机会，包括客户、团队和试吃昂，并从中学习。\n\n检验和适应也被称为“持续改进”。\n\n## Scrum工件\nScrum工件是可用于实现进度可视化的工具。\n- 列表\n- 燃尽图\n- 任务板\n- 完成之定义\n\n### 产品列表\n产品列表是产品预期交付物的累积清单。这包括了特性、缺陷修复、文档变更和任何值得创建的东西。列表上的所有内容都能以某种弄方式帮助用户。\n\n产品列表不断地改变。\n\n列表的优点在于，绝不会浪费时间给那些可能永不见天日的特征写详细规格书。列表上的故事都是按照优先级排序的，可以说是精确排序。\n\n产品负责人拥有列表，只有产品负责人可以增加、减少列表中的条目，或是进行优先级排序，尽管他也必须借助于和业务干系人、客户和团队成员的紧密配合才能做到。\n\n#### Sprint列表\nSprint列表是团队当前Sprint的任务清单。它只存活一个Sprint的时间。里面包括所有已承诺的故事以及相关联的任务，以及此外的附加工作。\n\nSprint列表在Sprint规划会议中产生，一旦Sprint规划会议结束，，产品负责人就不可以再修改Sprint列表的故事清单。这是Scrum中业务方和开发团队之间的基本协议，每次Sprint开始前，业务方都可以改变方向，然而Sprint开始后，则允许团队只专注于他们所承诺的故事。改变这个已承诺故事清单有一个方式，就是由干这个活的团队成员提出变更请求。\n\n#### 信息辐射器\n任务板贴满了便事贴，分为待办、进展中、已完成三种状态。\n\n重要的是这些东西要做得大，而且要放在所有人都能看见的地方。要努力在墙上留住尽可能多的信息。\n\n#### 燃图\n燃尽图描述了剩余工作随时间变化的轨迹。纵坐标绘制剩余量，横坐标是时间。\n\n发布燃尽图：产品负责人以此为工具追踪剩余工作随时间变化的过程。图表中有不同斜率的下降趋势线，反映了单位时间段内所完成点数的变化。\n\nSprint燃尽图：显示当前Sprint剩余工作量的变化。Sprint燃尽图的目的在于，能够让团队看清楚情况，知道自己能够交付迭代中已经承诺的全部。\n\n燃耗图：团队的速率就是团队每个Sprint所完成的工作单位数量（例如故事点）。燃耗图绘制出已完成故事点随时间的变化的情况，是团队速率的可视化指示器。\n\n任务板：最简单的任务板由待办（todo）、办理(doing)和已办（done）三部分组成。\n\n### 完成之定义\n完成之定义和验收标准是有区别的。验收标准属于产品负责人或客户的领域，明确定义了被视为“可接受”产品必须满足的条件并记录在案。完成之定义归开发团队所有，关注的不是产品面向用户的功能，而是产品要可交付必须要做完的那些任务。\n\n## 用户故事\n用户故事是产品列表的基础构件。用户故事通常都是手写在索引卡上的。\n```\n作为<某类用户>\n我想<做某事>\n从而<创造出某些价值>\n```\n基于上述版本，又演化出了聚集目标的用户故事模板\n```\n为了<达成某类目标>\n作为<某类用户>\n我想<做某事>\n```\n和聚焦价值的用户故事模板\n```\n为了<创造某价值>\n作为<某类用户>\n我想<做某事>\n```\n用户故事是交谈的敲门砖。用户故事不是完整的需求或说明书，它们是占位符。它们的信息量足以提醒团队有东西要完成，但我们刻意地不过多探讨细节……直到必需之时。\n\n用户故事、交谈和接收标准结合起来组成了完整的需求规格说明书。用户故事让我们可以快速且完全地捕获想法。在交谈中，我们可以阐述所需完成的细节，并达成一致且可实现的理解。最终，我们用明确的、可测试的接收标准来记录共识。\n\n## 用户故事大小估值工作\n生成估值的真正目标是要提供进度的可预测性度量。、\n\n\n# 第三部分：辅助性实践\nScrum是轻量级框架，它不告诉你如何规划发布，或开发产品原型，或编写及测试代码。\n\n## 发布规划\n发布规划是为产品发布挑选故事（特性、功能增强、缺陷修复等）的流程，以及应该如何进行发布。\n- 固定范围\n- 固定日期\n- 固定日期且固定范围\n\n速度、成本和范围，这是项目管理周期中著名的“铁三角”。在软件项目中，速度指的是构建和发布系统所需的时间，成本通常受项目上人头数的影响，范围涉及所包含的故事数量。三者组成一个平衡方程式，改变其中任何一个，必然都会导致另外一个或两个相应地产生变化。\n\n## 用户角色人物\n用户角色人物是整理妥当的简要档案，用作参考时方便手持。研究自然环境中真实用户的习惯、态度和行为，虚构人物往往是它们的混合体。\n\n## 绘制故事地图\n绘制故事地图是另一种组织用户故事的方式，能够提供比传统产品列表更丰富的上下文，也有助于进行发布规划。\n\n尽管故事地图并不完全是产品列表的替代品，但对照比较一下还是很有好处的。本质上来看，产品列表是唯一的，用户故事按优先级从最高到最低的顺序排列。故事地图是二维的，不仅指示了故事的优先级，也指出了它们彼此的关系和用户更高层次的目标。地图能帮助团队理解故事是如何组装起来形成可发布产品的。\n\n## 纸上原型\n纸上原型并不是Scrum的一部分，但它具有敏捷的本质，是充实产品负责人工具箱的上佳之选。\n\n这种低科技、高参与度的方式能移除障碍，让客户也可以参与到设计与开发流程中，还能让学习成效最大化，因为它的反馈循环快得只在转瞬间。\n\n## 项目微章程\n微章程就是明确记载了项目关键信息的概要项目。项目伊始只不过是一个想法，而微章程就是有效捕获想法的一种方法。捕捉到之后，想法就会变得更易于分享、讨论和修订，这会极大地帮助你发现并排除掉范围及使命蔓延。\n\n基础微章程包含如下元素：\n- 代号：给项目取个名字\n- 使命宣言：表达项目的目的\n- 愿景宣言：描述项目想要创建的未来\n- 电梯演讲：关注项目要解决的问题，以及公司或客户将由此获得的好处。\n- 商业价值：项目对业务而言在金钱或其他方面的价值是什么\n- 客户和用户：做购买决策的人\n- 度量指标：讲清楚计划如何去度量之前所描述的那些价值\n- 里程碑：重要的时间点\n- 资源：完成如下描述的项目必须或必需用到的资源\n- 风险：可能危害或颠覆项目的事情\n- 权衡：现实地评估团队运作环境中的各种约束。\n\n## 重构\n敏捷宣言声明：最好的架构、需求和设计出自自组织团队。\n\n重构就是，在不改变代码外在行为的前提下，对代码做出修改，以改进程序内部结构的一种有纪律的方法。核心是通过一连串的小行为实施转变。每次转变（称之为一次“重构”）都只做一点点，但一系列的转变就能带来显著的结构重组。由于每次重构都不大，也就不容易出错 。每次重构之后系统也依然运作良好，减少了系统在重组过程中严重受损的几率。\n\n把设计工作内置于开发流程之中，这就是敏捷开发迭代复迭代不断前行的方式。\n\n## 测试驱动开发\n测试驱动开发的目标在于快速地开发出设计精良、正确性已获证实的代码。\n\n通过先行测试，可以把注意力集中于开发人员需要让代码展现的外部行为。一旦开发人员切实地理解了代码需要做什么，就已经准备周全可以妥善地设计代码实现了。\n\n## 结对编程\n结对编程更加快速地产出设计更精良、整洁的代码。它还能消灭知识简仓。\n\n","source":"_posts/读书笔记/Scrum要素读书笔记.md","raw":"---\ntitle: Scrum要素读书笔记\ndate: 2018-02-25 14:24:14\nupdated: 2018-02-25 14:24:14\ntags:\n  - 读书笔记\ncategories: \n  - 读书笔记\n---\n\nScrum是一种迭代增量式的软件开发过程，用于敏捷软件开发。Scrum是一个包括一系列实践和预定义角色的过程框架。\n\nScrum要素包括角色、周期、工件，以及如何确定用户故事、如何估算工作，如何召开每日站立会议。\n\n当前，Scrum方法在国内已经逐渐普及，为众多知名IT公司和软件开发团队采用。 本书是帮助软件开发人员认识、初步了解Scrum方法的佳作。通过本书可以理清Scrum的相关知识和概念，为采用和实践Scrum方法做好充分准备。\n\n<!-- more -->\n\n# Scrum团队周记\n工作项目的候选列表，新特性和错误修复的工作都有，这些都是项目上最重要的代办事项。\n\n白纸板是用来文字记录的，例如，团队都认可的故事“完成”定义。\n\nSprint燃尽图，用来监测下一周任务完成过程中的速度变化。\n\nScrum日会是一种短会，用于团结和协调团队 。为了鼓励大家都简洁点，这个会是站着开的。它因此而得名“每日站会”。\n\n团队成员轮流分享信息：前一天完成了什么任务，明天的Scrum日会前打算做哪个任务，有没有碰到什么障碍或是受到了什么拖累。\n\n# 第一部分：敏捷力介绍\n瀑布模型将开发和交付且软件项目的流程分割为相互独立的阶段：\n- 需求收集\n- 设计\n- 编码\n- 测试\n\n唯一能够指望的只有变化。所有种类的敏捷流程都有一个共同点：拥抱变化，视变化为成长的良机，而非障碍。\n\n简单地看，敏捷开发和瀑布开发之间差别在于：瀑布开发必须先完成当前步骤之后才能头也不回地迈向下一步骤。这不是敏捷团队的方式。敏捷团队会一点点需求收集，一点点设计、编码、测试，最后交付一点点价值给客户。接着团队再重复此过程……周而复始，工作推进过程中不断改善、调整流程，一直到项目完成为止。\n\n敏捷迭代（在Scrum中称为“Sprint”）可不是微型瀑布，敏捷流程可是真的没有什么步骤之说。敏捷开发是一个整体流程，即测试、设计、编码、和需求收集是完全整合彼此依赖的流程。\n\n敏捷提倡的良好实践：\n- 边做边测试\n- 及早且频繁地交付产品\n- 文档边做边写\n- 构建跨职能团队\n\n敏捷方式的核心思想在于迅速交付商业价值，体现维可工作的软件，还要以定期增量的形式持续地交付价值。\n\n\n敏捷宣言\n- 个体和互动 **高于** 流程和工具\n- 工作的软件 **高于** 详尽的文档\n- 客户合作 **高于** 合同谈判\n- 响应变化 **高于** 遵循计划\n\n遵循尽早且频繁交付软件的敏捷框架可以带来高效率，因而保障了客户可以实现所投入时间和金钱的最大化价值回报，进一步也排除了对前期合同洽谈的需要。\n\n敏捷原则\n- 我们最重要的目标，是通过持续不断地及早交付有价值的软件使客户满意。\n- 欣然面对需求变化，即使在开发后期也一样。为了客户的竞争优势，敏捷过程掌控变化。\n- 经常地交付可工作的软件，相隔几个星期或一两个月，倾向于采取较短的周期。\n- 业务人员和开发人员必须相互合作，项目中的每一天都不例外。\n- 激发个体的斗志，以他们为核心搭建项目。提供所需的环境和支援，辅以信任，从而达成目标。\n- 不论团队内外，传递信息效果最好效率也最高的方式是面对面的交谈。\n- 可工作的软件是进度首要度量标准。\n- 敏捷过程倡导可持续开发。责任人、开发人员和用户要能够共同其步调稳定延续。\n- 坚持不懈地追求技术卓越和良好设计，敏捷能力由此增强。\n- 以简洁为本，它是极力减少不必要工作量的艺术。\n- 最好的架构、需求和设计出自组织团队。\n- 团队定期地反思如何能提高成效，并依次调整自身的举止表现。\n\n\n早交付，频交付。\n\n# 第二部分：Scrum\nScrum是一个基于团队进行复杂系统和产品开发的框架。\n\n选择最佳方法以达成目标是团队的责任。\n\n任何时候都可以决定是否要交货，或者再继续做一个sprint以便完成更多功能。\n\n## Scrum角色\nScrum只承认三个互不相同的角色：产品负责人、Scrum master和团队成员。\n\n### 角色：产品负责人\n产品负责人的责任在于，帮公司得到最高投资回报。做法是指引团队做最有价值的作业，并远离不那么有价值的作业。也就是说，产品负责人控制着团队列表上那些条目的优先级顺序。\n\n在Scrum中，产品负责人是唯一有权要求团队做事以及改变列表条目优先级的人。这必然也就意味着，产品负责人需要和干系人密切地合作，判别需要何时构建何物，从而交付最多业务价值。\n\n产品负责人是产品愿景的监护人。愿景包括，产品为谁而建、他们为何需要、如何使用。\n\n产品负责人角色概要：\n- 持有产品愿景\n- 代表业务\n- 代表客户\n- 拥有产品列表\n- 划定故事优先级\n- 设立故事的接收标准\n- 有空回答团队成员们的问题\n\n### 角色：Scrum Master\nScrum Master担当教练角色，引领团队达到更高级的凝聚力、自组织和表现。团队的交付物是产品，而Scrum Master的交付物就是自组织团队。\n\nScrum Master角色概要：\n- Scrum专家和谏言者\n- 教练\n- 阻碍推土机\n- 引导者\n\n### 角色：团队成员\nScrum团队是高度协作的，也是自组织的。\n\n做具体实现工作的团队成员们，同样也需要负责估计实现特性需要的工作量。产品负责人可以决定故事的顺序，但完成特性或任务需要多少时间是开发人员说了算。\n\n作为Scrum团队成员，要完成的不是你的工作，而是这份工作。\n\n团队成员角色概要：\n- 负责交付用户故事\n- 做所有的开发工作\n- 自组织地交付用户故事\n- 支配估算流程\n- 支配“如何干活”的决策\n- 避免“与我无关”\n\n## Sprint周期\n### Sprint规划会议\nSprint规划会议标志着Sprint的开始。通常来说这个会议分为两个部分。第一部分的目标是，团队要选择一组交付物作为当前Sprint的承诺。会议的第二部分，团队要罗列出交付用户故事所需完成的所有任务。\n\n#### 第一部分：要做什么？\nSprint规划会议第一部分的目标在于，团队要找出他们有信心在Sprint结束时交付的一组“已承诺”故事。产品负责人引导这一部分的会议。产品负责人按照优先级顺序，逐个地介绍他希望团队在当前Sprint完成的那些故事。\n\n团队成员们要和产品负责人探讨所有故事，审查其验收标准，确保大家对预期结果有一致的理解。团队成员协商解决依赖性问题，一般还会讨论实现故事要做哪些事情。接着团队成员就要决定他们是否承诺这个故事。\n\n团队的速率（velocity）指的是每个Sprint团队所完成故事点数的平均值，它是一个有效的工具，可以帮助团队选择承诺适量的工作。\n\n#### 第二部分：要怎么做？\n会议的第二部分，团队卷起袖管就开工，把选定的故事分解成任务。要记得故事是交付物，他们是干系人、用户和客户想要的东西。团队成员需要完成这些任务才能交付故事。\n\n### Scrum日会\nScrum日会有时候也被称为站立会议：\n- 每天：大多数团队选择在一天工作刚开始的时候开这个会。\n- 小：只有开发团队的成员们可以参加。\n- 简要：这个会不是用来解决大问题的，而是用于保持交流渠道的畅通。站立的意义在于阻止各种离题跑调的情况发生，避免开会变遭罪。\n- 直截了当：参会者轮流快速地分享：\n\t- 在上一次Scrum日会之后，我已经完成的内容\n\t- 到下一次Scrum日会之前，我期望完成的内容\n\t- 导致我慢下来的障碍\n\n### 故事时间\n也被称为“列表修整”会议\n\n### Sprint评审\n也被称为Sprint演示。即便是这个Sprint什么也没有完成，也要坚持召开Sprint评审会议，得让干系人了解情况，因为Scrum靠透明度而活。\n\n### 回顾\nScrum就是为了帮助团队持续地进行检验和适应而设计，能够带动绩效和幸福感不断提升。每个迭代都要召开回顾会议，在迭代最后才举行，是专门留给团队的时间，专注于讨论他们当前Sprint的心得体会，并用于继续改进。\n\n### 检验和适应\n归根结底，我们以短周期形式做开发工作的原因在于，学习。经验是最好的老师，而Scrum短周期的设计家就是要为我们提供多方位接收反馈的机会，包括客户、团队和试吃昂，并从中学习。\n\n检验和适应也被称为“持续改进”。\n\n## Scrum工件\nScrum工件是可用于实现进度可视化的工具。\n- 列表\n- 燃尽图\n- 任务板\n- 完成之定义\n\n### 产品列表\n产品列表是产品预期交付物的累积清单。这包括了特性、缺陷修复、文档变更和任何值得创建的东西。列表上的所有内容都能以某种弄方式帮助用户。\n\n产品列表不断地改变。\n\n列表的优点在于，绝不会浪费时间给那些可能永不见天日的特征写详细规格书。列表上的故事都是按照优先级排序的，可以说是精确排序。\n\n产品负责人拥有列表，只有产品负责人可以增加、减少列表中的条目，或是进行优先级排序，尽管他也必须借助于和业务干系人、客户和团队成员的紧密配合才能做到。\n\n#### Sprint列表\nSprint列表是团队当前Sprint的任务清单。它只存活一个Sprint的时间。里面包括所有已承诺的故事以及相关联的任务，以及此外的附加工作。\n\nSprint列表在Sprint规划会议中产生，一旦Sprint规划会议结束，，产品负责人就不可以再修改Sprint列表的故事清单。这是Scrum中业务方和开发团队之间的基本协议，每次Sprint开始前，业务方都可以改变方向，然而Sprint开始后，则允许团队只专注于他们所承诺的故事。改变这个已承诺故事清单有一个方式，就是由干这个活的团队成员提出变更请求。\n\n#### 信息辐射器\n任务板贴满了便事贴，分为待办、进展中、已完成三种状态。\n\n重要的是这些东西要做得大，而且要放在所有人都能看见的地方。要努力在墙上留住尽可能多的信息。\n\n#### 燃图\n燃尽图描述了剩余工作随时间变化的轨迹。纵坐标绘制剩余量，横坐标是时间。\n\n发布燃尽图：产品负责人以此为工具追踪剩余工作随时间变化的过程。图表中有不同斜率的下降趋势线，反映了单位时间段内所完成点数的变化。\n\nSprint燃尽图：显示当前Sprint剩余工作量的变化。Sprint燃尽图的目的在于，能够让团队看清楚情况，知道自己能够交付迭代中已经承诺的全部。\n\n燃耗图：团队的速率就是团队每个Sprint所完成的工作单位数量（例如故事点）。燃耗图绘制出已完成故事点随时间的变化的情况，是团队速率的可视化指示器。\n\n任务板：最简单的任务板由待办（todo）、办理(doing)和已办（done）三部分组成。\n\n### 完成之定义\n完成之定义和验收标准是有区别的。验收标准属于产品负责人或客户的领域，明确定义了被视为“可接受”产品必须满足的条件并记录在案。完成之定义归开发团队所有，关注的不是产品面向用户的功能，而是产品要可交付必须要做完的那些任务。\n\n## 用户故事\n用户故事是产品列表的基础构件。用户故事通常都是手写在索引卡上的。\n```\n作为<某类用户>\n我想<做某事>\n从而<创造出某些价值>\n```\n基于上述版本，又演化出了聚集目标的用户故事模板\n```\n为了<达成某类目标>\n作为<某类用户>\n我想<做某事>\n```\n和聚焦价值的用户故事模板\n```\n为了<创造某价值>\n作为<某类用户>\n我想<做某事>\n```\n用户故事是交谈的敲门砖。用户故事不是完整的需求或说明书，它们是占位符。它们的信息量足以提醒团队有东西要完成，但我们刻意地不过多探讨细节……直到必需之时。\n\n用户故事、交谈和接收标准结合起来组成了完整的需求规格说明书。用户故事让我们可以快速且完全地捕获想法。在交谈中，我们可以阐述所需完成的细节，并达成一致且可实现的理解。最终，我们用明确的、可测试的接收标准来记录共识。\n\n## 用户故事大小估值工作\n生成估值的真正目标是要提供进度的可预测性度量。、\n\n\n# 第三部分：辅助性实践\nScrum是轻量级框架，它不告诉你如何规划发布，或开发产品原型，或编写及测试代码。\n\n## 发布规划\n发布规划是为产品发布挑选故事（特性、功能增强、缺陷修复等）的流程，以及应该如何进行发布。\n- 固定范围\n- 固定日期\n- 固定日期且固定范围\n\n速度、成本和范围，这是项目管理周期中著名的“铁三角”。在软件项目中，速度指的是构建和发布系统所需的时间，成本通常受项目上人头数的影响，范围涉及所包含的故事数量。三者组成一个平衡方程式，改变其中任何一个，必然都会导致另外一个或两个相应地产生变化。\n\n## 用户角色人物\n用户角色人物是整理妥当的简要档案，用作参考时方便手持。研究自然环境中真实用户的习惯、态度和行为，虚构人物往往是它们的混合体。\n\n## 绘制故事地图\n绘制故事地图是另一种组织用户故事的方式，能够提供比传统产品列表更丰富的上下文，也有助于进行发布规划。\n\n尽管故事地图并不完全是产品列表的替代品，但对照比较一下还是很有好处的。本质上来看，产品列表是唯一的，用户故事按优先级从最高到最低的顺序排列。故事地图是二维的，不仅指示了故事的优先级，也指出了它们彼此的关系和用户更高层次的目标。地图能帮助团队理解故事是如何组装起来形成可发布产品的。\n\n## 纸上原型\n纸上原型并不是Scrum的一部分，但它具有敏捷的本质，是充实产品负责人工具箱的上佳之选。\n\n这种低科技、高参与度的方式能移除障碍，让客户也可以参与到设计与开发流程中，还能让学习成效最大化，因为它的反馈循环快得只在转瞬间。\n\n## 项目微章程\n微章程就是明确记载了项目关键信息的概要项目。项目伊始只不过是一个想法，而微章程就是有效捕获想法的一种方法。捕捉到之后，想法就会变得更易于分享、讨论和修订，这会极大地帮助你发现并排除掉范围及使命蔓延。\n\n基础微章程包含如下元素：\n- 代号：给项目取个名字\n- 使命宣言：表达项目的目的\n- 愿景宣言：描述项目想要创建的未来\n- 电梯演讲：关注项目要解决的问题，以及公司或客户将由此获得的好处。\n- 商业价值：项目对业务而言在金钱或其他方面的价值是什么\n- 客户和用户：做购买决策的人\n- 度量指标：讲清楚计划如何去度量之前所描述的那些价值\n- 里程碑：重要的时间点\n- 资源：完成如下描述的项目必须或必需用到的资源\n- 风险：可能危害或颠覆项目的事情\n- 权衡：现实地评估团队运作环境中的各种约束。\n\n## 重构\n敏捷宣言声明：最好的架构、需求和设计出自自组织团队。\n\n重构就是，在不改变代码外在行为的前提下，对代码做出修改，以改进程序内部结构的一种有纪律的方法。核心是通过一连串的小行为实施转变。每次转变（称之为一次“重构”）都只做一点点，但一系列的转变就能带来显著的结构重组。由于每次重构都不大，也就不容易出错 。每次重构之后系统也依然运作良好，减少了系统在重组过程中严重受损的几率。\n\n把设计工作内置于开发流程之中，这就是敏捷开发迭代复迭代不断前行的方式。\n\n## 测试驱动开发\n测试驱动开发的目标在于快速地开发出设计精良、正确性已获证实的代码。\n\n通过先行测试，可以把注意力集中于开发人员需要让代码展现的外部行为。一旦开发人员切实地理解了代码需要做什么，就已经准备周全可以妥善地设计代码实现了。\n\n## 结对编程\n结对编程更加快速地产出设计更精良、整洁的代码。它还能消灭知识简仓。\n\n","slug":"读书笔记/Scrum要素读书笔记","published":1,"_id":"cjf4zmnv10017woy6i7pokui8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Scrum是一种迭代增量式的软件开发过程，用于敏捷软件开发。Scrum是一个包括一系列实践和预定义角色的过程框架。</p>\n<p>Scrum要素包括角色、周期、工件，以及如何确定用户故事、如何估算工作，如何召开每日站立会议。</p>\n<p>当前，Scrum方法在国内已经逐渐普及，为众多知名IT公司和软件开发团队采用。 本书是帮助软件开发人员认识、初步了解Scrum方法的佳作。通过本书可以理清Scrum的相关知识和概念，为采用和实践Scrum方法做好充分准备。</p>\n<a id=\"more\"></a>\n<h1 id=\"Scrum团队周记\"><a href=\"#Scrum团队周记\" class=\"headerlink\" title=\"Scrum团队周记\"></a>Scrum团队周记</h1><p>工作项目的候选列表，新特性和错误修复的工作都有，这些都是项目上最重要的代办事项。</p>\n<p>白纸板是用来文字记录的，例如，团队都认可的故事“完成”定义。</p>\n<p>Sprint燃尽图，用来监测下一周任务完成过程中的速度变化。</p>\n<p>Scrum日会是一种短会，用于团结和协调团队 。为了鼓励大家都简洁点，这个会是站着开的。它因此而得名“每日站会”。</p>\n<p>团队成员轮流分享信息：前一天完成了什么任务，明天的Scrum日会前打算做哪个任务，有没有碰到什么障碍或是受到了什么拖累。</p>\n<h1 id=\"第一部分：敏捷力介绍\"><a href=\"#第一部分：敏捷力介绍\" class=\"headerlink\" title=\"第一部分：敏捷力介绍\"></a>第一部分：敏捷力介绍</h1><p>瀑布模型将开发和交付且软件项目的流程分割为相互独立的阶段：</p>\n<ul>\n<li>需求收集</li>\n<li>设计</li>\n<li>编码</li>\n<li>测试</li>\n</ul>\n<p>唯一能够指望的只有变化。所有种类的敏捷流程都有一个共同点：拥抱变化，视变化为成长的良机，而非障碍。</p>\n<p>简单地看，敏捷开发和瀑布开发之间差别在于：瀑布开发必须先完成当前步骤之后才能头也不回地迈向下一步骤。这不是敏捷团队的方式。敏捷团队会一点点需求收集，一点点设计、编码、测试，最后交付一点点价值给客户。接着团队再重复此过程……周而复始，工作推进过程中不断改善、调整流程，一直到项目完成为止。</p>\n<p>敏捷迭代（在Scrum中称为“Sprint”）可不是微型瀑布，敏捷流程可是真的没有什么步骤之说。敏捷开发是一个整体流程，即测试、设计、编码、和需求收集是完全整合彼此依赖的流程。</p>\n<p>敏捷提倡的良好实践：</p>\n<ul>\n<li>边做边测试</li>\n<li>及早且频繁地交付产品</li>\n<li>文档边做边写</li>\n<li>构建跨职能团队</li>\n</ul>\n<p>敏捷方式的核心思想在于迅速交付商业价值，体现维可工作的软件，还要以定期增量的形式持续地交付价值。</p>\n<p>敏捷宣言</p>\n<ul>\n<li>个体和互动 <strong>高于</strong> 流程和工具</li>\n<li>工作的软件 <strong>高于</strong> 详尽的文档</li>\n<li>客户合作 <strong>高于</strong> 合同谈判</li>\n<li>响应变化 <strong>高于</strong> 遵循计划</li>\n</ul>\n<p>遵循尽早且频繁交付软件的敏捷框架可以带来高效率，因而保障了客户可以实现所投入时间和金钱的最大化价值回报，进一步也排除了对前期合同洽谈的需要。</p>\n<p>敏捷原则</p>\n<ul>\n<li>我们最重要的目标，是通过持续不断地及早交付有价值的软件使客户满意。</li>\n<li>欣然面对需求变化，即使在开发后期也一样。为了客户的竞争优势，敏捷过程掌控变化。</li>\n<li>经常地交付可工作的软件，相隔几个星期或一两个月，倾向于采取较短的周期。</li>\n<li>业务人员和开发人员必须相互合作，项目中的每一天都不例外。</li>\n<li>激发个体的斗志，以他们为核心搭建项目。提供所需的环境和支援，辅以信任，从而达成目标。</li>\n<li>不论团队内外，传递信息效果最好效率也最高的方式是面对面的交谈。</li>\n<li>可工作的软件是进度首要度量标准。</li>\n<li>敏捷过程倡导可持续开发。责任人、开发人员和用户要能够共同其步调稳定延续。</li>\n<li>坚持不懈地追求技术卓越和良好设计，敏捷能力由此增强。</li>\n<li>以简洁为本，它是极力减少不必要工作量的艺术。</li>\n<li>最好的架构、需求和设计出自组织团队。</li>\n<li>团队定期地反思如何能提高成效，并依次调整自身的举止表现。</li>\n</ul>\n<p>早交付，频交付。</p>\n<h1 id=\"第二部分：Scrum\"><a href=\"#第二部分：Scrum\" class=\"headerlink\" title=\"第二部分：Scrum\"></a>第二部分：Scrum</h1><p>Scrum是一个基于团队进行复杂系统和产品开发的框架。</p>\n<p>选择最佳方法以达成目标是团队的责任。</p>\n<p>任何时候都可以决定是否要交货，或者再继续做一个sprint以便完成更多功能。</p>\n<h2 id=\"Scrum角色\"><a href=\"#Scrum角色\" class=\"headerlink\" title=\"Scrum角色\"></a>Scrum角色</h2><p>Scrum只承认三个互不相同的角色：产品负责人、Scrum master和团队成员。</p>\n<h3 id=\"角色：产品负责人\"><a href=\"#角色：产品负责人\" class=\"headerlink\" title=\"角色：产品负责人\"></a>角色：产品负责人</h3><p>产品负责人的责任在于，帮公司得到最高投资回报。做法是指引团队做最有价值的作业，并远离不那么有价值的作业。也就是说，产品负责人控制着团队列表上那些条目的优先级顺序。</p>\n<p>在Scrum中，产品负责人是唯一有权要求团队做事以及改变列表条目优先级的人。这必然也就意味着，产品负责人需要和干系人密切地合作，判别需要何时构建何物，从而交付最多业务价值。</p>\n<p>产品负责人是产品愿景的监护人。愿景包括，产品为谁而建、他们为何需要、如何使用。</p>\n<p>产品负责人角色概要：</p>\n<ul>\n<li>持有产品愿景</li>\n<li>代表业务</li>\n<li>代表客户</li>\n<li>拥有产品列表</li>\n<li>划定故事优先级</li>\n<li>设立故事的接收标准</li>\n<li>有空回答团队成员们的问题</li>\n</ul>\n<h3 id=\"角色：Scrum-Master\"><a href=\"#角色：Scrum-Master\" class=\"headerlink\" title=\"角色：Scrum Master\"></a>角色：Scrum Master</h3><p>Scrum Master担当教练角色，引领团队达到更高级的凝聚力、自组织和表现。团队的交付物是产品，而Scrum Master的交付物就是自组织团队。</p>\n<p>Scrum Master角色概要：</p>\n<ul>\n<li>Scrum专家和谏言者</li>\n<li>教练</li>\n<li>阻碍推土机</li>\n<li>引导者</li>\n</ul>\n<h3 id=\"角色：团队成员\"><a href=\"#角色：团队成员\" class=\"headerlink\" title=\"角色：团队成员\"></a>角色：团队成员</h3><p>Scrum团队是高度协作的，也是自组织的。</p>\n<p>做具体实现工作的团队成员们，同样也需要负责估计实现特性需要的工作量。产品负责人可以决定故事的顺序，但完成特性或任务需要多少时间是开发人员说了算。</p>\n<p>作为Scrum团队成员，要完成的不是你的工作，而是这份工作。</p>\n<p>团队成员角色概要：</p>\n<ul>\n<li>负责交付用户故事</li>\n<li>做所有的开发工作</li>\n<li>自组织地交付用户故事</li>\n<li>支配估算流程</li>\n<li>支配“如何干活”的决策</li>\n<li>避免“与我无关”</li>\n</ul>\n<h2 id=\"Sprint周期\"><a href=\"#Sprint周期\" class=\"headerlink\" title=\"Sprint周期\"></a>Sprint周期</h2><h3 id=\"Sprint规划会议\"><a href=\"#Sprint规划会议\" class=\"headerlink\" title=\"Sprint规划会议\"></a>Sprint规划会议</h3><p>Sprint规划会议标志着Sprint的开始。通常来说这个会议分为两个部分。第一部分的目标是，团队要选择一组交付物作为当前Sprint的承诺。会议的第二部分，团队要罗列出交付用户故事所需完成的所有任务。</p>\n<h4 id=\"第一部分：要做什么？\"><a href=\"#第一部分：要做什么？\" class=\"headerlink\" title=\"第一部分：要做什么？\"></a>第一部分：要做什么？</h4><p>Sprint规划会议第一部分的目标在于，团队要找出他们有信心在Sprint结束时交付的一组“已承诺”故事。产品负责人引导这一部分的会议。产品负责人按照优先级顺序，逐个地介绍他希望团队在当前Sprint完成的那些故事。</p>\n<p>团队成员们要和产品负责人探讨所有故事，审查其验收标准，确保大家对预期结果有一致的理解。团队成员协商解决依赖性问题，一般还会讨论实现故事要做哪些事情。接着团队成员就要决定他们是否承诺这个故事。</p>\n<p>团队的速率（velocity）指的是每个Sprint团队所完成故事点数的平均值，它是一个有效的工具，可以帮助团队选择承诺适量的工作。</p>\n<h4 id=\"第二部分：要怎么做？\"><a href=\"#第二部分：要怎么做？\" class=\"headerlink\" title=\"第二部分：要怎么做？\"></a>第二部分：要怎么做？</h4><p>会议的第二部分，团队卷起袖管就开工，把选定的故事分解成任务。要记得故事是交付物，他们是干系人、用户和客户想要的东西。团队成员需要完成这些任务才能交付故事。</p>\n<h3 id=\"Scrum日会\"><a href=\"#Scrum日会\" class=\"headerlink\" title=\"Scrum日会\"></a>Scrum日会</h3><p>Scrum日会有时候也被称为站立会议：</p>\n<ul>\n<li>每天：大多数团队选择在一天工作刚开始的时候开这个会。</li>\n<li>小：只有开发团队的成员们可以参加。</li>\n<li>简要：这个会不是用来解决大问题的，而是用于保持交流渠道的畅通。站立的意义在于阻止各种离题跑调的情况发生，避免开会变遭罪。</li>\n<li>直截了当：参会者轮流快速地分享：<ul>\n<li>在上一次Scrum日会之后，我已经完成的内容</li>\n<li>到下一次Scrum日会之前，我期望完成的内容</li>\n<li>导致我慢下来的障碍</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"故事时间\"><a href=\"#故事时间\" class=\"headerlink\" title=\"故事时间\"></a>故事时间</h3><p>也被称为“列表修整”会议</p>\n<h3 id=\"Sprint评审\"><a href=\"#Sprint评审\" class=\"headerlink\" title=\"Sprint评审\"></a>Sprint评审</h3><p>也被称为Sprint演示。即便是这个Sprint什么也没有完成，也要坚持召开Sprint评审会议，得让干系人了解情况，因为Scrum靠透明度而活。</p>\n<h3 id=\"回顾\"><a href=\"#回顾\" class=\"headerlink\" title=\"回顾\"></a>回顾</h3><p>Scrum就是为了帮助团队持续地进行检验和适应而设计，能够带动绩效和幸福感不断提升。每个迭代都要召开回顾会议，在迭代最后才举行，是专门留给团队的时间，专注于讨论他们当前Sprint的心得体会，并用于继续改进。</p>\n<h3 id=\"检验和适应\"><a href=\"#检验和适应\" class=\"headerlink\" title=\"检验和适应\"></a>检验和适应</h3><p>归根结底，我们以短周期形式做开发工作的原因在于，学习。经验是最好的老师，而Scrum短周期的设计家就是要为我们提供多方位接收反馈的机会，包括客户、团队和试吃昂，并从中学习。</p>\n<p>检验和适应也被称为“持续改进”。</p>\n<h2 id=\"Scrum工件\"><a href=\"#Scrum工件\" class=\"headerlink\" title=\"Scrum工件\"></a>Scrum工件</h2><p>Scrum工件是可用于实现进度可视化的工具。</p>\n<ul>\n<li>列表</li>\n<li>燃尽图</li>\n<li>任务板</li>\n<li>完成之定义</li>\n</ul>\n<h3 id=\"产品列表\"><a href=\"#产品列表\" class=\"headerlink\" title=\"产品列表\"></a>产品列表</h3><p>产品列表是产品预期交付物的累积清单。这包括了特性、缺陷修复、文档变更和任何值得创建的东西。列表上的所有内容都能以某种弄方式帮助用户。</p>\n<p>产品列表不断地改变。</p>\n<p>列表的优点在于，绝不会浪费时间给那些可能永不见天日的特征写详细规格书。列表上的故事都是按照优先级排序的，可以说是精确排序。</p>\n<p>产品负责人拥有列表，只有产品负责人可以增加、减少列表中的条目，或是进行优先级排序，尽管他也必须借助于和业务干系人、客户和团队成员的紧密配合才能做到。</p>\n<h4 id=\"Sprint列表\"><a href=\"#Sprint列表\" class=\"headerlink\" title=\"Sprint列表\"></a>Sprint列表</h4><p>Sprint列表是团队当前Sprint的任务清单。它只存活一个Sprint的时间。里面包括所有已承诺的故事以及相关联的任务，以及此外的附加工作。</p>\n<p>Sprint列表在Sprint规划会议中产生，一旦Sprint规划会议结束，，产品负责人就不可以再修改Sprint列表的故事清单。这是Scrum中业务方和开发团队之间的基本协议，每次Sprint开始前，业务方都可以改变方向，然而Sprint开始后，则允许团队只专注于他们所承诺的故事。改变这个已承诺故事清单有一个方式，就是由干这个活的团队成员提出变更请求。</p>\n<h4 id=\"信息辐射器\"><a href=\"#信息辐射器\" class=\"headerlink\" title=\"信息辐射器\"></a>信息辐射器</h4><p>任务板贴满了便事贴，分为待办、进展中、已完成三种状态。</p>\n<p>重要的是这些东西要做得大，而且要放在所有人都能看见的地方。要努力在墙上留住尽可能多的信息。</p>\n<h4 id=\"燃图\"><a href=\"#燃图\" class=\"headerlink\" title=\"燃图\"></a>燃图</h4><p>燃尽图描述了剩余工作随时间变化的轨迹。纵坐标绘制剩余量，横坐标是时间。</p>\n<p>发布燃尽图：产品负责人以此为工具追踪剩余工作随时间变化的过程。图表中有不同斜率的下降趋势线，反映了单位时间段内所完成点数的变化。</p>\n<p>Sprint燃尽图：显示当前Sprint剩余工作量的变化。Sprint燃尽图的目的在于，能够让团队看清楚情况，知道自己能够交付迭代中已经承诺的全部。</p>\n<p>燃耗图：团队的速率就是团队每个Sprint所完成的工作单位数量（例如故事点）。燃耗图绘制出已完成故事点随时间的变化的情况，是团队速率的可视化指示器。</p>\n<p>任务板：最简单的任务板由待办（todo）、办理(doing)和已办（done）三部分组成。</p>\n<h3 id=\"完成之定义\"><a href=\"#完成之定义\" class=\"headerlink\" title=\"完成之定义\"></a>完成之定义</h3><p>完成之定义和验收标准是有区别的。验收标准属于产品负责人或客户的领域，明确定义了被视为“可接受”产品必须满足的条件并记录在案。完成之定义归开发团队所有，关注的不是产品面向用户的功能，而是产品要可交付必须要做完的那些任务。</p>\n<h2 id=\"用户故事\"><a href=\"#用户故事\" class=\"headerlink\" title=\"用户故事\"></a>用户故事</h2><p>用户故事是产品列表的基础构件。用户故事通常都是手写在索引卡上的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作为&lt;某类用户&gt;</span><br><span class=\"line\">我想&lt;做某事&gt;</span><br><span class=\"line\">从而&lt;创造出某些价值&gt;</span><br></pre></td></tr></table></figure></p>\n<p>基于上述版本，又演化出了聚集目标的用户故事模板<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为了&lt;达成某类目标&gt;</span><br><span class=\"line\">作为&lt;某类用户&gt;</span><br><span class=\"line\">我想&lt;做某事&gt;</span><br></pre></td></tr></table></figure></p>\n<p>和聚焦价值的用户故事模板<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为了&lt;创造某价值&gt;</span><br><span class=\"line\">作为&lt;某类用户&gt;</span><br><span class=\"line\">我想&lt;做某事&gt;</span><br></pre></td></tr></table></figure></p>\n<p>用户故事是交谈的敲门砖。用户故事不是完整的需求或说明书，它们是占位符。它们的信息量足以提醒团队有东西要完成，但我们刻意地不过多探讨细节……直到必需之时。</p>\n<p>用户故事、交谈和接收标准结合起来组成了完整的需求规格说明书。用户故事让我们可以快速且完全地捕获想法。在交谈中，我们可以阐述所需完成的细节，并达成一致且可实现的理解。最终，我们用明确的、可测试的接收标准来记录共识。</p>\n<h2 id=\"用户故事大小估值工作\"><a href=\"#用户故事大小估值工作\" class=\"headerlink\" title=\"用户故事大小估值工作\"></a>用户故事大小估值工作</h2><p>生成估值的真正目标是要提供进度的可预测性度量。、</p>\n<h1 id=\"第三部分：辅助性实践\"><a href=\"#第三部分：辅助性实践\" class=\"headerlink\" title=\"第三部分：辅助性实践\"></a>第三部分：辅助性实践</h1><p>Scrum是轻量级框架，它不告诉你如何规划发布，或开发产品原型，或编写及测试代码。</p>\n<h2 id=\"发布规划\"><a href=\"#发布规划\" class=\"headerlink\" title=\"发布规划\"></a>发布规划</h2><p>发布规划是为产品发布挑选故事（特性、功能增强、缺陷修复等）的流程，以及应该如何进行发布。</p>\n<ul>\n<li>固定范围</li>\n<li>固定日期</li>\n<li>固定日期且固定范围</li>\n</ul>\n<p>速度、成本和范围，这是项目管理周期中著名的“铁三角”。在软件项目中，速度指的是构建和发布系统所需的时间，成本通常受项目上人头数的影响，范围涉及所包含的故事数量。三者组成一个平衡方程式，改变其中任何一个，必然都会导致另外一个或两个相应地产生变化。</p>\n<h2 id=\"用户角色人物\"><a href=\"#用户角色人物\" class=\"headerlink\" title=\"用户角色人物\"></a>用户角色人物</h2><p>用户角色人物是整理妥当的简要档案，用作参考时方便手持。研究自然环境中真实用户的习惯、态度和行为，虚构人物往往是它们的混合体。</p>\n<h2 id=\"绘制故事地图\"><a href=\"#绘制故事地图\" class=\"headerlink\" title=\"绘制故事地图\"></a>绘制故事地图</h2><p>绘制故事地图是另一种组织用户故事的方式，能够提供比传统产品列表更丰富的上下文，也有助于进行发布规划。</p>\n<p>尽管故事地图并不完全是产品列表的替代品，但对照比较一下还是很有好处的。本质上来看，产品列表是唯一的，用户故事按优先级从最高到最低的顺序排列。故事地图是二维的，不仅指示了故事的优先级，也指出了它们彼此的关系和用户更高层次的目标。地图能帮助团队理解故事是如何组装起来形成可发布产品的。</p>\n<h2 id=\"纸上原型\"><a href=\"#纸上原型\" class=\"headerlink\" title=\"纸上原型\"></a>纸上原型</h2><p>纸上原型并不是Scrum的一部分，但它具有敏捷的本质，是充实产品负责人工具箱的上佳之选。</p>\n<p>这种低科技、高参与度的方式能移除障碍，让客户也可以参与到设计与开发流程中，还能让学习成效最大化，因为它的反馈循环快得只在转瞬间。</p>\n<h2 id=\"项目微章程\"><a href=\"#项目微章程\" class=\"headerlink\" title=\"项目微章程\"></a>项目微章程</h2><p>微章程就是明确记载了项目关键信息的概要项目。项目伊始只不过是一个想法，而微章程就是有效捕获想法的一种方法。捕捉到之后，想法就会变得更易于分享、讨论和修订，这会极大地帮助你发现并排除掉范围及使命蔓延。</p>\n<p>基础微章程包含如下元素：</p>\n<ul>\n<li>代号：给项目取个名字</li>\n<li>使命宣言：表达项目的目的</li>\n<li>愿景宣言：描述项目想要创建的未来</li>\n<li>电梯演讲：关注项目要解决的问题，以及公司或客户将由此获得的好处。</li>\n<li>商业价值：项目对业务而言在金钱或其他方面的价值是什么</li>\n<li>客户和用户：做购买决策的人</li>\n<li>度量指标：讲清楚计划如何去度量之前所描述的那些价值</li>\n<li>里程碑：重要的时间点</li>\n<li>资源：完成如下描述的项目必须或必需用到的资源</li>\n<li>风险：可能危害或颠覆项目的事情</li>\n<li>权衡：现实地评估团队运作环境中的各种约束。</li>\n</ul>\n<h2 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h2><p>敏捷宣言声明：最好的架构、需求和设计出自自组织团队。</p>\n<p>重构就是，在不改变代码外在行为的前提下，对代码做出修改，以改进程序内部结构的一种有纪律的方法。核心是通过一连串的小行为实施转变。每次转变（称之为一次“重构”）都只做一点点，但一系列的转变就能带来显著的结构重组。由于每次重构都不大，也就不容易出错 。每次重构之后系统也依然运作良好，减少了系统在重组过程中严重受损的几率。</p>\n<p>把设计工作内置于开发流程之中，这就是敏捷开发迭代复迭代不断前行的方式。</p>\n<h2 id=\"测试驱动开发\"><a href=\"#测试驱动开发\" class=\"headerlink\" title=\"测试驱动开发\"></a>测试驱动开发</h2><p>测试驱动开发的目标在于快速地开发出设计精良、正确性已获证实的代码。</p>\n<p>通过先行测试，可以把注意力集中于开发人员需要让代码展现的外部行为。一旦开发人员切实地理解了代码需要做什么，就已经准备周全可以妥善地设计代码实现了。</p>\n<h2 id=\"结对编程\"><a href=\"#结对编程\" class=\"headerlink\" title=\"结对编程\"></a>结对编程</h2><p>结对编程更加快速地产出设计更精良、整洁的代码。它还能消灭知识简仓。</p>\n","site":{"data":{}},"excerpt":"<p>Scrum是一种迭代增量式的软件开发过程，用于敏捷软件开发。Scrum是一个包括一系列实践和预定义角色的过程框架。</p>\n<p>Scrum要素包括角色、周期、工件，以及如何确定用户故事、如何估算工作，如何召开每日站立会议。</p>\n<p>当前，Scrum方法在国内已经逐渐普及，为众多知名IT公司和软件开发团队采用。 本书是帮助软件开发人员认识、初步了解Scrum方法的佳作。通过本书可以理清Scrum的相关知识和概念，为采用和实践Scrum方法做好充分准备。</p>","more":"<h1 id=\"Scrum团队周记\"><a href=\"#Scrum团队周记\" class=\"headerlink\" title=\"Scrum团队周记\"></a>Scrum团队周记</h1><p>工作项目的候选列表，新特性和错误修复的工作都有，这些都是项目上最重要的代办事项。</p>\n<p>白纸板是用来文字记录的，例如，团队都认可的故事“完成”定义。</p>\n<p>Sprint燃尽图，用来监测下一周任务完成过程中的速度变化。</p>\n<p>Scrum日会是一种短会，用于团结和协调团队 。为了鼓励大家都简洁点，这个会是站着开的。它因此而得名“每日站会”。</p>\n<p>团队成员轮流分享信息：前一天完成了什么任务，明天的Scrum日会前打算做哪个任务，有没有碰到什么障碍或是受到了什么拖累。</p>\n<h1 id=\"第一部分：敏捷力介绍\"><a href=\"#第一部分：敏捷力介绍\" class=\"headerlink\" title=\"第一部分：敏捷力介绍\"></a>第一部分：敏捷力介绍</h1><p>瀑布模型将开发和交付且软件项目的流程分割为相互独立的阶段：</p>\n<ul>\n<li>需求收集</li>\n<li>设计</li>\n<li>编码</li>\n<li>测试</li>\n</ul>\n<p>唯一能够指望的只有变化。所有种类的敏捷流程都有一个共同点：拥抱变化，视变化为成长的良机，而非障碍。</p>\n<p>简单地看，敏捷开发和瀑布开发之间差别在于：瀑布开发必须先完成当前步骤之后才能头也不回地迈向下一步骤。这不是敏捷团队的方式。敏捷团队会一点点需求收集，一点点设计、编码、测试，最后交付一点点价值给客户。接着团队再重复此过程……周而复始，工作推进过程中不断改善、调整流程，一直到项目完成为止。</p>\n<p>敏捷迭代（在Scrum中称为“Sprint”）可不是微型瀑布，敏捷流程可是真的没有什么步骤之说。敏捷开发是一个整体流程，即测试、设计、编码、和需求收集是完全整合彼此依赖的流程。</p>\n<p>敏捷提倡的良好实践：</p>\n<ul>\n<li>边做边测试</li>\n<li>及早且频繁地交付产品</li>\n<li>文档边做边写</li>\n<li>构建跨职能团队</li>\n</ul>\n<p>敏捷方式的核心思想在于迅速交付商业价值，体现维可工作的软件，还要以定期增量的形式持续地交付价值。</p>\n<p>敏捷宣言</p>\n<ul>\n<li>个体和互动 <strong>高于</strong> 流程和工具</li>\n<li>工作的软件 <strong>高于</strong> 详尽的文档</li>\n<li>客户合作 <strong>高于</strong> 合同谈判</li>\n<li>响应变化 <strong>高于</strong> 遵循计划</li>\n</ul>\n<p>遵循尽早且频繁交付软件的敏捷框架可以带来高效率，因而保障了客户可以实现所投入时间和金钱的最大化价值回报，进一步也排除了对前期合同洽谈的需要。</p>\n<p>敏捷原则</p>\n<ul>\n<li>我们最重要的目标，是通过持续不断地及早交付有价值的软件使客户满意。</li>\n<li>欣然面对需求变化，即使在开发后期也一样。为了客户的竞争优势，敏捷过程掌控变化。</li>\n<li>经常地交付可工作的软件，相隔几个星期或一两个月，倾向于采取较短的周期。</li>\n<li>业务人员和开发人员必须相互合作，项目中的每一天都不例外。</li>\n<li>激发个体的斗志，以他们为核心搭建项目。提供所需的环境和支援，辅以信任，从而达成目标。</li>\n<li>不论团队内外，传递信息效果最好效率也最高的方式是面对面的交谈。</li>\n<li>可工作的软件是进度首要度量标准。</li>\n<li>敏捷过程倡导可持续开发。责任人、开发人员和用户要能够共同其步调稳定延续。</li>\n<li>坚持不懈地追求技术卓越和良好设计，敏捷能力由此增强。</li>\n<li>以简洁为本，它是极力减少不必要工作量的艺术。</li>\n<li>最好的架构、需求和设计出自组织团队。</li>\n<li>团队定期地反思如何能提高成效，并依次调整自身的举止表现。</li>\n</ul>\n<p>早交付，频交付。</p>\n<h1 id=\"第二部分：Scrum\"><a href=\"#第二部分：Scrum\" class=\"headerlink\" title=\"第二部分：Scrum\"></a>第二部分：Scrum</h1><p>Scrum是一个基于团队进行复杂系统和产品开发的框架。</p>\n<p>选择最佳方法以达成目标是团队的责任。</p>\n<p>任何时候都可以决定是否要交货，或者再继续做一个sprint以便完成更多功能。</p>\n<h2 id=\"Scrum角色\"><a href=\"#Scrum角色\" class=\"headerlink\" title=\"Scrum角色\"></a>Scrum角色</h2><p>Scrum只承认三个互不相同的角色：产品负责人、Scrum master和团队成员。</p>\n<h3 id=\"角色：产品负责人\"><a href=\"#角色：产品负责人\" class=\"headerlink\" title=\"角色：产品负责人\"></a>角色：产品负责人</h3><p>产品负责人的责任在于，帮公司得到最高投资回报。做法是指引团队做最有价值的作业，并远离不那么有价值的作业。也就是说，产品负责人控制着团队列表上那些条目的优先级顺序。</p>\n<p>在Scrum中，产品负责人是唯一有权要求团队做事以及改变列表条目优先级的人。这必然也就意味着，产品负责人需要和干系人密切地合作，判别需要何时构建何物，从而交付最多业务价值。</p>\n<p>产品负责人是产品愿景的监护人。愿景包括，产品为谁而建、他们为何需要、如何使用。</p>\n<p>产品负责人角色概要：</p>\n<ul>\n<li>持有产品愿景</li>\n<li>代表业务</li>\n<li>代表客户</li>\n<li>拥有产品列表</li>\n<li>划定故事优先级</li>\n<li>设立故事的接收标准</li>\n<li>有空回答团队成员们的问题</li>\n</ul>\n<h3 id=\"角色：Scrum-Master\"><a href=\"#角色：Scrum-Master\" class=\"headerlink\" title=\"角色：Scrum Master\"></a>角色：Scrum Master</h3><p>Scrum Master担当教练角色，引领团队达到更高级的凝聚力、自组织和表现。团队的交付物是产品，而Scrum Master的交付物就是自组织团队。</p>\n<p>Scrum Master角色概要：</p>\n<ul>\n<li>Scrum专家和谏言者</li>\n<li>教练</li>\n<li>阻碍推土机</li>\n<li>引导者</li>\n</ul>\n<h3 id=\"角色：团队成员\"><a href=\"#角色：团队成员\" class=\"headerlink\" title=\"角色：团队成员\"></a>角色：团队成员</h3><p>Scrum团队是高度协作的，也是自组织的。</p>\n<p>做具体实现工作的团队成员们，同样也需要负责估计实现特性需要的工作量。产品负责人可以决定故事的顺序，但完成特性或任务需要多少时间是开发人员说了算。</p>\n<p>作为Scrum团队成员，要完成的不是你的工作，而是这份工作。</p>\n<p>团队成员角色概要：</p>\n<ul>\n<li>负责交付用户故事</li>\n<li>做所有的开发工作</li>\n<li>自组织地交付用户故事</li>\n<li>支配估算流程</li>\n<li>支配“如何干活”的决策</li>\n<li>避免“与我无关”</li>\n</ul>\n<h2 id=\"Sprint周期\"><a href=\"#Sprint周期\" class=\"headerlink\" title=\"Sprint周期\"></a>Sprint周期</h2><h3 id=\"Sprint规划会议\"><a href=\"#Sprint规划会议\" class=\"headerlink\" title=\"Sprint规划会议\"></a>Sprint规划会议</h3><p>Sprint规划会议标志着Sprint的开始。通常来说这个会议分为两个部分。第一部分的目标是，团队要选择一组交付物作为当前Sprint的承诺。会议的第二部分，团队要罗列出交付用户故事所需完成的所有任务。</p>\n<h4 id=\"第一部分：要做什么？\"><a href=\"#第一部分：要做什么？\" class=\"headerlink\" title=\"第一部分：要做什么？\"></a>第一部分：要做什么？</h4><p>Sprint规划会议第一部分的目标在于，团队要找出他们有信心在Sprint结束时交付的一组“已承诺”故事。产品负责人引导这一部分的会议。产品负责人按照优先级顺序，逐个地介绍他希望团队在当前Sprint完成的那些故事。</p>\n<p>团队成员们要和产品负责人探讨所有故事，审查其验收标准，确保大家对预期结果有一致的理解。团队成员协商解决依赖性问题，一般还会讨论实现故事要做哪些事情。接着团队成员就要决定他们是否承诺这个故事。</p>\n<p>团队的速率（velocity）指的是每个Sprint团队所完成故事点数的平均值，它是一个有效的工具，可以帮助团队选择承诺适量的工作。</p>\n<h4 id=\"第二部分：要怎么做？\"><a href=\"#第二部分：要怎么做？\" class=\"headerlink\" title=\"第二部分：要怎么做？\"></a>第二部分：要怎么做？</h4><p>会议的第二部分，团队卷起袖管就开工，把选定的故事分解成任务。要记得故事是交付物，他们是干系人、用户和客户想要的东西。团队成员需要完成这些任务才能交付故事。</p>\n<h3 id=\"Scrum日会\"><a href=\"#Scrum日会\" class=\"headerlink\" title=\"Scrum日会\"></a>Scrum日会</h3><p>Scrum日会有时候也被称为站立会议：</p>\n<ul>\n<li>每天：大多数团队选择在一天工作刚开始的时候开这个会。</li>\n<li>小：只有开发团队的成员们可以参加。</li>\n<li>简要：这个会不是用来解决大问题的，而是用于保持交流渠道的畅通。站立的意义在于阻止各种离题跑调的情况发生，避免开会变遭罪。</li>\n<li>直截了当：参会者轮流快速地分享：<ul>\n<li>在上一次Scrum日会之后，我已经完成的内容</li>\n<li>到下一次Scrum日会之前，我期望完成的内容</li>\n<li>导致我慢下来的障碍</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"故事时间\"><a href=\"#故事时间\" class=\"headerlink\" title=\"故事时间\"></a>故事时间</h3><p>也被称为“列表修整”会议</p>\n<h3 id=\"Sprint评审\"><a href=\"#Sprint评审\" class=\"headerlink\" title=\"Sprint评审\"></a>Sprint评审</h3><p>也被称为Sprint演示。即便是这个Sprint什么也没有完成，也要坚持召开Sprint评审会议，得让干系人了解情况，因为Scrum靠透明度而活。</p>\n<h3 id=\"回顾\"><a href=\"#回顾\" class=\"headerlink\" title=\"回顾\"></a>回顾</h3><p>Scrum就是为了帮助团队持续地进行检验和适应而设计，能够带动绩效和幸福感不断提升。每个迭代都要召开回顾会议，在迭代最后才举行，是专门留给团队的时间，专注于讨论他们当前Sprint的心得体会，并用于继续改进。</p>\n<h3 id=\"检验和适应\"><a href=\"#检验和适应\" class=\"headerlink\" title=\"检验和适应\"></a>检验和适应</h3><p>归根结底，我们以短周期形式做开发工作的原因在于，学习。经验是最好的老师，而Scrum短周期的设计家就是要为我们提供多方位接收反馈的机会，包括客户、团队和试吃昂，并从中学习。</p>\n<p>检验和适应也被称为“持续改进”。</p>\n<h2 id=\"Scrum工件\"><a href=\"#Scrum工件\" class=\"headerlink\" title=\"Scrum工件\"></a>Scrum工件</h2><p>Scrum工件是可用于实现进度可视化的工具。</p>\n<ul>\n<li>列表</li>\n<li>燃尽图</li>\n<li>任务板</li>\n<li>完成之定义</li>\n</ul>\n<h3 id=\"产品列表\"><a href=\"#产品列表\" class=\"headerlink\" title=\"产品列表\"></a>产品列表</h3><p>产品列表是产品预期交付物的累积清单。这包括了特性、缺陷修复、文档变更和任何值得创建的东西。列表上的所有内容都能以某种弄方式帮助用户。</p>\n<p>产品列表不断地改变。</p>\n<p>列表的优点在于，绝不会浪费时间给那些可能永不见天日的特征写详细规格书。列表上的故事都是按照优先级排序的，可以说是精确排序。</p>\n<p>产品负责人拥有列表，只有产品负责人可以增加、减少列表中的条目，或是进行优先级排序，尽管他也必须借助于和业务干系人、客户和团队成员的紧密配合才能做到。</p>\n<h4 id=\"Sprint列表\"><a href=\"#Sprint列表\" class=\"headerlink\" title=\"Sprint列表\"></a>Sprint列表</h4><p>Sprint列表是团队当前Sprint的任务清单。它只存活一个Sprint的时间。里面包括所有已承诺的故事以及相关联的任务，以及此外的附加工作。</p>\n<p>Sprint列表在Sprint规划会议中产生，一旦Sprint规划会议结束，，产品负责人就不可以再修改Sprint列表的故事清单。这是Scrum中业务方和开发团队之间的基本协议，每次Sprint开始前，业务方都可以改变方向，然而Sprint开始后，则允许团队只专注于他们所承诺的故事。改变这个已承诺故事清单有一个方式，就是由干这个活的团队成员提出变更请求。</p>\n<h4 id=\"信息辐射器\"><a href=\"#信息辐射器\" class=\"headerlink\" title=\"信息辐射器\"></a>信息辐射器</h4><p>任务板贴满了便事贴，分为待办、进展中、已完成三种状态。</p>\n<p>重要的是这些东西要做得大，而且要放在所有人都能看见的地方。要努力在墙上留住尽可能多的信息。</p>\n<h4 id=\"燃图\"><a href=\"#燃图\" class=\"headerlink\" title=\"燃图\"></a>燃图</h4><p>燃尽图描述了剩余工作随时间变化的轨迹。纵坐标绘制剩余量，横坐标是时间。</p>\n<p>发布燃尽图：产品负责人以此为工具追踪剩余工作随时间变化的过程。图表中有不同斜率的下降趋势线，反映了单位时间段内所完成点数的变化。</p>\n<p>Sprint燃尽图：显示当前Sprint剩余工作量的变化。Sprint燃尽图的目的在于，能够让团队看清楚情况，知道自己能够交付迭代中已经承诺的全部。</p>\n<p>燃耗图：团队的速率就是团队每个Sprint所完成的工作单位数量（例如故事点）。燃耗图绘制出已完成故事点随时间的变化的情况，是团队速率的可视化指示器。</p>\n<p>任务板：最简单的任务板由待办（todo）、办理(doing)和已办（done）三部分组成。</p>\n<h3 id=\"完成之定义\"><a href=\"#完成之定义\" class=\"headerlink\" title=\"完成之定义\"></a>完成之定义</h3><p>完成之定义和验收标准是有区别的。验收标准属于产品负责人或客户的领域，明确定义了被视为“可接受”产品必须满足的条件并记录在案。完成之定义归开发团队所有，关注的不是产品面向用户的功能，而是产品要可交付必须要做完的那些任务。</p>\n<h2 id=\"用户故事\"><a href=\"#用户故事\" class=\"headerlink\" title=\"用户故事\"></a>用户故事</h2><p>用户故事是产品列表的基础构件。用户故事通常都是手写在索引卡上的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作为&lt;某类用户&gt;</span><br><span class=\"line\">我想&lt;做某事&gt;</span><br><span class=\"line\">从而&lt;创造出某些价值&gt;</span><br></pre></td></tr></table></figure></p>\n<p>基于上述版本，又演化出了聚集目标的用户故事模板<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为了&lt;达成某类目标&gt;</span><br><span class=\"line\">作为&lt;某类用户&gt;</span><br><span class=\"line\">我想&lt;做某事&gt;</span><br></pre></td></tr></table></figure></p>\n<p>和聚焦价值的用户故事模板<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为了&lt;创造某价值&gt;</span><br><span class=\"line\">作为&lt;某类用户&gt;</span><br><span class=\"line\">我想&lt;做某事&gt;</span><br></pre></td></tr></table></figure></p>\n<p>用户故事是交谈的敲门砖。用户故事不是完整的需求或说明书，它们是占位符。它们的信息量足以提醒团队有东西要完成，但我们刻意地不过多探讨细节……直到必需之时。</p>\n<p>用户故事、交谈和接收标准结合起来组成了完整的需求规格说明书。用户故事让我们可以快速且完全地捕获想法。在交谈中，我们可以阐述所需完成的细节，并达成一致且可实现的理解。最终，我们用明确的、可测试的接收标准来记录共识。</p>\n<h2 id=\"用户故事大小估值工作\"><a href=\"#用户故事大小估值工作\" class=\"headerlink\" title=\"用户故事大小估值工作\"></a>用户故事大小估值工作</h2><p>生成估值的真正目标是要提供进度的可预测性度量。、</p>\n<h1 id=\"第三部分：辅助性实践\"><a href=\"#第三部分：辅助性实践\" class=\"headerlink\" title=\"第三部分：辅助性实践\"></a>第三部分：辅助性实践</h1><p>Scrum是轻量级框架，它不告诉你如何规划发布，或开发产品原型，或编写及测试代码。</p>\n<h2 id=\"发布规划\"><a href=\"#发布规划\" class=\"headerlink\" title=\"发布规划\"></a>发布规划</h2><p>发布规划是为产品发布挑选故事（特性、功能增强、缺陷修复等）的流程，以及应该如何进行发布。</p>\n<ul>\n<li>固定范围</li>\n<li>固定日期</li>\n<li>固定日期且固定范围</li>\n</ul>\n<p>速度、成本和范围，这是项目管理周期中著名的“铁三角”。在软件项目中，速度指的是构建和发布系统所需的时间，成本通常受项目上人头数的影响，范围涉及所包含的故事数量。三者组成一个平衡方程式，改变其中任何一个，必然都会导致另外一个或两个相应地产生变化。</p>\n<h2 id=\"用户角色人物\"><a href=\"#用户角色人物\" class=\"headerlink\" title=\"用户角色人物\"></a>用户角色人物</h2><p>用户角色人物是整理妥当的简要档案，用作参考时方便手持。研究自然环境中真实用户的习惯、态度和行为，虚构人物往往是它们的混合体。</p>\n<h2 id=\"绘制故事地图\"><a href=\"#绘制故事地图\" class=\"headerlink\" title=\"绘制故事地图\"></a>绘制故事地图</h2><p>绘制故事地图是另一种组织用户故事的方式，能够提供比传统产品列表更丰富的上下文，也有助于进行发布规划。</p>\n<p>尽管故事地图并不完全是产品列表的替代品，但对照比较一下还是很有好处的。本质上来看，产品列表是唯一的，用户故事按优先级从最高到最低的顺序排列。故事地图是二维的，不仅指示了故事的优先级，也指出了它们彼此的关系和用户更高层次的目标。地图能帮助团队理解故事是如何组装起来形成可发布产品的。</p>\n<h2 id=\"纸上原型\"><a href=\"#纸上原型\" class=\"headerlink\" title=\"纸上原型\"></a>纸上原型</h2><p>纸上原型并不是Scrum的一部分，但它具有敏捷的本质，是充实产品负责人工具箱的上佳之选。</p>\n<p>这种低科技、高参与度的方式能移除障碍，让客户也可以参与到设计与开发流程中，还能让学习成效最大化，因为它的反馈循环快得只在转瞬间。</p>\n<h2 id=\"项目微章程\"><a href=\"#项目微章程\" class=\"headerlink\" title=\"项目微章程\"></a>项目微章程</h2><p>微章程就是明确记载了项目关键信息的概要项目。项目伊始只不过是一个想法，而微章程就是有效捕获想法的一种方法。捕捉到之后，想法就会变得更易于分享、讨论和修订，这会极大地帮助你发现并排除掉范围及使命蔓延。</p>\n<p>基础微章程包含如下元素：</p>\n<ul>\n<li>代号：给项目取个名字</li>\n<li>使命宣言：表达项目的目的</li>\n<li>愿景宣言：描述项目想要创建的未来</li>\n<li>电梯演讲：关注项目要解决的问题，以及公司或客户将由此获得的好处。</li>\n<li>商业价值：项目对业务而言在金钱或其他方面的价值是什么</li>\n<li>客户和用户：做购买决策的人</li>\n<li>度量指标：讲清楚计划如何去度量之前所描述的那些价值</li>\n<li>里程碑：重要的时间点</li>\n<li>资源：完成如下描述的项目必须或必需用到的资源</li>\n<li>风险：可能危害或颠覆项目的事情</li>\n<li>权衡：现实地评估团队运作环境中的各种约束。</li>\n</ul>\n<h2 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h2><p>敏捷宣言声明：最好的架构、需求和设计出自自组织团队。</p>\n<p>重构就是，在不改变代码外在行为的前提下，对代码做出修改，以改进程序内部结构的一种有纪律的方法。核心是通过一连串的小行为实施转变。每次转变（称之为一次“重构”）都只做一点点，但一系列的转变就能带来显著的结构重组。由于每次重构都不大，也就不容易出错 。每次重构之后系统也依然运作良好，减少了系统在重组过程中严重受损的几率。</p>\n<p>把设计工作内置于开发流程之中，这就是敏捷开发迭代复迭代不断前行的方式。</p>\n<h2 id=\"测试驱动开发\"><a href=\"#测试驱动开发\" class=\"headerlink\" title=\"测试驱动开发\"></a>测试驱动开发</h2><p>测试驱动开发的目标在于快速地开发出设计精良、正确性已获证实的代码。</p>\n<p>通过先行测试，可以把注意力集中于开发人员需要让代码展现的外部行为。一旦开发人员切实地理解了代码需要做什么，就已经准备周全可以妥善地设计代码实现了。</p>\n<h2 id=\"结对编程\"><a href=\"#结对编程\" class=\"headerlink\" title=\"结对编程\"></a>结对编程</h2><p>结对编程更加快速地产出设计更精良、整洁的代码。它还能消灭知识简仓。</p>"},{"title":"搭建临时邮箱","date":"2018-02-11T06:54:14.000Z","updated":"2018-02-11T06:54:14.000Z","_content":"\n今天来介绍一个临时搭建的即用即毁的邮箱系统`forsaken-mail`。当我们不想使用自己的真实邮箱，或者想批量注册账号的时候，就可以很方便的用上了\n\n系统会自动分配随机邮箱，当有新邮件时页面会自动刷新，页面关闭后邮件即丢失，适合临时使用\n\n<!-- more -->\n\n本文的邮箱系统搭建在[搬瓦工VPS][1]上\n\n# 源码\n原作者[开源地址][2]。源码是nodejs编写。部署非常简单！\n\n# Linux安装部署\n服务器上需要事先安装`git`、`nodejs`等环境\n\n## 安装步骤\n- 从`github`上`clone`项目：`git clone https://github.com/denghongcai/forsaken-mail.git`\n- 进入项目目录下，安装依赖`npm install`\n- 启动项目`npm start`\n- 这时通过`ip`地址+端口号`3000`就能访问页面了\n\n## 开机自启\n```\n#安装pm2工具\nnpm install -g pm2\n\n#启动项目\npm2 start bin/www\n\n#设置开机启动（可选）\npm2 startup\npm2 save\n```\n\n## Nginx域名转发\n除了通过`IP`地址访问，还可以自定义邮箱域名\n\n首先需要在域名解析中添加如下记录\n- 添加域名：`A`记录指向到服务器`ip`地址\n- 添加域名：`MX`记录指向到服务器`ip`地址，优先级设置10\n\n这时使用`http://域名:3000/`访问就可以看到页面了。但是带着端口访问，强迫症患者总是觉得不舒服，此时就需要配置`Nginx`转发了。下面是我的配置文件\n```\nserver\n{\n  listen 80;\n  server_name mail.frees.gq ;\n\n  location / {\n    proxy_set_header HOST $host;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_pass http://localhost:3000/;\n  }\n}\n```\n`nginx -s reload`使之生效。这样就可以使用`http://mail.frees.gq`来访问了。开始愉快地玩耍吧~\n\n## 注意事项\n- 如果提示`Error: listen EADDRINUSE 0.0.0.0:25`，需要事先关闭服务器上的`sentmail`服务\n```\nservice sendmail stop\t# 关闭sendmail服务\nchkconfig sendmail off\t# 关闭sendmail自启动\n``` \n\n除了本站搭建的邮箱服务器，此外我还发现了另外一个免费的在线邮箱网站：[Guerrilla 邮箱 - 一次性临时邮箱](https://www.guerrillamail.com/zh/inbox)\n\n\n[1]: https://bwh1.net/aff.php?aff=29080 \"搬瓦工VPS\"\n[2]: https://github.com/denghongcai/forsaken-mail \"开源地址\"","source":"_posts/奇技淫巧/搭建临时邮箱.md","raw":"---\ntitle: 搭建临时邮箱\ndate: 2018-02-11 14:54:14\nupdated: 2018-02-11 14:54:14\ntags:\n  - VPS\n  - 邮箱\ncategories: \n  - VPS\n---\n\n今天来介绍一个临时搭建的即用即毁的邮箱系统`forsaken-mail`。当我们不想使用自己的真实邮箱，或者想批量注册账号的时候，就可以很方便的用上了\n\n系统会自动分配随机邮箱，当有新邮件时页面会自动刷新，页面关闭后邮件即丢失，适合临时使用\n\n<!-- more -->\n\n本文的邮箱系统搭建在[搬瓦工VPS][1]上\n\n# 源码\n原作者[开源地址][2]。源码是nodejs编写。部署非常简单！\n\n# Linux安装部署\n服务器上需要事先安装`git`、`nodejs`等环境\n\n## 安装步骤\n- 从`github`上`clone`项目：`git clone https://github.com/denghongcai/forsaken-mail.git`\n- 进入项目目录下，安装依赖`npm install`\n- 启动项目`npm start`\n- 这时通过`ip`地址+端口号`3000`就能访问页面了\n\n## 开机自启\n```\n#安装pm2工具\nnpm install -g pm2\n\n#启动项目\npm2 start bin/www\n\n#设置开机启动（可选）\npm2 startup\npm2 save\n```\n\n## Nginx域名转发\n除了通过`IP`地址访问，还可以自定义邮箱域名\n\n首先需要在域名解析中添加如下记录\n- 添加域名：`A`记录指向到服务器`ip`地址\n- 添加域名：`MX`记录指向到服务器`ip`地址，优先级设置10\n\n这时使用`http://域名:3000/`访问就可以看到页面了。但是带着端口访问，强迫症患者总是觉得不舒服，此时就需要配置`Nginx`转发了。下面是我的配置文件\n```\nserver\n{\n  listen 80;\n  server_name mail.frees.gq ;\n\n  location / {\n    proxy_set_header HOST $host;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_pass http://localhost:3000/;\n  }\n}\n```\n`nginx -s reload`使之生效。这样就可以使用`http://mail.frees.gq`来访问了。开始愉快地玩耍吧~\n\n## 注意事项\n- 如果提示`Error: listen EADDRINUSE 0.0.0.0:25`，需要事先关闭服务器上的`sentmail`服务\n```\nservice sendmail stop\t# 关闭sendmail服务\nchkconfig sendmail off\t# 关闭sendmail自启动\n``` \n\n除了本站搭建的邮箱服务器，此外我还发现了另外一个免费的在线邮箱网站：[Guerrilla 邮箱 - 一次性临时邮箱](https://www.guerrillamail.com/zh/inbox)\n\n\n[1]: https://bwh1.net/aff.php?aff=29080 \"搬瓦工VPS\"\n[2]: https://github.com/denghongcai/forsaken-mail \"开源地址\"","slug":"奇技淫巧/搭建临时邮箱","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjf4zxukb0000zky6hmt4bs5l","content":"<p>今天来介绍一个临时搭建的即用即毁的邮箱系统<code>forsaken-mail</code>。当我们不想使用自己的真实邮箱，或者想批量注册账号的时候，就可以很方便的用上了</p>\n<p>系统会自动分配随机邮箱，当有新邮件时页面会自动刷新，页面关闭后邮件即丢失，适合临时使用</p>\n<a id=\"more\"></a>\n<p>本文的邮箱系统搭建在<a href=\"https://bwh1.net/aff.php?aff=29080\" title=\"搬瓦工VPS\" target=\"_blank\" rel=\"noopener\">搬瓦工VPS</a>上</p>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><p>原作者<a href=\"https://github.com/denghongcai/forsaken-mail\" title=\"开源地址\" target=\"_blank\" rel=\"noopener\">开源地址</a>。源码是nodejs编写。部署非常简单！</p>\n<h1 id=\"Linux安装部署\"><a href=\"#Linux安装部署\" class=\"headerlink\" title=\"Linux安装部署\"></a>Linux安装部署</h1><p>服务器上需要事先安装<code>git</code>、<code>nodejs</code>等环境</p>\n<h2 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h2><ul>\n<li>从<code>github</code>上<code>clone</code>项目：<code>git clone https://github.com/denghongcai/forsaken-mail.git</code></li>\n<li>进入项目目录下，安装依赖<code>npm install</code></li>\n<li>启动项目<code>npm start</code></li>\n<li>这时通过<code>ip</code>地址+端口号<code>3000</code>就能访问页面了</li>\n</ul>\n<h2 id=\"开机自启\"><a href=\"#开机自启\" class=\"headerlink\" title=\"开机自启\"></a>开机自启</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装pm2工具</span><br><span class=\"line\">npm install -g pm2</span><br><span class=\"line\"></span><br><span class=\"line\">#启动项目</span><br><span class=\"line\">pm2 start bin/www</span><br><span class=\"line\"></span><br><span class=\"line\">#设置开机启动（可选）</span><br><span class=\"line\">pm2 startup</span><br><span class=\"line\">pm2 save</span><br></pre></td></tr></table></figure>\n<h2 id=\"Nginx域名转发\"><a href=\"#Nginx域名转发\" class=\"headerlink\" title=\"Nginx域名转发\"></a>Nginx域名转发</h2><p>除了通过<code>IP</code>地址访问，还可以自定义邮箱域名</p>\n<p>首先需要在域名解析中添加如下记录</p>\n<ul>\n<li>添加域名：<code>A</code>记录指向到服务器<code>ip</code>地址</li>\n<li>添加域名：<code>MX</code>记录指向到服务器<code>ip</code>地址，优先级设置10</li>\n</ul>\n<p>这时使用<code>http://域名:3000/</code>访问就可以看到页面了。但是带着端口访问，强迫症患者总是觉得不舒服，此时就需要配置<code>Nginx</code>转发了。下面是我的配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name mail.frees.gq ;</span><br><span class=\"line\"></span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    proxy_set_header HOST $host;</span><br><span class=\"line\">    proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    proxy_pass http://localhost:3000/;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>nginx -s reload</code>使之生效。这样就可以使用<code>http://mail.frees.gq</code>来访问了。开始愉快地玩耍吧~</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>如果提示<code>Error: listen EADDRINUSE 0.0.0.0:25</code>，需要事先关闭服务器上的<code>sentmail</code>服务<pre><code>service sendmail stop    # 关闭sendmail服务\nchkconfig sendmail off    # 关闭sendmail自启动\n</code></pre></li>\n</ul>\n<p>除了本站搭建的邮箱服务器，此外我还发现了另外一个免费的在线邮箱网站：<a href=\"https://www.guerrillamail.com/zh/inbox\" target=\"_blank\" rel=\"noopener\">Guerrilla 邮箱 - 一次性临时邮箱</a></p>\n","site":{"data":{}},"excerpt":"<p>今天来介绍一个临时搭建的即用即毁的邮箱系统<code>forsaken-mail</code>。当我们不想使用自己的真实邮箱，或者想批量注册账号的时候，就可以很方便的用上了</p>\n<p>系统会自动分配随机邮箱，当有新邮件时页面会自动刷新，页面关闭后邮件即丢失，适合临时使用</p>","more":"<p>本文的邮箱系统搭建在<a href=\"https://bwh1.net/aff.php?aff=29080\" title=\"搬瓦工VPS\" target=\"_blank\" rel=\"noopener\">搬瓦工VPS</a>上</p>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><p>原作者<a href=\"https://github.com/denghongcai/forsaken-mail\" title=\"开源地址\" target=\"_blank\" rel=\"noopener\">开源地址</a>。源码是nodejs编写。部署非常简单！</p>\n<h1 id=\"Linux安装部署\"><a href=\"#Linux安装部署\" class=\"headerlink\" title=\"Linux安装部署\"></a>Linux安装部署</h1><p>服务器上需要事先安装<code>git</code>、<code>nodejs</code>等环境</p>\n<h2 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h2><ul>\n<li>从<code>github</code>上<code>clone</code>项目：<code>git clone https://github.com/denghongcai/forsaken-mail.git</code></li>\n<li>进入项目目录下，安装依赖<code>npm install</code></li>\n<li>启动项目<code>npm start</code></li>\n<li>这时通过<code>ip</code>地址+端口号<code>3000</code>就能访问页面了</li>\n</ul>\n<h2 id=\"开机自启\"><a href=\"#开机自启\" class=\"headerlink\" title=\"开机自启\"></a>开机自启</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装pm2工具</span><br><span class=\"line\">npm install -g pm2</span><br><span class=\"line\"></span><br><span class=\"line\">#启动项目</span><br><span class=\"line\">pm2 start bin/www</span><br><span class=\"line\"></span><br><span class=\"line\">#设置开机启动（可选）</span><br><span class=\"line\">pm2 startup</span><br><span class=\"line\">pm2 save</span><br></pre></td></tr></table></figure>\n<h2 id=\"Nginx域名转发\"><a href=\"#Nginx域名转发\" class=\"headerlink\" title=\"Nginx域名转发\"></a>Nginx域名转发</h2><p>除了通过<code>IP</code>地址访问，还可以自定义邮箱域名</p>\n<p>首先需要在域名解析中添加如下记录</p>\n<ul>\n<li>添加域名：<code>A</code>记录指向到服务器<code>ip</code>地址</li>\n<li>添加域名：<code>MX</code>记录指向到服务器<code>ip</code>地址，优先级设置10</li>\n</ul>\n<p>这时使用<code>http://域名:3000/</code>访问就可以看到页面了。但是带着端口访问，强迫症患者总是觉得不舒服，此时就需要配置<code>Nginx</code>转发了。下面是我的配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name mail.frees.gq ;</span><br><span class=\"line\"></span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    proxy_set_header HOST $host;</span><br><span class=\"line\">    proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    proxy_pass http://localhost:3000/;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>nginx -s reload</code>使之生效。这样就可以使用<code>http://mail.frees.gq</code>来访问了。开始愉快地玩耍吧~</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>如果提示<code>Error: listen EADDRINUSE 0.0.0.0:25</code>，需要事先关闭服务器上的<code>sentmail</code>服务<pre><code>service sendmail stop    # 关闭sendmail服务\nchkconfig sendmail off    # 关闭sendmail自启动\n</code></pre></li>\n</ul>\n<p>除了本站搭建的邮箱服务器，此外我还发现了另外一个免费的在线邮箱网站：<a href=\"https://www.guerrillamail.com/zh/inbox\" target=\"_blank\" rel=\"noopener\">Guerrilla 邮箱 - 一次性临时邮箱</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjf4zd2y30004woy61uw1n9ux","category_id":"cjf4ywks70005vfy6iftdpdnz","_id":"cjf4zd2y40007woy6hbfxqwta"},{"post_id":"cjf4zdkxy0009woy6l1857bfd","category_id":"cjf4ywks70005vfy6iftdpdnz","_id":"cjf4zdkxz000cwoy65h20dgmz"},{"post_id":"cjf4zg7kq000iwoy67r80vww9","category_id":"cjf4ywksk000kvfy6k5owedys","_id":"cjf4zgvkg000mwoy68ndcmemh"},{"post_id":"cjf4zhwbl000nwoy6p2z003n2","category_id":"cjf4ywks70005vfy6iftdpdnz","_id":"cjf4zhwbm000qwoy6w3cgi1jo"},{"post_id":"cjf4zhys6000rwoy61ue9ipvs","category_id":"cjf4ywks70005vfy6iftdpdnz","_id":"cjf4zhys8000uwoy6w66flz4g"},{"post_id":"cjf4zi3am000vwoy6ui97pzh2","category_id":"cjf4ywksd000avfy6bugtydeg","_id":"cjf4zi3an000ywoy68oiiys16"},{"post_id":"cjf4zi3ao000zwoy6fi0ln4z8","category_id":"cjf4ywks70005vfy6iftdpdnz","_id":"cjf4zi3aq0011woy6y8ivhu5a"},{"post_id":"cjf4zmnv00016woy6fkx5h7qc","category_id":"cjf4zpvr1001gwoy6churmaph","_id":"cjf4zpvr2001hwoy6itqtmfay"},{"post_id":"cjf4zmnv10017woy6i7pokui8","category_id":"cjf4zpvr1001gwoy6churmaph","_id":"cjf4zq1r6001jwoy638y4x66c"},{"post_id":"cjf4zxukb0000zky6hmt4bs5l","category_id":"cjf4ywksh000fvfy6agshzel7","_id":"cjf4zxukf0003zky6bt4ubuup"}],"PostTag":[{"post_id":"cjf4zd2y30004woy61uw1n9ux","tag_id":"cjf4ywks90006vfy6b5bsm1c0","_id":"cjf4zd2y40005woy65kfhzdsm"},{"post_id":"cjf4zd2y30004woy61uw1n9ux","tag_id":"cjf4ywksd000bvfy6ro0c103w","_id":"cjf4zd2y40006woy6tqhu47go"},{"post_id":"cjf4zd2y30004woy61uw1n9ux","tag_id":"cjf4ywksh000gvfy6v0jvlb00","_id":"cjf4zd2y50008woy6d90hq79c"},{"post_id":"cjf4zdkxy0009woy6l1857bfd","tag_id":"cjf4ywks90006vfy6b5bsm1c0","_id":"cjf4zdkxz000awoy6cvxrbmjt"},{"post_id":"cjf4zdkxy0009woy6l1857bfd","tag_id":"cjf4ywksh000gvfy6v0jvlb00","_id":"cjf4zdkxz000bwoy6utfy5p58"},{"post_id":"cjf4zdkxy0009woy6l1857bfd","tag_id":"cjf4ywksr001avfy6n53l9leo","_id":"cjf4zdkxz000dwoy6y74fbphr"},{"post_id":"cjf4zg7kq000iwoy67r80vww9","tag_id":"cjf4ywkso0012vfy64wui916q","_id":"cjf4zg7ks000jwoy6i7dk5ypu"},{"post_id":"cjf4zhwbl000nwoy6p2z003n2","tag_id":"cjf4ywks90006vfy6b5bsm1c0","_id":"cjf4zhwbm000owoy6wj4sk3os"},{"post_id":"cjf4zhwbl000nwoy6p2z003n2","tag_id":"cjf4ywksh000gvfy6v0jvlb00","_id":"cjf4zhwbm000pwoy63gwpvqyi"},{"post_id":"cjf4zhys6000rwoy61ue9ipvs","tag_id":"cjf4ywks90006vfy6b5bsm1c0","_id":"cjf4zhys8000swoy6pcxdas29"},{"post_id":"cjf4zhys6000rwoy61ue9ipvs","tag_id":"cjf4ywksh000gvfy6v0jvlb00","_id":"cjf4zhys8000twoy6gkg45og8"},{"post_id":"cjf4zi3am000vwoy6ui97pzh2","tag_id":"cjf4ywksk000lvfy6m5oazkq5","_id":"cjf4zi3an000wwoy6bhr0lwf9"},{"post_id":"cjf4zi3am000vwoy6ui97pzh2","tag_id":"cjf4ywksm000qvfy66n8c8gi7","_id":"cjf4zi3an000xwoy6dfuq37hw"},{"post_id":"cjf4zi3ao000zwoy6fi0ln4z8","tag_id":"cjf4ywksq0017vfy6oz8ttlzl","_id":"cjf4zi3ap0010woy6fwz35cwd"},{"post_id":"cjf4zmnv00016woy6fkx5h7qc","tag_id":"cjf4zprgk001ewoy6rx8neuhv","_id":"cjf4zprgl001fwoy6oss4joj6"},{"post_id":"cjf4zmnv10017woy6i7pokui8","tag_id":"cjf4zprgk001ewoy6rx8neuhv","_id":"cjf4zq1r6001iwoy6mzfyjcxe"},{"post_id":"cjf4zxukb0000zky6hmt4bs5l","tag_id":"cjf4ywksm000vvfy6n0kvoxfd","_id":"cjf4zxuke0001zky67uj46mn0"},{"post_id":"cjf4zxukb0000zky6hmt4bs5l","tag_id":"cjf4ywksn000yvfy6mq5b2wpz","_id":"cjf4zxukf0002zky64abyzdst"}],"Tag":[{"name":"HEXO","_id":"cjf4ywks90006vfy6b5bsm1c0"},{"name":"Next","_id":"cjf4ywksd000bvfy6ro0c103w"},{"name":"博客","_id":"cjf4ywksh000gvfy6v0jvlb00"},{"name":"SEO","_id":"cjf4ywksk000lvfy6m5oazkq5"},{"name":"收录","_id":"cjf4ywksm000qvfy66n8c8gi7"},{"name":"VPS","_id":"cjf4ywksm000vvfy6n0kvoxfd"},{"name":"邮箱","_id":"cjf4ywksn000yvfy6mq5b2wpz"},{"name":"Git","_id":"cjf4ywkso0012vfy64wui916q"},{"name":"HTTPS","_id":"cjf4ywksq0017vfy6oz8ttlzl"},{"name":"部署","_id":"cjf4ywksr001avfy6n53l9leo"},{"name":"读书笔记","_id":"cjf4zprgk001ewoy6rx8neuhv"}]}}